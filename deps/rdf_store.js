(function() {


  if(typeof(console)=='undefined') {
     console = {};
     console.log = function(e){};
  }

var Utils = {};



Utils['extends'] = function(supertype, descendant) {
    descendant.prototype = new supertype();
};


Utils.stackCounterLimit = 1000;
Utils.stackCounter = 0;

Utils.recur = function(c){
    if(Utils.stackCounter === Utils.stackCounterLimit) {
        Utils.stackCounter = 0;
        setTimeout(c, 0);
    } else {
        Utils.stackCounter++;
        c();
    } 
};

Utils.clone = function(o) {
    return JSON.parse(JSON.stringify(o));
};

Utils.shuffle = function(o){ //v1.0
    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x){};
    return o;
};

Utils.include = function(a,v) {
    var cmp = arguments[2];

    for(var i=(a.length-1); i>=0; i--) {
        var res = false;
        if(cmp == null) {
            res = (a[i] === v);
        } else {
            res = (cmp(a[i],v) === 0);
        }

        if(res === true) {
            return true;
        }
    }

    return false;
};

Utils.remove = function(a,v) {
    var acum = [];
    for(var i=0; i<a.length; i++) {
        if(a[i] !== v) {
            acum.push(a[i]);
        }
    }

    return acum;
};

Utils.repeat = function(c,max,floop,fend,env) {
    if(arguments.length===4) { env = {}; }
    if(c<max) {
        env._i = c;
        floop(function(floop,env){
            // avoid stack overflow
            // deadly hack
            Utils.recur(function(){ Utils.repeat(c+1, max, floop, fend, env); });
        },env);
    } else {
        fend(env);
    }
};


Utilsmeanwhile = function(c,floop,fend,env) {
    if(arguments.length===3) { env = {}; }

    if(env['_stack_counter'] == null) {
        env['_stack_counter'] = 0;
    }

    if(c===true) {
        floop(function(c,floop,env){
            if(env['_stack_counter'] % 40 == 39) {
                env['_stack_counter'] = env['_stack_counter'] + 1;
                setTimeout(function(){ Utilsmeanwhile(c, floop, fend, env); }, 0);
            } else {
                env['_stack_counter'] = env['_stack_counter'] + 1;
                Utilsmeanwhile(c, floop, fend, env);
            }
        },env);
    } else {
        fend(env);
    }
};

Utils.seq = function() {
    var fs = arguments;
    return function(callback) {
        Utils.repeat(0, fs.length, function(k,env){
            var floop = arguments.callee;
            fs[env._i](function(){
                k(floop, env);
            });
        }, function(){
            callback();
        });
    };
};


Utils.partition = function(c, n) {
    var rem = c.length % n;
    var currentGroup = [];
    for(var i=0; i<rem; i++) {
        currentGroup.push(null);
    }
    
    var groups = [];
    var groupCounter = rem;
    for(var i=0; i<c.length; i++) {
        currentGroup.push(c[i]);
        if(currentGroup.length % n == 0) {
            groups.push(currentGroup);
            currentGroup = [];
        }
    }
    return groups;
};

Utils.keys = function(obj) {
    var variables = [];
    for(var variable in obj) {
        variables.push(variable);
    }

    return variables;
};

Utils.iso8601 = function(date) {
    function pad(n){
        return n<10 ? '0'+n : n;
    }    
    return date.getUTCFullYear()+'-'
        + pad(date.getUTCMonth()+1)+'-'
        + pad(date.getUTCDate())+'T'
        + pad(date.getUTCHours())+':'
        + pad(date.getUTCMinutes())+':'
        + pad(date.getUTCSeconds())+'Z';
};


Utils.parseStrictISO8601 = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = str.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); } else { throw "missing ISO8061 component" }
    if (d[5]) { date.setDate(d[5]);  } else { throw "missing ISO8061 component" }
    if (d[7]) { date.setHours(d[7]);  } else { throw "missing ISO8061 component" }
    if (d[8]) { date.setMinutes(d[8]);  } else { throw "missing ISO8061 component" }
    if (d[10]) { date.setSeconds(d[10]);  } else { throw "missing ISO8061 component" }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    var toReturn = new Date();
    toReturn.setTime(Number(time));
    return toReturn;
}


Utils.parseISO8601 = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = str.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); }
    if (d[5]) { date.setDate(d[5]);  }
    if (d[7]) { date.setHours(d[7]);  }
    if (d[8]) { date.setMinutes(d[8]);  }
    if (d[10]) { date.setSeconds(d[10]);  }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    var toReturn = new Date();
    toReturn.setTime(Number(time));
    return toReturn;
};

Utils.parseISO8601Components = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2}))(-([0-9]{2}))(T([0-9]{2}):([0-9]{2})(:([0-9]{2}))?(\.([0-9]+))?)?(Z|([-+])([0-9]{2})(:([0-9]{2}))?)?";
    var d = str.match(new RegExp(regexp));
    var year, month, date, hours, minutes, seconds, millisecs, timezone;
    year = Number(d[1]);
    month = d[3] - 1;
    date  = Number(d[5]);
    hours = Number(d[7]);
    minutes = Number(d[8]);
    seconds = Number(d[10]);

    if(d[12]) { millisecs = Number("0." + d[12]) * 1000; }

    if(d[13]==="Z") {
        timezone = 0;
    } else if (d[14]) {
        timezone = 0;
        if(d[17]) {
            timezone = Number(d[17]);
        }
        timezone = timezone+(Number(d[15]) * 60);
        timezone *= ((d[14] == '-') ? -1 : +1);
    } else if(d[14]==null && d[11]) {
        timezone = Number(d[12])*60;
    }    

    return {'year': isNaN(year) ? null : year,
            'month': isNaN(month) ? null : month,
            'date': isNaN(date) ? null : date,
            'hours': isNaN(hours) ? null : hours,
            'minutes': isNaN(minutes) ? null : minutes,
            'seconds': isNaN(seconds) ? null : seconds,
            'millisecs':isNaN(millisecs) ? null : millisecs,
            'timezone': isNaN(timezone) ? null : timezone};
};

Utils.compareDateComponents = function(stra,strb) {
    var a = Utils.parseISO8601Components(stra);
    var b = Utils.parseISO8601Components(strb);

    if((a.timezone == null && b.timezone == null) ||
       (a.timezone != null && b.timezone != null)) {        
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        
        if(da.getTime() == db.getTime()) {
            return 0;
        } else if(da.getTime() < db.getTime()){
            return -1;
        } else {
            return 1;
        }
    } else if (a.timezone != null && b.timezone == null){
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        ta = da.getTime();
        tb = db.getTime();

        var offset = 14*60*60;

        if(ta < tb && ta < (tb + offset)) {
            return -1;
        } else if(ta > tb && ta > (tb - offset)) {
            return 1;
        } else {
        return null;
        }
    } else {
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        ta = da.getTime();
        tb = db.getTime();

        var offset = 14*60*60;
        if(ta < tb && (ta + offset)  < tb) {
            return -1;
        } else if(ta > tb && (ta + offset) > tb) {
            return 1;
        } else {
        return null;
        }
    }
};

// RDF utils
Utils.lexicalFormLiteral = function(term, env) {
    var value = term.value;
    var lang = term.lang;
    var type = term.type;

    var indexedValue = null;
    if(value != null && type != null && typeof(type) != 'string') {
        var typeValue = type.value;

        if(typeValue == null) {
            var typePrefix = type.prefix;
            var typeSuffix = type.suffix;

            var resolvedPrefix = env.namespaces[typePrefix];
            term.type = resolvedPrefix+typeSuffix;
	    typeValue = resolvedPrefix+typeSuffix;
        }
	// normalization
	if(typeValue.indexOf('hexBinary') != -1) {
            indexedValue = '"' + term.value.toLowerCase() + '"^^<' + typeValue + '>';
	} else {
            indexedValue = '"' + term.value + '"^^<' + typeValue + '>';
	}
    } else {
        if(lang == null && type == null) {
            indexedValue = '"' + value + '"';
        } else if(type == null) {
            indexedValue = '"' + value + '"' + "@" + lang;        
        } else {
	    // normalization
	    if(type.indexOf('hexBinary') != -1) {
		indexedValue = '"' + term.value.toLowerCase() + '"^^<'+type+'>';
	    } else {
		indexedValue = '"' + term.value + '"^^<'+type+'>';
	    }
        }
    }
    return indexedValue;
};

Utils.lexicalFormBaseUri = function(term, env) {
    var uri = null;
    //console.log("*** normalizing URI token:");
    //console.log(term);
    if(term.value == null) {
        //console.log(" - URI has prefix and suffix");
        //console.log(" - prefix:"+term.prefix);
        //console.log(" - suffixx:"+term.suffix);
        var prefix = term.prefix;
        var suffix = term.suffix;
        var resolvedPrefix = env.namespaces[prefix];
        if(resolvedPrefix != null) {            
            uri = resolvedPrefix+suffix;
        } else {
            uri = prefix+":"+suffix;
        }
    } else {
        //console.log(" - URI is not prefixed");
        uri = term.value;
    }

    if(uri===null) {
        return null;
    } else {
        //console.log(" - resolved URI is "+uri);
        if(uri.indexOf(":") == -1) {
            //console.log(" - URI is partial");
            uri = (env.base||"") + uri; // applyBaseUri
        } else {
            //console.log(" - URI is complete");
        }
        //console.log(" -> FINAL URI: "+uri);
    }

    return uri;
};


Utils.lexicalFormTerm = function(term, ns) {
    if(term.token === 'uri') {
        return {'uri': Utils.lexicalFormBaseUri(term, ns)};
    } else if(term.token === 'literal') {
        return {'literal': Utils.lexicalFormLiteral(term, ns)};
    } else if(term.token === 'blank') {
        var label = '_:'+term.value;
        return {'blank': label};
    } else {
	throw "Error, cannot get lexical form of unknown token: "+term.token;
    }
};

Utils.normalizeUnicodeLiterals = function(string) {
    var escapedUnicode = string.match(/\\u[0-9abcdefABCDEF]{4,4}/g) || [];
    var dups = {};
    for(var i=0; i<escapedUnicode.length; i++) {
        if(dups[escapedUnicode[i]] == null) {
            dups[escapedUnicode[i]] = true;
            string = string.replace(new RegExp("\\"+escapedUnicode[i],"g"), eval("'"+escapedUnicode[i]+"'"));
        }
    }

    return string;
}

Utils.hashTerm = function(term) {
    try {
      if(term == null) {
          return "";
      } if(term.token==='uri') {
          return "u"+term.value;
      } else if(term.token === 'blank') {
          return "b"+term.value;
      } else if(term.token === 'literal') {
          l = "l"+term.value;
          l = l + (term.type || "");
          l = l + (term.lang || "");        
   
          return l;
      }
    } catch(e) {
        if(typeof(term) === 'object') {
            var key = "";
            for(p in term) {
                key = key + p + term[p];
            }

            return key;
        }
        return term;
    }
};

// end of ./src/js-trees/src/utils.js 
// exports
var InMemoryBTree = {};

var left = -1;
var right = 1;


/**
 * @doc
 * Implementation based on <http://www.gossamer-threads.com/lists/linux/kernel/667935>
 *
 */

/**
 * Tree
 *
 * Implements the interface of BinarySearchTree.Tree
 *
 * An implementation of an in memory B-Tree.
 */

InMemoryBTree.Tree = function(order) {
    if(arguments.length != 0) {
        this.order = order;
        this.root = this._allocateNode();
        this.root.isLeaf = true;
        this.root.level = 0;
        this._diskWrite(this.root);
        this._updateRootNode(this.root);

        this.comparator = function(a,b) {
            if(a < b) {
                return -1;
            } else if(a > b){
                return 1;
            } else {
                return 0;
            }
        };
        this.merger = null;
    }
};

/**
 * Creates the new node.
 *
 * This class can be overwritten by different versions of
 * the tree t select the right kind of node to be used
 *
 * @returns the new alloacted node
 */
InMemoryBTree.Tree.prototype._allocateNode = function() {
    return new InMemoryBTree.Node();
}

/**
 * _diskWrite
 *
 * Persists the node to secondary memory.
 */
InMemoryBTree.Tree.prototype._diskWrite= function(node) {
    // dummy implementation;
    // no-op
};


/**
 * _diskRead
 *
 * Retrieves a node from secondary memory using the provided
 * pointer
 */
InMemoryBTree.Tree.prototype._diskRead = function(pointer) {
    // dummy implementation;
    // no-op
    return pointer;
};


InMemoryBTree.Tree.prototype._diskDelete= function(node) {
    // dummy implmentation
    // no-op
};

/**
 * _updateRootNode
 *
 * Updates the pointer to the root node stored in disk.
 */
InMemoryBTree.Tree.prototype._updateRootNode = function(node) {
    // dummy implementation;
    // no-op
    return node;
};

InMemoryBTree.Tree.prototype.clear = function() {
        this.root = this._allocateNode();
        this.root.isLeaf = true;
        this.root.level = 0;
        this._updateRootNode(this.root);
};

/**
 * search
 *
 * Retrieves the node matching the given value.
 * If no node is found, null is returned.
 */
InMemoryBTree.Tree.prototype.search = function(key, checkExists) {
    var searching = true;
    var node = this.root;

    while(searching) {
        var idx = 0;
        while(idx < node.numberActives && this.comparator(key, node.keys[idx].key) === 1) {
            idx++;
        }

        if(idx < node.numberActives && this.comparator(node.keys[idx].key,key) === 0) {
            if(checkExists != null && checkExists == true) {
                return true;
            } else {
                return node.keys[idx].data;
            }
        } else {
            if(node.isLeaf === true) {
                searching = false;
            } else {
                node = this._diskRead(node.children[idx]);
            }
        }
    }

    return null;
};


/**
 * walk
 * Applies a function to all the nodes key and data in the the
 * tree in key order.
 */
InMemoryBTree.Tree.prototype.walk = function(f) {
    this._walk(f,this.root);
};

InMemoryBTree.Tree.prototype._walk = function(f,node) {
    if(node.isLeaf) {
        for(var i=0; i<node.numberActives; i++) {
            f(node.keys[i]);
        }
    } else {
        for(var i=0; i<node.numberActives; i++) {
            this._walk(f,this._diskRead(node.children[i]));
            f(node.keys[i]);
        }
        this._walk(f,this._diskRead(node.children[node.numberActives]));
    }
};

/**
 * walkNodes
 * Applies a function to all the nodes in the the
 * tree in key order.
 */
InMemoryBTree.Tree.prototype.walkNodes = function(f) {
    this._walkNodes(f,this.root);
};

InMemoryBTree.Tree.prototype._walkNodes = function(f,node) {
    if(node.isLeaf) {
        f(node);
    } else {
        f(node);
        for(var i=0; i<node.numberActives; i++) {
            this._walkNodes(f,this._diskRead(node.children[i]));
        }
        this._walkNodes(f,this._diskRead(node.children[node.numberActives]));
    }
};

/**
 * _splitChild
 *
 * Split the child node and adjusts the parent.
 */
InMemoryBTree.Tree.prototype._splitChild = function(parent, index, child) {
    var newChild = this._allocateNode();
    newChild.isLeaf = child.isLeaf;
    newChild.level = child.level;
    newChild.numberActives = this.order - 1;

    // Copy the higher order keys to the new child
    var newParentChild = child.keys[this.order-1];
    child.keys[this.order-1] = null;

    for(var i=0; i< this.order-1; i++) {
	newChild.keys[i]=child.keys[i+this.order];
	child.keys[i+this.order] = null;
	if(!child.isLeaf) {
	    newChild.children[i] = child.children[i+this.order];
            child.children[i+this.order] = null;
	}
    }

    // Copy the last child pointer
    if(!child.isLeaf) {
	newChild.children[i] = child.children[i+this.order];
        child.children[i+this.order] = null;
    }

    child.numberActives = this.order - 1;


    for(i = parent.numberActives + 1; i>index+1; i--) {
	parent.children[i] = parent.children[i-1];
    }

    parent.children[index+1] = newChild;

    for(i = parent.numberActives; i>index; i--) {
	parent.keys[i] = parent.keys[i-1];
    }

    parent.keys[index] = newParentChild;
    parent.numberActives++;

    this._diskWrite(newChild);
    this._diskWrite(parent);
    this._diskWrite(child);
};

/**
 * insert
 *
 * Creates a new node with value key and data and inserts it
 * into the tree.
 */
InMemoryBTree.Tree.prototype.insert = function(key,data) {
    if(this.root.numberActives === (2 * this.order - 1)) {
        var newRoot = this._allocateNode();
        newRoot.isLeaf = false;
        newRoot.level = this.root.level + 1;
        newRoot.numberActives = 0;
        newRoot.children[0] = this.root;

        this._splitChild(newRoot, 0, this.root);
        this.root = newRoot;
        this._updateRootNode(this.root);
        this._insertNonFull(newRoot, key, data);
    } else {
        this._insertNonFull(this.root, key, data);
    }
};

/**
 * _insertNonFull
 *
 * Recursive function that tries to insert the new key in
 * in the prvided node, or splits it and go deeper
 * in the BTree hierarchy.
 */
InMemoryBTree.Tree.prototype._insertNonFull = function(node,key,data) {
    var idx = node.numberActives - 1;

    while(!node.isLeaf) {
        while(idx>=0 && this.comparator(key,node.keys[idx].key) === -1) {
            idx--;
        }
        idx++;
        var child = this._diskRead(node.children[idx]);

        if(child.numberActives === 2*this.order -1) {
            this._splitChild(node,idx,child);
            if(this.comparator(key, node.keys[idx].key)===1) {
                idx++;
            }
        }
        node = this._diskRead(node.children[idx]);
        idx = node.numberActives -1;
    }

    while(idx>=0 && this.comparator(key,node.keys[idx].key) === -1) {
        node.keys[idx+1] = node.keys[idx];
        idx--;
    }

    node.keys[idx+1] = {key: key, data:data}
    node.numberActives++;
    this._diskWrite(node);
};

/**
 * delete
 *
 * Deletes the key from the BTree.
 * If the key is not found, an exception is thrown.
 *
 * @param key the key to be deleted
 * @returns true if the key is deleted false otherwise
 */
InMemoryBTree.Tree.prototype['delete'] = function(key) {
    var node = this.root;
    var parent = null;
    var searching = true;
    var idx = null;
    var lsibling = null;
    var rsibling = null;
    var shouldContinue = true;

    while(shouldContinue === true) {
        shouldContinue = false;

        while(searching === true) {
            i = 0;

            if(node.numberActives === 0) {
                return false;
            }

            while(i<node.numberActives && this.comparator(key, node.keys[i].key) === 1) {
                i++;
            }

            idx = i;

            if(i<node.numberActives && this.comparator(key, node.keys[i].key) === 0) {
                searching = false;
            }

            if(searching === true) {

                if(node.isLeaf === true) {
                    return false;
                }

                parent = node;
                node = this._diskRead(node.children[i]);

                if(node===null) {
                    return false;
                }

                if(idx === parent.numberActives) {
                    lsibling = this._diskRead(parent.children[idx-1]);
                    rsibling = null;
                } else if(idx === 0) {
                    lsibling = null;
                    rsibling = this._diskRead(parent.children[1]);
                } else {
                    lsibling = this._diskRead(parent.children[idx-1]);
                    rsibling = this._diskRead(parent.children[idx+1]);
                }


                if(node.numberActives === (this.order-1) && parent != null) {
                    if(rsibling != null && rsibling.numberActives > (this.order-1)) {
                        // The current node has (t - 1) keys but the right sibling has > (t - 1) keys
                        this._moveKey(parent,i,left);
                    } else if(lsibling != null && lsibling.numberActives > (this.order-1)) {
                        // The current node has (t - 1) keys but the left sibling has > (t - 1) keys
                        this._moveKey(parent,i,right);
                    } else if(lsibling != null && lsibling.numberActives === (this.order-1)) {
                        // The current node has (t - 1) keys but the left sibling has (t - 1) keys
                        node = this._mergeSiblings(parent,i,left);
                    } else if(rsibling != null && rsibling.numberActives === (this.order-1)){
                        // The current node has (t - 1) keys but the left sibling has (t - 1) keys
                        node = this._mergeSiblings(parent,i,right);
                    }
                }
            }
        }


        //Case 1 : The node containing the key is found and is the leaf node.
        //Also the leaf node has keys greater than the minimum required.
        //Simply remove the key
        if(node.isLeaf && (node.numberActives > (this.order-1))) {
            this._deleteKeyFromNode(node,idx);
            return true;
        }


        //If the leaf node is the root permit deletion even if the number of keys is
        //less than (t - 1)
        if(node.isLeaf && (node === this.root)) {
            this._deleteKeyFromNode(node,idx);
            return true;
        }


        //Case 2: The node containing the key is found and is an internal node
        if(node.isLeaf === false) {
            var tmpNode = null;
            var tmpNode2 = null;
            if((tmpNode=this._diskRead(node.children[idx])).numberActives > (this.order-1)) {
                var subNodeIdx = this._getMaxKeyPos(tmpNode);
                key = subNodeIdx.node.keys[subNodeIdx.index];

                node.keys[idx] = key;

                //this._delete(node.children[idx],key.key);
                this._diskWrite(node);
                node = tmpNode;
                key = key.key;
                shouldContinue = true;
                searching = true;
            } else if ((tmpNode = this._diskRead(node.children[idx+1])).numberActives >(this.order-1)) {
                var subNodeIdx = this._getMinKeyPos(tmpNode);
                key = subNodeIdx.node.keys[subNodeIdx.index];

                node.keys[idx] = key;

                //this._delete(node.children[idx+1],key.key);
                this._diskWrite(node);
                node = tmpNode;
                key = key.key;
                shouldContinue = true;
                searching = true;
            } else if((tmpNode = this._diskRead(node.children[idx])).numberActives === (this.order-1) &&
                      (tmpNode2 = this._diskRead(node.children[idx+1])).numberActives === (this.order-1)) {

                var combNode = this._mergeNodes(tmpNode, node.keys[idx], tmpNode2);
                node.children[idx] = combNode;

                idx++;
                for(var i=idx; i<node.numberActives; i++) {
          	    node.children[i] = node.children[i+1];
          	    node.keys[i-1] = node.keys[i];
                }
                // freeing unused references
                node.children[i] = null;
                node.keys[i-1] = null;

                node.numberActives--;
                if (node.numberActives === 0 && this.root === node) {
                    this.root = combNode;
                }

                this._diskWrite(node);

                node = combNode;
                shouldContinue = true;
                searching = true;
            }
        }


        // Case 3:
	// In this case start from the top of the tree and continue
	// moving to the leaf node making sure that each node that
	// we encounter on the way has atleast 't' (order of the tree)
	// keys
	if(node.isLeaf && (node.numberActives > this.order - 1) && searching===false) {
            this._deleteKeyFromNode(node,idx);
	}

        if(shouldContinue === false) {
            return true;
        }
    }
};

/**
 * _moveKey
 *
 * Move key situated at position i of the parent node
 * to the left or right child at positions i-1 and i+1
 * according to the provided position
 *
 * @param parent the node whose is going to be moved to a child
 * @param i Index of the key in the parent
 * @param position left, or right
 */
InMemoryBTree.Tree.prototype._moveKey = function(parent,i,position) {

    if(position===right) {
        i--;
    }

    //var lchild = parent.children[i-1];
    var lchild = this._diskRead(parent.children[i]);
    var rchild = this._diskRead(parent.children[i+1]);


    if(position == left) {
        lchild.keys[lchild.numberActives] = parent.keys[i];
        lchild.children[lchild.numberActives+1] = rchild.children[0];
        rchild.children[0] = null;
        lchild.numberActives++;

        parent.keys[i] = rchild.keys[0];

        for(var _i=1; _i<rchild.numberActives; _i++) {
            rchild.keys[_i-1] = rchild.keys[_i];
            rchild.children[_i-1] = rchild.children[_i];
        }
        rchild.children[rchild.numberActives-1] = rchild.children[rchild.numberActives];
        rchild.numberActives--;
    } else {
        rchild.children[rchild.numberActives+1] = rchild.children[rchild.numberActives];
        for(var _i=rchild.numberActives; _i>0; _i--) {
            rchild.children[_i] = rchild.children[_i-1];
            rchild.keys[_i] = rchild.keys[_i-1];
        }
        rchild.keys[0] = null;
        rchild.children[0] = null;

        rchild.children[0] = lchild.children[lchild.numberActives];
        rchild.keys[0] = parent.keys[i];
        rchild.numberActives++;

        lchild.children[lchild.numberActives] = null;
        parent.keys[i] = lchild.keys[lchild.numberActives-1];
        lchild.keys[lchild.numberActives-1] = null;
        lchild.numberActives--;
    }

    this._diskWrite(lchild);
    this._diskWrite(rchild);
    this._diskWrite(parent);
}

/**
 * _mergeSiblings
 *
 * Merges two nodes at the left and right of the provided
 * index in the parent node.
 *
 * @param parent the node whose children will be merged
 * @param i Index of the key in the parent pointing to the nodes to merge
 */
InMemoryBTree.Tree.prototype._mergeSiblings = function(parent,index,pos) {
    var i,j;
    var n1, n2;

    if (index === (parent.numberActives)) {
        index--;
	n1 = this._diskRead(parent.children[parent.numberActives - 1]);
	n2 = this._diskRead(parent.children[parent.numberActives]);
    } else {
        n1 = this._diskRead(parent.children[index]);
	n2 = this._diskRead(parent.children[index + 1]);
    }

    //Merge the current node with the left node
    var newNode = this._allocateNode();
    newNode.isLeaf = n1.isLeaf;
    newNode.level = n1.level;

    for(j=0; j<this.order-1; j++) {
	newNode.keys[j] = n1.keys[j];
	newNode.children[j] = n1.children[j];
    }

    newNode.keys[this.order-1] = parent.keys[index];
    newNode.children[this.order-1] = n1.children[this.order-1];

    for(j=0; j<this.order-1; j++) {
	newNode.keys[j+this.order] = n2.keys[j];
	newNode.children[j+this.order] = n2.children[j];
    }
    newNode.children[2*this.order-1] = n2.children[this.order-1];

    parent.children[index] = newNode;

    for(j=index; j<parent.numberActives;j++) {
	parent.keys[j] = parent.keys[j+1];
	parent.children[j+1] = parent.children[j+2];
    }

    newNode.numberActives = n1.numberActives + n2.numberActives+1;
    parent.numberActives--;

    for(i=parent.numberActives; i<2*this.order-1; i++) {
	parent.keys[i] = null;
    }

    if (parent.numberActives === 0 && this.root === parent) {
	this.root = newNode;
	if(newNode.level) {
	    newNode.isLeaf = false;
	} else {
	    newNode.isLeaf = true;
        }
    }

    this._diskWrite(newNode);
    if(this.root === newNode) {
        this._updateRootNode(this.root);
    }
    this._diskWrite(parent);
    this._diskDelete(n1);
    this._diskDelete(n2);

    return newNode;
}

/**
 * _deleteKeyFromNode
 *
 * Deletes the key at position index from the provided node.
 *
 * @param node The node where the key will be deleted.
 * @param index The index of the key that will be deletd.
 * @return true if the key can be deleted, false otherwise
 */
InMemoryBTree.Tree.prototype._deleteKeyFromNode = function(node,index) {
    var keysMax = (2*this.order)-1;
    if(node.numberActives < keysMax) {
        keysMax = node.numberActives;
    };

    var i;

    if(node.isLeaf === false) {
	return false;
    }

    var key = node.keys[index];

    for(i=index; i<keysMax-1; i++) {
	node.keys[i] = node.keys[i+1];
    }

    // cleaning invalid reference
    node.keys.pop();

    node.numberActives--;

    this._diskWrite(node);

    return true;
}

InMemoryBTree.Tree.prototype._mergeNodes = function(n1, key, n2) {
    var newNode;
    var i;

    newNode = this._allocateNode();
    newNode.isLeaf = true;

    for(i=0; i<n1.numberActives; i++) {
	newNode.keys[i]   = n1.keys[i];
        newNode.children[i]   = n1.children[i];
    }
    newNode.children[n1.numberActives] = n1.children[n1.numberActives];
    newNode.keys[n1.numberActives] = key;

    for(i=0; i<n2.numberActives; i++) {
	newNode.keys[i+n1.numberActives+1] = n2.keys[i];
        newNode.children[i+n1.numberActives+1] = n2.children[i];
    }
    newNode.children[(2*this.order)-1] = n2.children[n2.numberActives];

    newNode.numberActives = n1.numberActives + n2.numberActives + 1;
    newNode.isLeaf = n1.isLeaf;
    newNode.level = n1.level;


    this._diskWrite(newNode);
    // @todo
    // delte old nodes from disk
    return newNode;
}

/**
 * audit
 *
 * Checks that the tree data structure is
 * valid.
 */
InMemoryBTree.Tree.prototype.audit = function(showOutput) {
    var errors = [];
    var alreadySeen = [];
    var that = this;

    var foundInArray = function(data) {
        for(var i=0; i<alreadySeen.length; i++) {
            if(that.comparator(alreadySeen[i],data)===0) {
                var error = " !!! duplicated key " + data;
                if(showOutput===true) {
                    console.log(error);
                }
                errors.push(error);
            }
        }
    };

    var length = null;
    var that = this;
    this.walkNodes(function(n) {
        if(showOutput === true) {
          console.log("--- Node at "+ n.level + " level");
          console.log(" - leaf? " + n.isLeaf);
          console.log(" - num actives? " + n.numberActives);
          console.log(" - keys: ");
        }
        for(var i = n.numberActives ; i<n.keys.length; i++) {
            if(n.keys[i] != null) {
                if(showOutput===true) {
                    console.log(" * warning : redundant key data");
                    errors.push(" * warning : redundant key data");
                }
            }
        }

        for(var i = n.numberActives+1 ; i<n.children.length; i++) {
            if(n.children[i] != null) {
                if(showOutput===true) {
                    console.log(" * warning : redundant children data");
                    errors.push(" * warning : redundant key data");
                }
            }
        }


        if(n.isLeaf === false) {
          for(var i=0; i<n.numberActives; i++) {
              var maxLeft = that._diskRead(n.children[i]).keys[that._diskRead(n.children[i]).numberActives -1 ].key
              var minRight = that._diskRead(n.children[i+1]).keys[0].key
              if(showOutput===true) {
                  console.log("   "+n.keys[i].key + "(" + maxLeft + "," + minRight+ ")");
              }
              if(that.comparator(n.keys[i].key,maxLeft)===-1) {
                  var error = " !!! value max left " + maxLeft + " > key " + n.keys[i].key;
                  if(showOutput===true) {
                      console.log(error);
                  }
                  errors.push(error);
              }
              if(that.comparator(n.keys[i].key,minRight)===1) {
                  var error = " !!! value min right " + minRight + " < key " + n.keys[i].key;
                  if(showOutput===true) {
                      console.log(error);
                  }
                  errors.push(error);
              }

              foundInArray(n.keys[i].key);
              alreadySeen.push(n.keys[i].key);
          }
        } else {
            if(length === null) {
                length = n.level;
            } else {
                if(length != n.level) {
                    var error = " !!! Leaf node with wrong level value";
                    if(showOutput===true) {
                        console.log(error);
                    }
                    errors.push(error);
                }
            }
            for(var i=0 ; i<n.numberActives; i++) {
                if(showOutput===true) {
                    console.log(" "+n.keys[i].key);
                }
                foundInArray(n.keys[i].key);
                alreadySeen.push(n.keys[i].key);

            }
        }

        if(n != that.root) {
            if(n.numberActives > ((2*that.order) -1)) {
                if(showOutput===true) {
                    var error = " !!!! MAX num keys restriction violated ";
                }
                console.log(error);
                errors.push(error);
            }
            if(n.numberActives < (that.order -1)) {
                if(showOutput===true) {
                    var error = " !!!! MIN num keys restriction violated ";
                }
                console.log(error);
                errors.push(error);
            }

        }
    });

    return errors;
}

/**
 *  _getMaxKeyPos
 *
 *  Used to get the position of the MAX key within the subtree
 *  @return An object containing the key and position of the key
 */
InMemoryBTree.Tree.prototype._getMaxKeyPos = function(node) {
    var node_pos = {};

    while(true) {
	if(node === null) {
	    break;
	}

	if(node.isLeaf === true) {
	    node_pos.node  = node;
	    node_pos.index = node.numberActives - 1;
	    return node_pos;
	} else {
	    node_pos.node  = node;
	    node_pos.index = node.numberActives - 1;
	    node = this._diskRead(node.children[node.numberActives]);
	}
    }

    return node_pos;
}

/**
 *  _getMinKeyPos
 *
 *  Used to get the position of the MAX key within the subtree
 *  @return An object containing the key and position of the key
 */
InMemoryBTree.Tree.prototype._getMinKeyPos = function(node) {
    var node_pos = {};

    while(true) {
	if(node === null) {
	    break;
	}

	if(node.isLeaf === true) {
	    node_pos.node  = node;
	    node_pos.index = 0;
	    return node_pos;
	} else {
	    node_pos.node  = node;
	    node_pos.index = 0;
	    node = this._diskRead(node.children[0]);
	}
    }

    return node_pos;
}


/**
 * Node
 *
 * Implements the interface of BinarySearchTree.Node
 *
 * A Tree node augmented with BTree
 * node structures
 */
InMemoryBTree.Node = function() {
    this.numberActives = 0;
    this.isLeaf = null;
    this.keys = [];
    this.children = [];
    this.level = 0;
};

// end of ./src/js-trees/src/in_memory_b_tree.js 
// exports
var QuadIndexCommon = {};

/**
 * NodeKey
 *
 * Implements the interface of BinarySearchTree.Node
 *
 * A Tree node augmented with BPlusTree
 * node structures
 */
QuadIndexCommon.NodeKey = function(components, order) {
    this.subject = components.subject;
    this.predicate = components.predicate;
    this.object = components.object;
    this.graph = components.graph;
    this.order = order;
};

QuadIndexCommon.NodeKey.prototype.comparator = function(keyPattern) {
    for(var i=0; i<this.order.length; i++) {
        var component = this.order[i];
        if(keyPattern[component] == null) {
            return 0;
        } else {
            if(this[component] < keyPattern[component] ) {
                return -1
            } else if(this[component] > keyPattern[component]) {
                return 1
            }
        }
    }

    return 0;
};

/**
 * Pattern
 *
 * A pattern with some variable components
 */
QuadIndexCommon.Pattern = function(components) {
    this.subject = components.subject;
    this.predicate = components.predicate;
    this.object = components.object;
    this.graph = components.graph;
    this.indexKey = [];

    this.keyComponents = {}

    var ks,ko,kp;
    var order = [];
    var indif = [];
    var components = ['subject', 'predicate', 'object', 'graph'];

    // components must have been already normalized and
    // inserted in the lexicon.
    // OIDs retrieved from the lexicon *are* numbers so
    // they can be told apart from variables (strings)
    for(var i=0; i<components.length; i++) {
        if(typeof(this[components[i]]) === 'string') {
            indif.push(components[i]);
            this.keyComponents[components[i]] = null;
        } else {
            order.push(components[i]);
            this.keyComponents[components[i]] = this[components[i]];
            this.indexKey.push(components[i]);
        }
    }

    this.order = order.concat(indif);
    this.key = new QuadIndexCommon.NodeKey(this.keyComponents, this.order);
}

// end of ./src/js-rdf-persistence/src/quad_index_common.js 
// exports
var QuadIndex = {};

// imports
var BaseTree = InMemoryBTree;

QuadIndex.Tree = function(params,callback) {
    if(arguments != 0) {
        this.componentOrder = params.componentOrder;


        // @todo change this if using the file backed implementation
        BaseTree.Tree.call(this, params.order, params['name'], params['persistent'], params['cacheMaxSize']);

        this.comparator = function(a,b) {
            for(var i=0; i< this.componentOrder.length; i++) {
                var component = this.componentOrder[i];
                var vala = a[component];
                var valb = b[component];
                if(vala < valb) {
                    return -1;
                } else if(vala > valb) {
                    return 1;
                }
            }
            return 0;
        }

        this.rangeComparator = function(a,b) {
            for(var i=0; i<this.componentOrder.length; i++) {
                var component = this.componentOrder[i];
                if(b[component] == null || a[component]==null) {
                    return 0;
                } else {
                    if(a[component] < b[component] ) {
                        return -1
                    } else if(a[component] > b[component]) {
                        return 1
                    }
                }
            }
            
            return 0;
        }

        if(callback!=null) {
            callback(this);
        }
    }
};

Utils['extends'](BaseTree.Tree, QuadIndex.Tree);

QuadIndex.Tree.prototype.insert = function(quad, callback) {
    BaseTree.Tree.prototype.insert.call(this, quad, null);
    if(callback)
        callback(true);

    return true
};

QuadIndex.Tree.prototype.search = function(quad, callback) {
    var result = BaseTree.Tree.prototype.search.call(this, quad, true); // true -> check exists : not present in all the b-tree implementations, check first.
    if(callback)
        callback(result)

    return result;
};

QuadIndex.Tree.prototype.range = function(pattern, callback) {
    var result = null;
    if(typeof(this.root)==='string') {
        result = this._rangeTraverse(this,this._diskRead(this.root), pattern);        
    } else {
        result = this._rangeTraverse(this,this.root, pattern);
    }

    if(callback)
        callback(result);

    return result;
}

QuadIndex.Tree.prototype._rangeTraverse = function(tree,node, pattern) {
    var patternKey  = pattern.key;
    var acum = [];
    var pendingNodes = [node];
    var node, idxMin, idxMax;
    while(pendingNodes.length > 0) {
        node = pendingNodes.shift();
        idxMin = 0;

        while(idxMin < node.numberActives && tree.rangeComparator(node.keys[idxMin].key,patternKey) === -1) {
            idxMin++;
        }
        if(node.isLeaf === true) {
            idxMax = idxMin;

            while(idxMax < node.numberActives && tree.rangeComparator(node.keys[idxMax].key,patternKey) === 0) {
                acum.push(node.keys[idxMax].key);
                idxMax++;
            }

        } else {
            var pointer = node.children[idxMin]
            var childNode = tree._diskRead(pointer);
            pendingNodes.push(childNode);

            var idxMax = idxMin;
            while(true) {
                if(idxMax < node.numberActives && tree.rangeComparator(node.keys[idxMax].key,patternKey) === 0) {
                    acum.push(node.keys[idxMax].key);
                    idxMax++;
                    childNode = tree._diskRead(node.children[idxMax]);
                    pendingNodes.push(childNode);
                } else {
                    break;
                }
            }
        }
    }
    return acum;
};

// end of ./src/js-rdf-persistence/src/quad_index.js 
// exports
var QuadBackend = {};


// imports


/*
 * "perfect" indices for RDF indexing
 *
 * SPOG (?, ?, ?, ?), (s, ?, ?, ?), (s, p, ?, ?), (s, p, o, ?), (s, p, o, g)
 * GP   (?, ?, ?, g), (?, p, ?, g)
 * OGS  (?, ?, o, ?), (?, ?, o, g), (s, ?, o, g)
 * POG  (?, p, ?, ?), (?, p, o, ?), (?, p, o, g)
 * GSP  (s, ?, ?, g), (s, p, ?, g)
 * OS   (s, ?, o, ?)
 */
QuadBackend.QuadBackend = function(configuration, callback) {
    if(arguments!=0) {
        this.indexMap = {};
        this.treeOrder = configuration['treeOrder']
        this.indices = ['SPOG', 'GP', 'OGS', 'POG', 'GSP', 'OS'];
        this.componentOrders = {
            SPOG: ['subject', 'predicate', 'object', 'graph'],
            GP: ['graph', 'predicate', 'subject', 'object'],
            OGS: ['object', 'graph', 'subject', 'predicate'],
            POG: ['predicate', 'object', 'graph', 'subject'],
            GSP: ['graph', 'subject', 'predicate', 'object'],
            OS: ['object', 'subject', 'predicate', 'graph']
        }

        for(var i=0; i<this.indices.length; i++) {
            var indexKey = this.indices[i];
            var tree = new QuadIndex.Tree({order: this.treeOrder,
                                           componentOrder: this.componentOrders[indexKey],
                                           persistent: configuration['persistent'],
                                           name: (configuration['name']||"")+indexKey,
                                           cacheMaxSize: configuration['cacheMaxSize']});
            this.indexMap[indexKey] = tree;
        }
        
        if(callback)
            callback(this);        
    }
}

QuadBackend.QuadBackend.prototype.clear = function() {
        for(var i=0; i<this.indices.length; i++) {
            var indexKey = this.indices[i];
            this.indexMap[indexKey].clear();
        }
};

QuadBackend.QuadBackend.prototype._indexForPattern = function(pattern) {
    var indexKey = pattern.indexKey;
    var matchingIndices = this.indices;

    for(var i=0; i<matchingIndices.length; i++) {
        var index = matchingIndices[i];
        var indexComponents = this.componentOrders[index]
        for(var j=0; j<indexComponents.length; j++) {
            if(Utils.include(indexKey, indexComponents[j])===false) {
                break;
            }
            if(j==indexKey.length-1) {
                return index;
            }
        }
    }
    
    return 'SPOG' // If no other match, we erturn the more generic index
}


QuadBackend.QuadBackend.prototype.index = function(quad, callback) {
    for(var i=0; i<this.indices.length; i++) {
        var indexKey = this.indices[i];
        var index= this.indexMap[indexKey];

        index.insert(quad);
    }

    if(callback)
        callback(true);

    return true;
}

QuadBackend.QuadBackend.prototype.range = function(pattern, callback)  {
    var indexKey = this._indexForPattern(pattern);
    var index = this.indexMap[indexKey];
    var quads = index.range(pattern);
    if(callback) 
        callback(quads);

    return quads;
}

QuadBackend.QuadBackend.prototype.search = function(quad, callback)  {
    var indexKey = this.indices[0];
    var index= this.indexMap[indexKey];
    var result = index.search(quad);

    if(callback)
        callback(result!=null);

    return (result!=null)
}


QuadBackend.QuadBackend.prototype['delete'] = function(quad, callback) {
    var indexKey, index;
    for(var i=0; i<this.indices.length; i++) {
        indexKey = this.indices[i];
        index= this.indexMap[indexKey];

        index['delete'](quad);
    }

    if(callback)
        callback(true);

    return true;
}

// end of ./src/js-rdf-persistence/src/quad_backend.js 
// exports
var Lexicon = {};

// imports

/**
 * Temporal implementation of the lexicon
 */


Lexicon.Lexicon = function(callback, _name){
    this.uriToOID = {};
    this.OIDToUri = {};

    this.literalToOID = {};
    this.OIDToLiteral = {};

    this.blankToOID = {};
    this.OIDToBlank = {};

    this.defaultGraphOid = 0;

    this.defaultGraphUri = "https://github.com/antoniogarrote/rdfstore-js#default_graph";
    this.defaultGraphUriTerm = {"token": "uri", "prefix": null, "suffix": null, "value": this.defaultGraphUri, "oid": this.defaultGraphOid};
    this.oidCounter = 1;

    this.knownGraphs = {};
    
    if(callback != null) {
        callback(this);
    }
};

Lexicon.Lexicon.prototype.registerGraph = function(oid){
    if(oid != this.defaultGraphOid) {
        this.knownGraphs[oid] = true;
    }
    return true
};

Lexicon.Lexicon.prototype.registeredGraphs = function(shouldReturnUris) {
    var acum = [];

    for(var g in this.knownGraphs) {
        if(shouldReturnUris === true) {
            acum.push(this.OIDToUri['u'+g]);
        } else {
            acum.push(g);
        }
    }
    return acum;
};

Lexicon.Lexicon.prototype.registerUri = function(uri) {
    if(uri === this.defaultGraphUri) {
        return(this.defaultGraphOid);
    } else if(this.uriToOID[uri] == null){
        var oid = this.oidCounter
        var oidStr = 'u'+oid;
        this.oidCounter++;

        this.uriToOID[uri] =[oid, 0];
        this.OIDToUri[oidStr] = uri;

        return(oid);
    } else {
        var oidCounter = this.uriToOID[uri];
        var oid = oidCounter[0];
        var counter = oidCounter[1] + 1;
        this.uriToOID[uri] = [oid, counter];
        return(oid);
    }
};

Lexicon.Lexicon.prototype.resolveUri = function(uri) {
    if(uri === this.defaultGraphUri) {
        return(this.defaultGraphOid);
    } else {
        var oidCounter = this.uriToOID[uri];
        if(oidCounter != null) {
            return(oidCounter[0]);
        } else {
            return(-1);
        }
    }
};

Lexicon.Lexicon.prototype.resolveUriCost = function(uri) {
    if(uri === this.defaultGraphUri) {
        return(this.defaultGraphOid);
    } else {
        var oidCounter = this.uriToOID[uri];
        if(oidCounter != null) {
            return(oidCounter[1]);
        } else {
            return(-1);
        }
    }
};

Lexicon.Lexicon.prototype.registerBlank = function(label) {
    var oid = this.oidCounter;
    this.oidCounter++;
    var oidStr = ""+oid;
    this.OIDToBlank[oidStr] = true;
    return(oidStr);
};

Lexicon.Lexicon.prototype.resolveBlank = function(label) {
//    @todo
//    this is failing with unicode tests... e.g. kanji2

//    var id = label.split(":")[1];
//    callback(id);

    var oid = this.oidCounter;
    this.oidCounter++;
    return(""+oid);
};

Lexicon.Lexicon.prototype.resolveBlankCost = function(label) {
    return 0;
};

Lexicon.Lexicon.prototype.registerLiteral = function(literal) {
    if(this.literalToOID[literal] == null){
        var oid = this.oidCounter;
        var oidStr =  'l'+ oid;
        this.oidCounter++;

        this.literalToOID[literal] = [oid, 0];
        this.OIDToLiteral[oidStr] = literal;

        return(oid);
    } else {
        var oidCounter = this.literalToOID[literal];
        var oid = oidCounter[0];
        var counter = oidCounter[1] + 1;
        this.literalToOID[literal] = [oid, counter];
        return(oid);
    }
};

Lexicon.Lexicon.prototype.resolveLiteral = function(literal) {
    var oidCounter = this.literalToOID[literal];
    if(oidCounter != null ) {
        return(oidCounter[0]); 
    } else {
        return(-1); 
    }
}

Lexicon.Lexicon.prototype.resolveLiteralCost = function(literal) {
    var oidCounter = this.literalToOID[literal];
    if(oidCounter != null ) {
        return(oidCounter[1]); 
    } else {
        return(0); 
    }
}


Lexicon.Lexicon.prototype.parseLiteral = function(literalString) {
    var parts = literalString.lastIndexOf("@");
    if(parts!=-1 && literalString[parts-1]==='"' && literalString.substring(parts, literalString.length).match(/^@[a-zA-Z\-]+$/g)!=null) {
        var value = literalString.substring(1,parts-1);
        var lang = literalString.substring(parts+1, literalString.length);
        return {token: "literal", value:value, lang:lang};
    }

    var parts = literalString.lastIndexOf("^^");
    if(parts!=-1 && literalString[parts-1]==='"' && literalString[parts+2] === '<' && literalString[literalString.length-1] === '>') {
        var value = literalString.substring(1,parts-1);
        var type = literalString.substring(parts+3, literalString.length-1);

        return {token: "literal", value:value, type:type};
    }

    var value = literalString.substring(1,literalString.length-1);
    return {token:"literal", value:value};
};

Lexicon.Lexicon.prototype.parseUri = function(uriString) {
    return {token: "uri", value:uriString};
};

Lexicon.Lexicon.prototype.retrieve = function(oid) {
    try {
        if(oid === this.defaultGraphOid) {
            return({ token: "uri", 
                       value:this.defaultGraphUri,
                       prefix: null,
                       suffix: null,
                       defaultGraph: true });
        } else {
          var maybeUri = this.OIDToUri['u'+oid];
          if(maybeUri != null) {
              return(this.parseUri(maybeUri));
          } else {
              var maybeLiteral = this.OIDToLiteral['l'+oid];
              if(maybeLiteral != null) {
                  return(this.parseLiteral(maybeLiteral));
              } else {
                  var maybeBlank = this.OIDToBlank[""+oid];
                  if(maybeBlank != null) {
                      return({token:"blank", value:"_:"+oid});
                  } else {
                      throw("Null value for OID");
                  }
              }
          }
        }
    } catch(e) {
        console.log("error in lexicon retrieving OID:");
        console.log(oid);
        if(e.message || e.stack) {
            if(e.message) {
                console.log(e.message); 
            }
            if(e.stack) {
                console.log(e.stack);
            }
        } else {
            console.log(e);
        }
        throw new Error("Unknown retrieving OID in lexicon:"+oid);

    }
};

Lexicon.Lexicon.prototype.clear = function() {
    this.uriToOID = {};
    this.OIDToUri = {};

    this.literalToOID = {};
    this.OIDToLiteral = {};

    this.blankToOID = {};
    this.OIDToBlank = {};
};

Lexicon.Lexicon.prototype.unregister = function(quad, key) {
    try {
        this.unregisterTerm(quad.subject.token, key.subject);
        this.unregisterTerm(quad.predicate.token, key.predicate);
        this.unregisterTerm(quad.object.token, key.object);
        if(quad.graph!=null) {
            this.unregisterTerm(quad.graph.token, key.graph); 
        }
        return(true);
    } catch(e) {
        console.log("Error unregistering quad");
        console.log(e.message);
        return(false);
    }
}

Lexicon.Lexicon.prototype.unregisterTerm = function(kind, oid) {
    if(kind === 'uri') {
        if(oid != this.defaultGraphOid) {
            var oidStr = 'u'+oid;
            var uri = this.OIDToUri[oidStr];     // = uri;
            var oidCounter = this.uriToOID[uri]; // =[oid, 0];
            
            var counter = oidCounter[1];
            if(""+oidCounter[0] === ""+oid) {
                if(counter === 0) {
                    delete this.OIDToUri[oidStr];
                    delete this.uriToOID[uri];
                    // delete the graph oid from known graphs
                    // in case this URI is a graph identifier
                    delete this.knownGraphs[oid];
                } else {
                    this.uriToOID[uri] = [oid, counter-1];
                }
            } else {
                throw("Not matching OID : "+oid+" vs "+ oidCounter[0]);
            }
        }
    } else if(kind === 'literal') {
        this.oidCounter++;
        var oidStr     =  'l'+ oid;
        var literal    = this.OIDToLiteral[oidStr];  // = literal;
        var oidCounter = this.literalToOID[literal]; // = [oid, 0];
        
        var counter = oidCounter[1];
        if(""+oidCounter[0] === ""+oid) {
            if(counter === 0) {
                delete this.OIDToLiteral[oidStr];
                delete this.literalToOID[literal];
            } else {
                this.literalToOID[literal] = [oid, counter-1];
            }
        } else {
            throw("Not matching OID : "+oid+" vs "+ oidCounter[0]);
        }

    } else if(kind === 'blank') {
        delete this.OIDToBlank[""+oid];
    }
}

// end of ./src/js-rdf-persistence/src/lexicon.js 
// exports
var NetworkTransport = {};

NetworkTransport.load = function(uri, accept, callback, redirect) {
    var transport = jQuery;

    transport.ajax({
        url: uri,
        headers: {"Accept": accept},

        success: function(data, status, xhr){
            if((""+xhr.status)[0] == '2') {
                var headers = xhr.getAllResponseHeaders().split("\n");
                var acum = {};
                for(var i=0; i<headers.length; i++) {
                    var header = headers[i].split(":");
                    acum[header[0]] = header[1];
                }

                callback(true, {headers: acum, 
                                data: data});
            }
        },

        error: function(xhr, textStatus, ex){
            if((""+xhr.status)[0] == '3'){                            
                if(redirection == 0) {
                    callback(false, 500);
                } else {
                    var location = (xhr.getAllResponseHeaders()["Location"] || xhr.getAllResponseHeaders()["location"])
                    if(location != null) {
                        NetworkTransport.load(location, accept, callback, (redirection -1));
                    } else {
                        callback(false, 500);
                    }
                } 
            } else {
                callback(false, xhr.statusCode());
            }
        }
    });
}

// end of ./src/js-communication/src/ajax_transport.js 

/**
 * Javascript implementation of JSON-LD.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2011 Digital Bazaar, Inc. All rights reserved.
 */

var jsonldParser = null;

(function()
{

// used by Exception
var _setMembers = function(self, obj)
{
   self.stack = '';
   for(var key in obj)
   {
      self[key] = obj[key];
   }
};

// define jsonld
if(typeof(window) !== 'undefined')
{
   var jsonld = window.jsonld = window.jsonld || {};
   Exception = function(obj)
   {
      _setMembers(this, obj);
   };

   // define js 1.8.5 Object.keys method unless present
   if(!Object.keys)
   {
      Object.keys = function(o)
      {  
         if(o !== Object(o))
         {
            throw new TypeError('Object.keys called on non-object');
         }
         var rval = [];
         for(var p in o)
         {
            if(Object.prototype.hasOwnProperty.call(o, p))
            {
               rval.push(p);
            }
         }
         return rval;
      };
   }

   if (!Array.prototype.filter)
   {
     Array.prototype.filter = function(fun /*, thisp */)
     {
       "use strict";
    
       if (this == null)
         throw new TypeError();
    
       var t = Object(this);
       var len = t.length >>> 0;
       if (typeof fun != "function")
         throw new TypeError();
    
       var res = [];
       var thisp = arguments[1];
       for (var i = 0; i < len; i++)
       {
         if (i in t)
         {
           var val = t[i]; // in case fun mutates this
           if (fun.call(thisp, val, i, t))
             res.push(val);
         }
       }
    
       return res;
     };
   }

}
// define node.js module
else if(typeof(module) !== 'undefined' && module.exports)
{
   var jsonld = {};
   //module.exports = jsonld;
   Exception = function(obj)
   {
      _setMembers(this, obj);
      this.stack = new Error().stack;
   };
}


jsonldParser = jsonld;

var defaultContext = { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                       "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                       "owl": "http://www.w3.org/2002/07/owl#",
                       "xsd": "http://www.w3.org/2001/XMLSchema#",
                       "dcterms": "http://purl.org/dc/terms/",
                       "foaf": "http://xmlns.com/foaf/0.1/",
                       "cal": "http://www.w3.org/2002/12/cal/ical#",
                       "vcard": "http://www.w3.org/2006/vcard/ns# ",
                       "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#",
                       "cc": "http://creativecommons.org/ns#",
                       "sioc": "http://rdfs.org/sioc/ns#",
                       "doap": "http://usefulinc.com/ns/doap#",
                       "com": "http://purl.org/commerce#",
                       "ps": "http://purl.org/payswarm#",
                       "gr": "http://purl.org/goodrelations/v1#",
                       "sig": "http://purl.org/signature#",
                       "ccard": "http://purl.org/commerce/creditcard#"
                     };

/*
 * Globals and helper functions.
 */
var ns =
{
   xsd: 'http://www.w3.org/2001/XMLSchema#'
};

var xsd =
{
   'boolean': ns.xsd + 'boolean',
   'double': ns.xsd + 'double',
   'integer': ns.xsd + 'integer'
};

/**
 * Sets a subject's property to the given object value. If a value already
 * exists, it will be appended to an array.
 *
 * @param s the subject.
 * @param p the property.
 * @param o the object.
 */
var _setProperty = function(s, p, o)
{
   if(p in s)
   {
      if(s[p].constructor === Array)
      {
         s[p].push(o);
      }
      else
      {
         s[p] = [s[p], o];
      }
   }
   else
   {
      s[p] = o;
   }
};

/**
 * Clones an object, array, or string/number. If cloning an object, the keys
 * will be sorted.
 * 
 * @param value the value to clone.
 * 
 * @return the cloned value.
 */
var _clone = function(value)
{
   var rval;
   
   if(value.constructor === Object)
   {
      rval = {};
      var keys = Object.keys(value).sort();
      for(var i in keys)
      {
         var key = keys[i];
         rval[key] = _clone(value[key]);
      }
   }
   else if(value.constructor === Array)
   {
      rval = [];
      for(var i in value)
      {
         rval[i] = _clone(value[i]);
      }
   }
   else
   {
      rval = value;
   }
   
   return rval;
};

/**
 * Gets the keywords from a context.
 * 
 * @param ctx the context.
 * 
 * @return the keywords.
 */
var _getKeywords = function(ctx)
{
   // TODO: reduce calls to this function by caching keywords in processor
   // state
   
   var rval =
   {
      '@id': '@id',
      '@language': '@language',
      '@literal': '@literal',
      '@type': '@type'
   };
   
   if(ctx)
   {
      // gather keyword aliases from context
      var keywords = {};
      for(var key in ctx)
      {
         if(ctx[key].constructor === String && ctx[key] in rval)
         {
            keywords[ctx[key]] = key;
         }
      }
      
      // overwrite keywords
      for(var key in keywords)
      {
         rval[key] = keywords[key];
      }
   }
   
   return rval;
};

/**
 * Gets the iri associated with a term.
 * 
 * @param ctx the context.
 * @param term the term.
 * 
 * @return the iri or NULL.
 */
var _getTermIri = function(ctx, term)
{
   var rval = null;
   if(term in ctx)
   {
      if(ctx[term].constructor === String)
      {
         rval = ctx[term];
      }
      else if(ctx[term].constructor === Object && '@id' in ctx[term])
      {
         rval = ctx[term]['@id'];
      }
   }
   return rval;
};

/**
 * Compacts an IRI into a term or prefix if it can be. IRIs will not be
 * compacted to relative IRIs if they match the given context's default
 * vocabulary.
 *
 * @param ctx the context to use.
 * @param iri the IRI to compact.
 * @param usedCtx a context to update if a value was used from "ctx".
 *
 * @return the compacted IRI as a term or prefix or the original IRI.
 */
var _compactIri = function(ctx, iri, usedCtx)
{
   var rval = null;
   
   // check the context for a term that could shorten the IRI
   // (give preference to terms over prefixes)
   for(var key in ctx)
   {
      // skip special context keys (start with '@')
      if(key.length > 0 && key[0] !== '@')
      {
         // compact to a term
         if(iri === _getTermIri(ctx, key))
         {
            rval = key;
            if(usedCtx !== null)
            {
               usedCtx[key] = _clone(ctx[key]);
            }
            break;
         }
      }
   }
   
   // term not found, if term is @type, use keyword
   if(rval === null && iri === '@type')
   {
      rval = _getKeywords(ctx)['@type'];
   }
   
   // term not found, check the context for a prefix
   if(rval === null)
   {
      for(var key in ctx)
      {
         // skip special context keys (start with '@')
         if(key.length > 0 && key[0] !== '@')
         {
            // see if IRI begins with the next IRI from the context
            var ctxIri = _getTermIri(ctx, key);
            if(ctxIri !== null)
            {
               var idx = iri.indexOf(ctxIri);
               
               // compact to a prefix
               if(idx === 0 && iri.length > ctxIri.length)
               {
                  rval = key + ':' + iri.substr(ctxIri.length);
                  if(usedCtx !== null)
                  {
                     usedCtx[key] = _clone(ctx[key]);
                  }
                  break;
               }
            }
         }
      }
   }

   // could not compact IRI
   if(rval === null)
   {
      rval = iri;
   }

   return rval;
};

/**
 * Expands a term into an absolute IRI. The term may be a regular term, a
 * prefix, a relative IRI, or an absolute IRI. In any case, the associated
 * absolute IRI will be returned.
 *
 * @param ctx the context to use.
 * @param term the term to expand.
 * @param usedCtx a context to update if a value was used from "ctx".
 *
 * @return the expanded term as an absolute IRI.
 */
var _expandTerm = function(ctx, term, usedCtx)
{
   var rval = term;
   
   // get JSON-LD keywords
   var keywords = _getKeywords(ctx);
   
   // 1. If the property has a colon, it is a prefix or an absolute IRI:
   var idx = term.indexOf(':');
   if(idx !== -1)
   {
      // get the potential prefix
      var prefix = term.substr(0, idx);

      // expand term if prefix is in context, otherwise leave it be
      if(prefix in ctx)
      {
         // prefix found, expand property to absolute IRI
         var iri = _getTermIri(ctx, prefix);
         rval = iri + term.substr(idx + 1);
         if(usedCtx !== null)
         {
            usedCtx[prefix] = _clone(ctx[prefix]);
         }
      }
   }
   // 2. If the property is in the context, then it's a term.
   else if(term in ctx)
   {
      rval = _getTermIri(ctx, term);
      if(usedCtx !== null)
      {
         usedCtx[term] = _clone(ctx[term]);
      }
   }
   // 3. The property is a keyword.
   else
   {
      for(var key in keywords)
      {
         if(term === keywords[key])
         {
            rval = key;
            break;
         }
      }
   }
   
   return rval;
};

/**
 * Sorts the keys in a context.
 * 
 * @param ctx the context to sort.
 * 
 * @return the sorted context.
 */
var _sortContextKeys = function(ctx)
{
   // sort keys
   var rval = {};
   var keys = Object.keys(ctx).sort();
   for(var k in keys)
   {
      var key = keys[k];
      rval[key] = ctx[key];
   }
   return rval;
};

/**
 * Gets whether or not a value is a reference to a subject (or a subject with
 * no properties).
 * 
 * @param value the value to check.
 * 
 * @return true if the value is a reference to a subject, false if not.
 */
var _isReference = function(value)
{
   // Note: A value is a reference to a subject if all of these hold true:
   // 1. It is an Object.
   // 2. It is has an @id key.
   // 3. It has only 1 key.
   return (value !== null &&
      value.constructor === Object &&
      '@id' in value &&
      Object.keys(value).length === 1);
};

/**
 * Gets whether or not a value is a subject with properties.
 * 
 * @param value the value to check.
 * 
 * @return true if the value is a subject with properties, false if not.
 */
var _isSubject = function(value)
{
   var rval = false;
   
   // Note: A value is a subject if all of these hold true:
   // 1. It is an Object.
   // 2. It is not a literal.
   // 3. It has more than 1 key OR any existing key is not '@id'.
   if(value !== null && value.constructor === Object && !('@literal' in value))
   {
      var keyCount = Object.keys(value).length;
      rval = (keyCount > 1 || !('@id' in value));
   }
   
   return rval;
};

/*
 * JSON-LD API.
 */

/**
 * Normalizes a JSON-LD object.
 *
 * @param input the JSON-LD object to normalize.
 * 
 * @return the normalized JSON-LD object.
 */
jsonld.normalize = function(input)
{
   return new Processor().normalize(input);
};

/**
 * Removes the context from a JSON-LD object, expanding it to full-form.
 *
 * @param input the JSON-LD object to remove the context from.
 * 
 * @return the context-neutral JSON-LD object.
 */
jsonld.expand = function(input)
{
   return new Processor().expand({}, null, input);
};

/**
 * Expands the given JSON-LD object and then compacts it using the
 * given context.
 *
 * @param ctx the new context to use.
 * @param input the input JSON-LD object.
 * 
 * @return the output JSON-LD object.
 */
jsonld.compact = function(ctx, input)
{
   var rval = null;
   
   // TODO: should context simplification be optional? (ie: remove context
   // entries that are not used in the output)

   if(input !== null)
   {
      // fully expand input
      input = jsonld.expand(input);
      
      var tmp;
      if(input.constructor === Array)
      {
         rval = [];
         tmp = input;
      }
      else
      {
         tmp = [input];
      }
      
      // merge context if it is an array
      if(ctx.constructor === Array)
      {
         ctx = jsonld.mergeContexts({}, ctx);
      }
      
      for(var i in tmp)
      {
         // setup output context
         var ctxOut = {};
         
         // compact
         var out = new Processor().compact(_clone(ctx), null, tmp[i], ctxOut);
         
         // add context if used
         if(Object.keys(ctxOut).length > 0)
         {
            // sort context keys
            ctxOut = _sortContextKeys(ctxOut);
            
            // sort keys
            var keys = Object.keys(out);
            keys.sort();
            
            // put @context first
            keys.unshift('@context');
            out['@context'] = ctxOut;
            
            // order keys in output
            var ordered = {};
            for(var k in keys)
            {
               var key = keys[k];
               ordered[key] = out[key];
            }
            out = ordered;
         }
         
         if(rval === null)
         {
            rval = out;
         }
         else
         {
            rval.push(out);
         }
      }
   }

   return rval;
};

/**
 * Merges one context with another.
 *
 * @param ctx1 the context to overwrite/append to.
 * @param ctx2 the new context to merge onto ctx1.
 *
 * @return the merged context.
 */
jsonld.mergeContexts = function(ctx1, ctx2)
{
   // merge first context if it is an array
   if(ctx1.constructor === Array)
   {
      ctx1 = jsonld.mergeContexts({}, ctx1);
   }
   
   // copy context to merged output
   var merged = _clone(ctx1);
   
   if(ctx2.constructor === Array)
   {
      // merge array of contexts in order
      for(var i in ctx2)
      {
         merged = jsonld.mergeContexts(merged, ctx2[i]);
      }
   }
   else
   {
      // if the new context contains any IRIs that are in the merged context,
      // remove them from the merged context, they will be overwritten
      for(var key in ctx2)
      {
         // ignore special keys starting with '@'
         if(key.indexOf('@') !== 0)
         {
            for(var mkey in merged)
            {
               if(merged[mkey] === ctx2[key])
               {
                  // FIXME: update related coerce rules
                  delete merged[mkey];
                  break;
               }
            }
         }
      }
   
      // merge contexts
      for(var key in ctx2)
      {
         merged[key] = _clone(ctx2[key]);
      }
   }

   return merged;
};

/**
 * Expands a term into an absolute IRI. The term may be a regular term, a
 * prefix, a relative IRI, or an absolute IRI. In any case, the associated
 * absolute IRI will be returned.
 *
 * @param ctx the context to use.
 * @param term the term to expand.
 *
 * @return the expanded term as an absolute IRI.
 */
jsonld.expandTerm = _expandTerm;

/**
 * Compacts an IRI into a term or prefix if it can be. IRIs will not be
 * compacted to relative IRIs if they match the given context's default
 * vocabulary.
 *
 * @param ctx the context to use.
 * @param iri the IRI to compact.
 *
 * @return the compacted IRI as a term or prefix or the original IRI.
 */
jsonld.compactIri = function(ctx, iri)
{
   return _compactIri(ctx, iri, null);
};

/**
 * Frames JSON-LD input.
 * 
 * @param input the JSON-LD input.
 * @param frame the frame to use.
 * @param options framing options to use.
 * 
 * @return the framed output.
 */
jsonld.frame = function(input, frame, options)
{
   return new Processor().frame(input, frame, options);
};

/**
 * Generates triples given a JSON-LD input. Each triple that is generated
 * results in a call to the given callback. The callback takes 3 parameters:
 * subject, property, and object. If the callback returns false then this
 * method will stop generating triples and return. If the callback is null,
 * then an array with triple objects containing "s", "p", "o" properties will
 * be returned.
 * 
 * The object or "o" property will be a JSON-LD formatted object.
 * 
 * @param input the JSON-LD input.
 * @param callback the triple callback.
 * 
 * @return an array of triple objects if callback is null, null otherwise.
 */
jsonld.toTriples = function(input, graph, callback)
{
   var rval = null;
   
   // normalize input
   var normalized = jsonld.normalize(input);
   
   // setup default callback
   callback = callback || null;
   if(callback === null)
   {
      rval = [];
      callback = function(s, p, o)
      {
         rval.push({'subject': Utils.lexicalFormTerm(s), 
                    'predicate': Utils.lexicalFormTerm(p), 
                    'object': Utils.lexicalFormTerm(o), 
                    'graph': graph});
      };
   }
   
   // generate triples
   var quit = false;
   for(var i1 in normalized)
   {
      var e = normalized[i1];
      var s = e['@id'];
       if(s[0] == "_") {
           s = {'token':'blank', 'value':s.split(":")[1]};
       } else {
           s = {'token':'uri', 'value':s};
       }

      for(var p in e)
      {
         if(p !== '@id')
         {
	     var obj = e[p];
             if(obj.constructor !== Array)
             {
		 obj = [obj];
             }
            for(var i2 in obj)
            {
                var obji2 = obj[i2];
		if(p === '@type') {
		    p = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
                    obji2 = {'token':'uri', 'value':obji2};		    
                } else if(typeof(obji2) === 'string') {
                    obji2 = {'token': 'literal', 'value':obji2};
                } else if(obji2['@id'] != null) {
                    if(obji2['@id'][0] == "_") {
                        obji2 = {'token':'blank', 'value':obji2['@id'].split(":")[1]};
                    } else {
                        obji2 = {'token':'uri', 'value':obji2['@id']};
                    }
                } else if(obji2['@type'] != null) {
                    obji2 = {'token':'literal', 'value':obji2['@literal'], 'type':obji2['@type']};
                } else if(obji2['@language'] != null) {
                    obji2 = {'token':'literal', 'value':obji2['@literal'], 'lang':obji2['@language']};
                }

		quit = (callback(s, {'token':'uri', 'value':p}, obji2) === false);
		if(quit)
		{
                    break;
		}
            }
            if(quit)
            {
               break;
            }
         }
      }
      if(quit)
      {
         break;
      }
   }
   
   return rval;
};

/**
 * Resolves external @context URLs. Every @context URL in the given JSON-LD
 * object is resolved using the given URL-resolver function. Once all of
 * the @contexts have been resolved, the given result callback is invoked.
 * 
 * @param input the JSON-LD input object (or array).
 * @param resolver the resolver method that takes a URL and a callback that
 *           receives a JSON-LD serialized @context or null on error (with
 *           optional an error object as the second parameter).
 * @param callback the callback to be invoked with the fully-resolved
 *           JSON-LD output (object or array) or null on error (with an
 *           optional error array as the second parameter).
 */
jsonld.resolve = function(input, resolver, callback)
{
   // find all @context URLs
   var urls = {};
   var findUrls = function(input, replace)
   {
      if(input.constructor === Array)
      {
         for(var i in input)
         {
            findUrls(input[i]);
         }
      }
      else if(input.constructor === Object)
      {
         for(var key in input)
         {
            if(key === '@context')
            {
               // @context is an array that might contain URLs
               if(input[key].constructor === Array)
               {
                  var list = input[key];
                  for(var i in list)
                  {
                     if(list[i].constructor === String)
                     {
                        // replace w/resolved @context if appropriate
                        if(replace)
                        {
                           list[i] = urls[list[i]];
                        }
                        // unresolved @context found
                        else
                        {
                           urls[list[i]] = {};
                        }
                     }
                  }
               }
               else if(input[key].constructor === String)
               {
                  // replace w/resolved @context if appropriate
                  if(replace)
                  {
                     input[key] = urls[input[key]];
                  }
                  // unresolved @context found
                  else
                  {
                     urls[input[key]] = {};
                  }
               }
            }
         }
      }
   };
   findUrls(input, false);
   
   // state for resolving URLs
   var count = Object.keys(urls).length;
   var errors = null;
   
   if(count === 0)
   {
      callback(input, errors);
   }
   else
   {
      // resolve all URLs
      for(var url in urls)
      {
         resolver(url, function(result, error)
         {
            --count;
            
            if(result === null)
            {
               errors = errors || [];
               errors.push({ url: url, error: error });
            }
            else
            {
               try
               {
                  if(result.constructor === String)
                  {
                     urls[url] = JSON.parse(result)['@context'];
                  }
                  else
                  {
                     urls[url] = result['@context'];
                  }
               }
               catch(ex)
               {
                  errors = errors || [];
                  errors.push({ url: url, error: ex });
               }
            }
            
            if(count === 0)
            {
               if(errors === null)
               {
                  findUrls(input, true);
               }
               callback(input, errors);
            }
         });
      }
   }
};

// TODO: organizational rewrite

/**
 * Constructs a new JSON-LD processor.
 */
var Processor = function()
{
};

/**
 * Recursively compacts a value. This method will compact IRIs to prefixes or
 * terms and do reverse type coercion to compact a value.
 *
 * @param ctx the context to use.
 * @param property the property that points to the value, NULL for none.
 * @param value the value to compact.
 * @param usedCtx a context to update if a value was used from "ctx".
 *
 * @return the compacted value.
 */
Processor.prototype.compact = function(ctx, property, value, usedCtx)
{
   var rval;
   
   // get JSON-LD keywords
   var keywords = _getKeywords(ctx);
   
   if(value === null)
   {
      // return null, but check coerce type to add to usedCtx
      rval = null;
      this.getCoerceType(ctx, property, usedCtx);
   }
   else if(value.constructor === Array)
   {
      // recursively add compacted values to array
      rval = [];
      for(var i in value)
      {
         rval.push(this.compact(ctx, property, value[i], usedCtx));
      }
   }
   // graph literal/disjoint graph
   else if(
      value.constructor === Object &&
      '@id' in value && value['@id'].constructor === Array)
   {
      rval = {};
      rval[keywords['@id']] = this.compact(
         ctx, property, value['@id'], usedCtx);
   }
   // recurse if value is a subject
   else if(_isSubject(value))
   {
      // recursively handle sub-properties that aren't a sub-context
      rval = {};
      for(var key in value)
      {
         if(value[key] !== '@context')
         {
            // set object to compacted property, only overwrite existing
            // properties if the property actually compacted
            var p = _compactIri(ctx, key, usedCtx);
            if(p !== key || !(p in rval))
            {
               // FIXME: clean old values from the usedCtx here ... or just
               // change usedCtx to be built at the end of processing?
               rval[p] = this.compact(ctx, key, value[key], usedCtx);
            }
         }
      }
   }
   else
   {
      // get coerce type
      var coerce = this.getCoerceType(ctx, property, usedCtx);
      
      // get type from value, to ensure coercion is valid
      var type = null;
      if(value.constructor === Object)
      {
         // type coercion can only occur if language is not specified
         if(!('@language' in value))
         {
            // type must match coerce type if specified
            if('@type' in value)
            {
               type = value['@type'];
            }
            // type is ID (IRI)
            else if('@id' in value)
            {
               type = '@id';
            }
            // can be coerced to any type
            else
            {
               type = coerce;
            }
         }
      }
      // type can be coerced to anything
      else if(value.constructor === String)
      {
         type = coerce;
      }

      // types that can be auto-coerced from a JSON-builtin
      if(coerce === null &&
         (type === xsd['boolean'] || type === xsd['integer'] ||
         type === xsd['double']))
      {
         coerce = type;
      }

      // do reverse type-coercion
      if(coerce !== null)
      {
         // type is only null if a language was specified, which is an error
         // if type coercion is specified
         if(type === null)
         {
            throw {
               message: 'Cannot coerce type when a language is specified. ' +
                  'The language information would be lost.'
            };
         }
         // if the value type does not match the coerce type, it is an error
         else if(type !== coerce)
         {
            throw new Exception({
               message: 'Cannot coerce type because the type does ' +
                  'not match.',
               type: type,
               expected: coerce
            });
         }
         // do reverse type-coercion
         else
         {
            if(value.constructor === Object)
            {
               if('@id' in value)
               {
                  rval = value['@id'];
               }
               else if('@literal' in value)
               {
                  rval = value['@literal'];
               }
            }
            else
            {
               rval = value;
            }

            // do basic JSON types conversion
            if(coerce === xsd['boolean'])
            {
               rval = (rval === 'true' || rval != 0);
            }
            else if(coerce === xsd['double'])
            {
               rval = parseFloat(rval);
            }
            else if(coerce === xsd['integer'])
            {
               rval = parseInt(rval);
            }
         }
      }
      // no type-coercion, just change keywords/copy value
      else if(value.constructor === Object)
      {
         rval = {};
         for(var key in value)
         {
            rval[keywords[key]] = value[key];
         }
      }
      else
      {
         rval = _clone(value);
      }

      // compact IRI
      if(type === '@id')
      {
         if(rval.constructor === Object)
         {
            rval[keywords['@id']] = _compactIri(
               ctx, rval[keywords['@id']], usedCtx);
         }
         else
         {
            rval = _compactIri(ctx, rval, usedCtx);
         }
      }
   }

   return rval;
};

/**
 * Recursively expands a value using the given context. Any context in
 * the value will be removed.
 *
 * @param ctx the context.
 * @param property the property that points to the value, NULL for none.
 * @param value the value to expand.
 *
 * @return the expanded value.
 */
Processor.prototype.expand = function(ctx, property, value)
{
   var rval;
   
   // TODO: add data format error detection?
   
   // value is null, nothing to expand
   if(value === null)
   {
      rval = null;
   }
   // if no property is specified and the value is a string (this means the
   // value is a property itself), expand to an IRI
   else if(property === null && value.constructor === String)
   {
      rval = _expandTerm(ctx, value, null);
   }
   else if(value.constructor === Array)
   {
      // recursively add expanded values to array
      rval = [];
      for(var i in value)
      {
         rval.push(this.expand(ctx, property, value[i]));
      }
   }
   else if(value.constructor === Object)
   {
      // if value has a context, use it
      if('@context' in value)
      {
         ctx = jsonld.mergeContexts(ctx, value['@context']);
      }
      
      // recursively handle sub-properties that aren't a sub-context
      rval = {};
      for(var key in value)
      {
         // preserve frame keywords
         if(key === '@embed' || key === '@explicit' ||
            key === '@default' || key === '@omitDefault')
         {
            _setProperty(rval, key, _clone(value[key]));
         }
         else if(key !== '@context')
         {
            // set object to expanded property
            _setProperty(
               rval, _expandTerm(ctx, key, null),
               this.expand(ctx, key, value[key]));
         }
      }
   }
   else
   {
      // do type coercion
      var coerce = this.getCoerceType(ctx, property, null);

      // get JSON-LD keywords
      var keywords = _getKeywords(ctx);

      // automatic coercion for basic JSON types
      if(coerce === null &&
         (value.constructor === Number || value.constructor === Boolean))
      {
         if(value.constructor === Boolean)
         {
            coerce = xsd['boolean'];
         }
         else if(('' + value).indexOf('.') == -1)
         {
            coerce = xsd['integer'];
         }
         else
         {
            coerce = xsd['double'];
         }
      }
      
      // special-case expand @id and @type (skips '@id' expansion)
      if(property === keywords['@id'] || property === keywords['@type'])
      {
         rval = _expandTerm(ctx, value, null);
      }
      // coerce to appropriate type
      else if(coerce !== null)
      {
         rval = {};
         
         // expand ID (IRI)
         if(coerce === '@id')
         {
            rval['@id'] = _expandTerm(ctx, value, null);
         }
         // other type
         else
         {
            rval['@type'] = coerce;
            if(coerce === xsd['double'])
            {
               // do special JSON-LD double format
               value = value.toExponential(6).replace(
                  /(e(?:\+|-))([0-9])$/, '$10$2');
            }
            rval['@literal'] = '' + value;
         }
      }
      // nothing to coerce
      else
      {
         rval = '' + value;
      }
   }
   
   return rval;
};

/**
 * Normalizes a JSON-LD object.
 *
 * @param input the JSON-LD object to normalize.
 * 
 * @return the normalized JSON-LD object.
 */
Processor.prototype.normalize = function(input)
{
   var rval = [];

   // TODO: validate context
   
   if(input !== null)
   {
      // create name generator state
      this.ng =
      {
         tmp: null,
         c14n: null
      };
      
      // expand input
      var expanded = this.expand(defaultContext, null, input);
      
      // assign names to unnamed bnodes
      this.nameBlankNodes(expanded);
      
      // flatten
      var subjects = {};
      _flatten(null, null, expanded, subjects);

      // append subjects with sorted properties to array
      for(var key in subjects)
      {
         var s = subjects[key];
         var sorted = {};
         var keys = Object.keys(s).sort();
         for(var i in keys)
         {
            var k = keys[i];
            sorted[k] = s[k];
         }
         rval.push(sorted);
      }

      // canonicalize blank nodes
      this.canonicalizeBlankNodes(rval);

      // sort output
      rval.sort(function(a, b)
      {
         return _compare(a['@id'], b['@id']);
      });
   }

   return rval;
};

/**
 * Gets the coerce type for the given property.
 *
 * @param ctx the context to use.
 * @param property the property to get the coerced type for.
 * @param usedCtx a context to update if a value was used from "ctx".
 *
 * @return the coerce type, null for none.
 */
Processor.prototype.getCoerceType = function(ctx, property, usedCtx)
{
   var rval = null;

   // get expanded property
   var p = _expandTerm(ctx, property, null);
   
   // built-in type coercion JSON-LD-isms
   if(p === '@id' || p === '@type')
   {
      rval = '@id';
   }
   else
   {
      // look up compacted property for a coercion type
      p = _compactIri(ctx, p, null);
      if(p in ctx && ctx[p].constructor === Object && '@type' in ctx[p])
      {
         // property found, return expanded type
         var type = ctx[p]['@type'];
         rval = _expandTerm(ctx, type, usedCtx);
         if(usedCtx !== null)
         {
            usedCtx[p] = _clone(ctx[p]);
         }
      }
   }
   
   return rval;
};

var _isBlankNodeIri = function(v)
{
   return v.indexOf('_:') === 0;
};

var _isNamedBlankNode = function(v)
{
   // look for "_:" at the beginning of the subject
   return (
      v.constructor === Object && '@id' in v && _isBlankNodeIri(v['@id']));
};

var _isBlankNode = function(v)
{
   // look for a subject with no ID or a blank node ID
   return (_isSubject(v) && (!('@id' in v) || _isNamedBlankNode(v)));
};

/**
 * Compares two values.
 * 
 * @param v1 the first value.
 * @param v2 the second value.
 * 
 * @return -1 if v1 < v2, 0 if v1 == v2, 1 if v1 > v2.
 */
var _compare = function(v1, v2)
{
   var rval = 0;
   
   if(v1.constructor === Array && v2.constructor === Array)
   {
      for(var i = 0; i < v1.length && rval === 0; ++i)
      {
         rval = _compare(v1[i], v2[i]);
      }
   }
   else
   {
      rval = (v1 < v2 ? -1 : (v1 > v2 ? 1 : 0));
   }
   
   return rval;
};

/**
 * Compares two keys in an object. If the key exists in one object
 * and not the other, the object with the key is less. If the key exists in
 * both objects, then the one with the lesser value is less.
 * 
 * @param o1 the first object.
 * @param o2 the second object.
 * @param key the key.
 * 
 * @return -1 if o1 < o2, 0 if o1 == o2, 1 if o1 > o2.
 */
var _compareObjectKeys = function(o1, o2, key)
{
   var rval = 0;
   if(key in o1)
   {
      if(key in o2)
      {
         rval = _compare(o1[key], o2[key]);
      }
      else
      {
         rval = -1;
      }
   }
   else if(key in o2)
   {
      rval = 1;
   }
   return rval;
};

/**
 * Compares two object values.
 * 
 * @param o1 the first object.
 * @param o2 the second object.
 * 
 * @return -1 if o1 < o2, 0 if o1 == o2, 1 if o1 > o2.
 */
var _compareObjects = function(o1, o2)
{
   var rval = 0;
   
   if(o1.constructor === String)
   {
      if(o2.constructor !== String)
      {
         rval = -1;
      }
      else
      {
         rval = _compare(o1, o2);
      }
   }
   else if(o2.constructor === String)
   {
      rval = 1;
   }
   else
   {
      rval = _compareObjectKeys(o1, o2, '@literal');
      if(rval === 0)
      {
         if('@literal' in o1)
         {
            rval = _compareObjectKeys(o1, o2, '@type');
            if(rval === 0)
            {
               rval = _compareObjectKeys(o1, o2, '@language');
            }
         }
         // both are '@id' objects
         else
         {
            rval = _compare(o1['@id'], o2['@id']);
         }
      }
   }
   
   return rval;
};

/**
 * Compares the object values between two bnodes.
 * 
 * @param a the first bnode.
 * @param b the second bnode.
 * 
 * @return -1 if a < b, 0 if a == b, 1 if a > b.
 */
var _compareBlankNodeObjects = function(a, b)
{
   var rval = 0;
   
   /*
   3. For each property, compare sorted object values.
   3.1. The bnode with fewer objects is first.
   3.2. For each object value, compare only literals and non-bnodes.
   3.2.1. The bnode with fewer non-bnodes is first.
   3.2.2. The bnode with a string object is first.
   3.2.3. The bnode with the alphabetically-first string is first.
   3.2.4. The bnode with a @literal is first.
   3.2.5. The bnode with the alphabetically-first @literal is first.
   3.2.6. The bnode with the alphabetically-first @type is first.
   3.2.7. The bnode with a @language is first.
   3.2.8. The bnode with the alphabetically-first @language is first.
   3.2.9. The bnode with the alphabetically-first @id is first.
   */
   
   for(var p in a)
   {
      // skip IDs (IRIs)
      if(p !== '@id')
      {
         // step #3.1
         var lenA = (a[p].constructor === Array) ? a[p].length : 1;
         var lenB = (b[p].constructor === Array) ? b[p].length : 1;
         rval = _compare(lenA, lenB);

         // step #3.2.1
         if(rval === 0)
         {
            // normalize objects to an array
            var objsA = a[p];
            var objsB = b[p];
            if(objsA.constructor !== Array)
            {
               objsA = [objsA];
               objsB = [objsB];
            }
            
            // compare non-bnodes (remove bnodes from comparison)
            objsA = objsA.filter(function(e) {return !_isNamedBlankNode(e);});
            objsB = objsB.filter(function(e) {return !_isNamedBlankNode(e);});
            rval = _compare(objsA.length, objsB.length);
         }
         
         // steps #3.2.2-3.2.9
         if(rval === 0)
         {
            objsA.sort(_compareObjects);
            objsB.sort(_compareObjects);
            for(var i = 0; i < objsA.length && rval === 0; ++i)
            {
               rval = _compareObjects(objsA[i], objsB[i]);
            }
         }
         
         if(rval !== 0)
         {
            break;
         }
      }
   }
   
   return rval;
};

/**
 * Creates a blank node name generator using the given prefix for the
 * blank nodes. 
 * 
 * @param prefix the prefix to use.
 * 
 * @return the blank node name generator.
 */
var _createNameGenerator = function(prefix)
{
   var count = -1;
   var ng = {
      next: function()
      {
         ++count;
         return ng.current();
      },
      current: function()
      {
         return '_:' + prefix + count;
      },
      inNamespace: function(iri)
      {
         return iri.indexOf('_:' + prefix) === 0;
      }
   };
   return ng;
};

/**
 * Populates a map of all named subjects from the given input and an array
 * of all unnamed bnodes (includes embedded ones).
 * 
 * @param input the input (must be expanded, no context).
 * @param subjects the subjects map to populate.
 * @param bnodes the bnodes array to populate.
 */
var _collectSubjects = function(input, subjects, bnodes)
{
   if(input === null)
   {
      // nothing to collect
   }
   else if(input.constructor === Array)
   {
      for(var i in input)
      {
         _collectSubjects(input[i], subjects, bnodes);
      }
   }
   else if(input.constructor === Object)
   {
      if('@id' in input)
      {
         // graph literal/disjoint graph
         if(input['@id'].constructor == Array)
         {
            _collectSubjects(input['@id'], subjects, bnodes);
         }
         // named subject
         else if(_isSubject(input))
         {
            subjects[input['@id']] = input;
         }
      }
      // unnamed blank node
      else if(_isBlankNode(input))
      {
         bnodes.push(input);
      }
      
      // recurse through subject properties
      for(var key in input)
      {
         _collectSubjects(input[key], subjects, bnodes);
      }
   }
};

/**
 * Flattens the given value into a map of unique subjects. It is assumed that
 * all blank nodes have been uniquely named before this call. Array values for
 * properties will be sorted.
 *
 * @param parent the value's parent, NULL for none.
 * @param parentProperty the property relating the value to the parent.
 * @param value the value to flatten.
 * @param subjects the map of subjects to write to.
 */
var _flatten = function(parent, parentProperty, value, subjects)
{
   var flattened = null;
   
   if(value === null)
   {
      // drop null values
   }
   else if(value.constructor === Array)
   {
      // list of objects or a disjoint graph
      for(var i in value)
      {
         _flatten(parent, parentProperty, value[i], subjects);
      }
   }
   else if(value.constructor === Object)
   {
      // already-expanded value or special-case reference-only @type
      if('@literal' in value || parentProperty === '@type')
      {
         flattened = _clone(value);
      }
      // graph literal/disjoint graph
      else if(value['@id'].constructor === Array)
      {
         // cannot flatten embedded graph literals
         if(parent !== null)
         {
            throw {
               message: 'Embedded graph literals cannot be flattened.'
            };
         }
         
         // top-level graph literal
         for(var idx in value['@id'])
         {
            _flatten(parent, parentProperty, value['@id'][idx], subjects);
         }
      }
      // regular subject
      else
      {
         // create or fetch existing subject
         var subject;
         if(value['@id'] in subjects)
         {
            // FIXME: '@id' might be a graph literal (as {})
            subject = subjects[value['@id']];
         }
         else
         {
            // FIXME: '@id' might be a graph literal (as {})
            subject = {'@id': value['@id']};
            subjects[value['@id']] = subject;
         }
         flattened = {'@id': subject['@id']};

         // flatten embeds
         for(var key in value)
         {
            var v = value[key];
            
            // drop null values, skip @id (it is already set above)
            if(v !== null && key !== '@id')
            {
               if(key in subject)
               {
                  if(subject[key].constructor !== Array)
                  {
                     subject[key] = [subject[key]];
                  }
               }
               else
               {
                  subject[key] = [];
               }
               
               _flatten(subject[key], key, v, subjects);
               if(subject[key].length === 1)
               {
                  // convert subject[key] to object if it has only 1
                  subject[key] = subject[key][0];
               }
            }
         }
      }
   }
   // string value
   else
   {
      flattened = value;
   }

   // add flattened value to parent
   if(flattened !== null && parent !== null)
   {
      if(parent.constructor === Array)
      {
         // do not add duplicate IRIs for the same property
         var duplicate = false;
         if(flattened.constructor === Object && '@id' in flattened)
         {
            duplicate = (parent.filter(function(e)
            {
               return (e.constructor === Object && '@id' in e &&
                  e['@id'] === flattened['@id']);
            }).length > 0);
         }
         if(!duplicate)
         {
            parent.push(flattened);
         }
      }
      else
      {
         parent[parentProperty] = flattened;
      }
   }
};


/**
 * Assigns unique names to blank nodes that are unnamed in the given input.
 * 
 * @param input the input to assign names to.
 */
Processor.prototype.nameBlankNodes = function(input)
{
   // create temporary blank node name generator
   var ng = this.ng.tmp = _createNameGenerator('tmp');
   
   // collect subjects and unnamed bnodes
   var subjects = {};
   var bnodes = [];
   _collectSubjects(input, subjects, bnodes);
   
   // uniquely name all unnamed bnodes
   for(var i in bnodes)
   {
      var bnode = bnodes[i];
      if(!('@id' in bnode))
      {
         // generate names until one is unique
         while(ng.next() in subjects){}
         bnode['@id'] = ng.current();
         subjects[ng.current()] = bnode;
      }
   }
};

/**
 * Renames a blank node, changing its references, etc. The method assumes
 * that the given name is unique.
 * 
 * @param b the blank node to rename.
 * @param id the new name to use.
 */
Processor.prototype.renameBlankNode = function(b, id)
{
   var old = b['@id'];
   
   // update bnode IRI
   b['@id'] = id;
   
   // update subjects map
   var subjects = this.subjects;
   subjects[id] = subjects[old];
   delete subjects[old];
   
   // update reference and property lists
   this.edges.refs[id] = this.edges.refs[old];
   this.edges.props[id] = this.edges.props[old];
   delete this.edges.refs[old];
   delete this.edges.props[old];
   
   // update references to this bnode
   var refs = this.edges.refs[id].all;
   for(var i in refs)
   {
      var iri = refs[i].s;
      if(iri === old)
      {
         iri = id;
      }
      var ref = subjects[iri];
      var props = this.edges.props[iri].all;
      for(var i2 in props)
      {
         if(props[i2].s === old)
         {
            props[i2].s = id;
            
            // normalize property to array for single code-path
            var p = props[i2].p;
            var tmp = (ref[p].constructor === Object) ? [ref[p]] :
               (ref[p].constructor === Array) ? ref[p] : [];
            for(var n in tmp)
            {
               if(tmp[n].constructor === Object &&
                  '@id' in tmp[n] && tmp[n]['@id'] === old)
               {
                  tmp[n]['@id'] = id;
               }
            }
         }
      }
   }
   
   // update references from this bnode 
   var props = this.edges.props[id].all;
   for(var i in props)
   {
      var iri = props[i].s;
      refs = this.edges.refs[iri].all;
      for(var r in refs)
      {
         if(refs[r].s === old)
         {
            refs[r].s = id;
         }
      }
   }
};

/**
 * Canonically names blank nodes in the given input.
 * 
 * @param input the flat input graph to assign names to.
 */
Processor.prototype.canonicalizeBlankNodes = function(input)
{
   // create serialization state
   this.renamed = {};
   this.mappings = {};
   this.serializations = {};
   
   // collect subjects and bnodes from flat input graph
   var edges = this.edges =
   {
      refs: {},
      props: {}
   };
   var subjects = this.subjects = {};
   var bnodes = [];
   for(var i in input)
   {
      var iri = input[i]['@id'];
      subjects[iri] = input[i];
      edges.refs[iri] =
      {
         all: [],
         bnodes: []
      };
      edges.props[iri] =
      {
         all: [],
         bnodes: []
      };
      if(_isBlankNodeIri(iri))
      {
         bnodes.push(input[i]);
      }
   }
   
   // collect edges in the graph
   this.collectEdges();
   
   // create canonical blank node name generator
   var c14n = this.ng.c14n = _createNameGenerator('c14n');
   var ngTmp = this.ng.tmp;
   
   // rename all bnodes that happen to be in the c14n namespace
   // and initialize serializations
   for(var i in bnodes)
   {
      var bnode = bnodes[i];
      var iri = bnode['@id'];
      if(c14n.inNamespace(iri))
      {
         // generate names until one is unique
         while(ngTmp.next() in subjects){};
         this.renameBlankNode(bnode, ngTmp.current());
         iri = bnode['@id'];
      }
      this.serializations[iri] =
      {
         'props': null,
         'refs': null
      };
   }
   
   // keep sorting and naming blank nodes until they are all named
   var resort = true;
   var self = this;
   while(bnodes.length > 0)
   {
      if(resort)
      {
         resort = false;
         bnodes.sort(function(a, b)
         {
            return self.deepCompareBlankNodes(a, b);
         });
      }
      
      // name all bnodes according to the first bnode's relation mappings
      var bnode = bnodes.shift();
      var iri = bnode['@id'];
      var dirs = ['props', 'refs'];
      for(var d in dirs)
      {
         var dir = dirs[d];
         
         // if no serialization has been computed, name only the first node
         if(this.serializations[iri][dir] === null)
         {
            var mapping = {};
            mapping[iri] = 's1';
         }
         else
         {
            mapping = this.serializations[iri][dir].m;
         }
         
         // sort keys by value to name them in order
         var keys = Object.keys(mapping);
         keys.sort(function(a, b)
         {
            return _compare(mapping[a], mapping[b]);
         });
         
         // name bnodes in mapping
         var renamed = [];
         for(var i in keys)
         {
            var iriK = keys[i];
            if(!c14n.inNamespace(iri) && iriK in subjects)
            {
               this.renameBlankNode(subjects[iriK], c14n.next());
               renamed.push(iriK);
            }
         }
         
         // only keep non-canonically named bnodes
         var tmp = bnodes;
         bnodes = [];
         for(var i in tmp)
         {
            var b = tmp[i];
            var iriB = b['@id'];
            if(!c14n.inNamespace(iriB))
            {
               // mark serializations related to the named bnodes as dirty
               for(var i2 in renamed)
               {
                  if(this.markSerializationDirty(iriB, renamed[i2], dir))
                  {
                     // resort if a serialization was marked dirty
                     resort = true;
                  }
               }
               bnodes.push(b);
            }
         }
      }
   }
   
   // sort property lists that now have canonically-named bnodes
   for(var key in edges.props)
   {
      if(edges.props[key].bnodes.length > 0)
      {
         var bnode = subjects[key];
         for(var p in bnode)
         {
            if(p.indexOf('@') !== 0 && bnode[p].constructor === Array)
            {
               bnode[p].sort(_compareObjects);
            }
         }
      }
   }
};

/**
 * A MappingBuilder is used to build a mapping of existing blank node names
 * to a form for serialization. The serialization is used to compare blank
 * nodes against one another to determine a sort order.
 */
MappingBuilder = function()
{
   this.count = 1;
   this.processed = {};
   this.mapping = {};
   this.adj = {};
   this.keyStack = [{ keys: ['s1'], idx: 0 }];
   this.done = {};
   this.s = '';
};

/**
 * Copies this MappingBuilder.
 * 
 * @return the MappingBuilder copy.
 */
MappingBuilder.prototype.copy = function()
{
   var rval = new MappingBuilder();
   rval.count = this.count;
   rval.processed = _clone(this.processed);
   rval.mapping = _clone(this.mapping);
   rval.adj = _clone(this.adj);
   rval.keyStack = _clone(this.keyStack);
   rval.done = _clone(this.done);
   rval.s = this.s;
   return rval;
};

/**
 * Maps the next name to the given bnode IRI if the bnode IRI isn't already in
 * the mapping. If the given bnode IRI is canonical, then it will be given
 * a shortened form of the same name.
 * 
 * @param iri the blank node IRI to map the next name to.
 * 
 * @return the mapped name.
 */
MappingBuilder.prototype.mapNode = function(iri)
{
   if(!(iri in this.mapping))
   {
      if(iri.indexOf('_:c14n') === 0)
      {
         this.mapping[iri] = 'c' + iri.substr(6);
      }
      else
      {
         this.mapping[iri] = 's' + this.count++;
      }
   }
   return this.mapping[iri];
};

/**
 * Serializes the properties of the given bnode for its relation serialization.
 * 
 * @param b the blank node.
 * 
 * @return the serialized properties.
 */
var _serializeProperties = function(b)
{
   var rval = '';
   
   var first = true;
   for(var p in b)
   {
      if(p !== '@id')
      {
         if(first)
         {
            first = false;
         }
         else
         {
            rval += '|';
         }
         
         // property
         rval += '<' + p + '>';
         
         // object(s)
         var objs = (b[p].constructor === Array) ? b[p] : [b[p]];
         for(var oi in objs)
         {
            var o = objs[oi];
            if(o.constructor === Object)
            {
               // ID (IRI)
               if('@id' in o)
               {
                  if(_isBlankNodeIri(o['@id']))
                  {
                     rval += '_:';
                  }
                  else
                  {
                     rval += '<' + o['@id'] + '>';
                  }
               }
               // literal
               else
               {
                  rval += '"' + o['@literal'] + '"';
                  
                  // type literal
                  if('@type' in o)
                  {
                     rval += '^^<' + o['@type'] + '>';
                  }
                  // language literal
                  else if('@language' in o)
                  {
                     rval += '@' + o['@language'];
                  }
               }
            }
            // plain literal
            else
            {
               rval += '"' + o + '"';
            }
         }
      }
   }
   
   return rval;
};

/**
 * Recursively increments the relation serialization for a mapping.
 * 
 * @param subjects the subjects in the graph.
 * @param edges the edges in the graph.
 */
MappingBuilder.prototype.serialize = function(subjects, edges)
{
   if(this.keyStack.length > 0)
   {
      // continue from top of key stack
      var next = this.keyStack.pop();
      for(; next.idx < next.keys.length; ++next.idx)
      {
         var k = next.keys[next.idx];
         if(!(k in this.adj))
         {
            this.keyStack.push(next);
            break;
         }
         
         if(k in this.done)
         {
            // mark cycle
            this.s += '_' + k;
         }
         else
         {
            // mark key as serialized
            this.done[k] = true;
            
            // serialize top-level key and its details
            var s = k;
            var adj = this.adj[k];
            var iri = adj.i;
            if(iri in subjects)
            {
               var b = subjects[iri];
               
               // serialize properties
               s += '[' + _serializeProperties(b) + ']';
               
               // serialize references
               var first = true;
               s += '[';
               var refs = edges.refs[iri].all;
               for(var r in refs)
               {
                  if(first)
                  {
                     first = false;
                  }
                  else
                  {
                     s += '|';
                  }
                  s += '<' + refs[r].p + '>';
                  s += _isBlankNodeIri(refs[r].s) ?
                     '_:' : ('<' + refs[r].s + '>');
               }
               s += ']';
            }
            
            // serialize adjacent node keys
            s += adj.k.join('');
            this.s += s;
            this.keyStack.push({ keys: adj.k, idx: 0 });
            this.serialize(subjects, edges);
         }
      }
   }
};

/**
 * Marks a relation serialization as dirty if necessary.
 * 
 * @param iri the IRI of the bnode to check.
 * @param changed the old IRI of the bnode that changed.
 * @param dir the direction to check ('props' or 'refs').
 * 
 * @return true if marked dirty, false if not.
 */
Processor.prototype.markSerializationDirty = function(iri, changed, dir)
{
   var rval = false;
   
   var s = this.serializations[iri];
   if(s[dir] !== null && changed in s[dir].m)
   {
      s[dir] = null;
      rval = true;
   }
   
   return rval;
};

/**
 * Rotates the elements in an array one position.
 * 
 * @param a the array.
 */
var _rotate = function(a)
{
   a.unshift.apply(a, a.splice(1, a.length));
};

/**
 * Compares two serializations for the same blank node. If the two
 * serializations aren't complete enough to determine if they are equal (or if
 * they are actually equal), 0 is returned.
 * 
 * @param s1 the first serialization.
 * @param s2 the second serialization.
 * 
 * @return -1 if s1 < s2, 0 if s1 == s2 (or indeterminate), 1 if s1 > v2.
 */
var _compareSerializations = function(s1, s2)
{
   var rval = 0;
   
   if(s1.length == s2.length)
   {
      rval = _compare(s1, s2);
   }
   else if(s1.length > s2.length)
   {
      rval = _compare(s1.substr(0, s2.length), s2);
   }
   else
   {
      rval = _compare(s1, s2.substr(0, s1.length));
   }
   
   return rval;
};

/**
 * Recursively serializes adjacent bnode combinations for a bnode.
 * 
 * @param s the serialization to update.
 * @param iri the IRI of the bnode being serialized.
 * @param siri the serialization name for the bnode IRI.
 * @param mb the MappingBuilder to use.
 * @param dir the edge direction to use ('props' or 'refs').
 * @param mapped all of the already-mapped adjacent bnodes.
 * @param notMapped all of the not-yet mapped adjacent bnodes.
 */
Processor.prototype.serializeCombos = function(
   s, iri, siri, mb, dir, mapped, notMapped)
{
   // handle recursion
   if(notMapped.length > 0)
   {
      // copy mapped nodes
      mapped = _clone(mapped);
      
      // map first bnode in list
      mapped[mb.mapNode(notMapped[0].s)] = notMapped[0].s;
      
      // recurse into remaining possible combinations
      var original = mb.copy();
      notMapped = notMapped.slice(1);
      var rotations = Math.max(1, notMapped.length);
      for(var r = 0; r < rotations; ++r)
      {
         var m = (r === 0) ? mb : original.copy();
         this.serializeCombos(s, iri, siri, m, dir, mapped, notMapped);
         
         // rotate not-mapped for next combination
         _rotate(notMapped);
      }
   }
   // no more adjacent bnodes to map, update serialization
   else
   {
      var keys = Object.keys(mapped).sort();
      mb.adj[siri] = { i: iri, k: keys, m: mapped };
      mb.serialize(this.subjects, this.edges);
      
      // optimize away mappings that are already too large
      if(s[dir] === null || _compareSerializations(mb.s, s[dir].s) <= 0)
      {
         // recurse into adjacent values
         for(var i in keys)
         {
            var k = keys[i];
            this.serializeBlankNode(s, mapped[k], mb, dir);
         }
         
         // update least serialization if new one has been found
         mb.serialize(this.subjects, this.edges);
         if(s[dir] === null ||
            (_compareSerializations(mb.s, s[dir].s) <= 0 &&
            mb.s.length >= s[dir].s.length))
         {
            s[dir] = { s: mb.s, m: mb.mapping };
         }
      }
   }
};

/**
 * Computes the relation serialization for the given blank node IRI.
 * 
 * @param s the serialization to update.
 * @param iri the current bnode IRI to be mapped.
 * @param mb the MappingBuilder to use.
 * @param dir the edge direction to use ('props' or 'refs').
 */
Processor.prototype.serializeBlankNode = function(s, iri, mb, dir)
{
   // only do mapping if iri not already processed
   if(!(iri in mb.processed))
   {
      // iri now processed
      mb.processed[iri] = true;
      var siri = mb.mapNode(iri);
      
      // copy original mapping builder
      var original = mb.copy();
      
      // split adjacent bnodes on mapped and not-mapped
      var adj = this.edges[dir][iri].bnodes;
      var mapped = {};
      var notMapped = [];
      for(var i in adj)
      {
         if(adj[i].s in mb.mapping)
         {
            mapped[mb.mapping[adj[i].s]] = adj[i].s;
         }
         else
         {
            notMapped.push(adj[i]);
         }
      }
      
      /*
      // TODO: sort notMapped using ShallowCompare
      var self = this;
      notMapped.sort(function(a, b)
      {
         var rval = self.shallowCompareBlankNodes(
            self.subjects[a.s], self.subjects[b.s]);
         return rval;
      });
      
      var same = false;
      var prev = null;
      for(var i in notMapped)
      {
         var curr = this.subjects[notMapped[i].s];
         if(prev !== null)
         {
            if(this.shallowCompareBlankNodes(prev, curr) === 0)
            {
               same = true;
            }
            else
            {
               if(!same)
               {
                  mapped[mb.mapNode(prev['@id'])] = prev['@id'];
                  delete notMapped[i - 1];
               }
               if(i === notMapped.length - 1)
               {
                  mapped[mb.mapNode(curr['@id'])];
                  delete notMapped[i];
               }
               same = false;
            }
         }
         prev = curr;
      }*/
      
      // TODO: ensure this optimization does not alter canonical order
      
      // if the current bnode already has a serialization, reuse it
      /*var hint = (iri in this.serializations) ?
         this.serializations[iri][dir] : null;
      if(hint !== null)
      {
         var hm = hint.m;
         notMapped.sort(function(a, b)
         {
            return _compare(hm[a.s], hm[b.s]);
         });
         for(var i in notMapped)
         {
            mapped[mb.mapNode(notMapped[i].s)] = notMapped[i].s;
         }
         notMapped = [];
      }*/
      
      // loop over possible combinations
      var combos = Math.max(1, notMapped.length);
      for(var i = 0; i < combos; ++i)
      {
         var m = (i === 0) ? mb : original.copy();
         this.serializeCombos(s, iri, siri, m, dir, mapped, notMapped);         
      }
   }
};

/**
 * Compares two blank nodes for equivalence.
 * 
 * @param a the first blank node.
 * @param b the second blank node.
 * 
 * @return -1 if a < b, 0 if a == b, 1 if a > b.
 */
Processor.prototype.deepCompareBlankNodes = function(a, b)
{
   var rval = 0;
   
   // compare IRIs
   var iriA = a['@id'];
   var iriB = b['@id'];
   if(iriA === iriB)
   {
      rval = 0;
   }
   else
   {
      // do shallow compare first
      rval = this.shallowCompareBlankNodes(a, b);
      
      // deep comparison is necessary
      if(rval === 0)
      {
         // compare property edges and then reference edges
         var dirs = ['props', 'refs'];
         for(var i = 0; rval === 0 && i < dirs.length; ++i)
         {
            // recompute 'a' and 'b' serializations as necessary
            var dir = dirs[i];
            var sA = this.serializations[iriA];
            var sB = this.serializations[iriB];
            if(sA[dir] === null)
            {
               var mb = new MappingBuilder();
               if(dir === 'refs')
               {
                  // keep same mapping and count from 'props' serialization
                  mb.mapping = _clone(sA['props'].m);
                  mb.count = Object.keys(mb.mapping).length + 1;
               }
               this.serializeBlankNode(sA, iriA, mb, dir);
            }
            if(sB[dir] === null)
            {
               var mb = new MappingBuilder();
               if(dir === 'refs')
               {
                  // keep same mapping and count from 'props' serialization
                  mb.mapping = _clone(sB['props'].m);
                  mb.count = Object.keys(mb.mapping).length + 1;
               }
               this.serializeBlankNode(sB, iriB, mb, dir);
            }
            
            // compare serializations
            rval = _compare(sA[dir].s, sB[dir].s);
         }
      }
   }
   
   return rval;
};

/**
 * Performs a shallow sort comparison on the given bnodes.
 * 
 * @param a the first bnode.
 * @param b the second bnode.
 * 
 * @return -1 if a < b, 0 if a == b, 1 if a > b.
 */
Processor.prototype.shallowCompareBlankNodes = function(a, b)
{
   var rval = 0;
   
   /* ShallowSort Algorithm (when comparing two bnodes):
      1. Compare the number of properties.
      1.1. The bnode with fewer properties is first.
      2. Compare alphabetically sorted-properties.
      2.1. The bnode with the alphabetically-first property is first.
      3. For each property, compare object values.
      4. Compare the number of references.
      4.1. The bnode with fewer references is first.
      5. Compare sorted references.
      5.1. The bnode with the reference iri (vs. bnode) is first.
      5.2. The bnode with the alphabetically-first reference iri is first.
      5.3. The bnode with the alphabetically-first reference property is first.
    */
   var pA = Object.keys(a);
   var pB = Object.keys(b);
   
   // step #1
   rval = _compare(pA.length, pB.length);
   
   // step #2
   if(rval === 0)
   {
      rval = _compare(pA.sort(), pB.sort());
   }
   
   // step #3
   if(rval === 0)
   {
      rval = _compareBlankNodeObjects(a, b);
   }
   
   // step #4
   if(rval === 0)
   {
      var edgesA = this.edges.refs[a['@id']].all;
      var edgesB = this.edges.refs[b['@id']].all;
      rval = _compare(edgesA.length, edgesB.length);
   }
   
   // step #5
   if(rval === 0)
   {
      for(var i = 0; i < edgesA.length && rval === 0; ++i)
      {
         rval = this.compareEdges(edgesA[i], edgesB[i]);
      }
   }
   
   return rval;
};

/**
 * Compares two edges. Edges with an IRI (vs. a bnode ID) come first, then
 * alphabetically-first IRIs, then alphabetically-first properties. If a blank
 * node has been canonically named, then blank nodes will be compared after
 * properties (with a preference for canonically named over non-canonically
 * named), otherwise they won't be.
 * 
 * @param a the first edge.
 * @param b the second edge.
 * 
 * @return -1 if a < b, 0 if a == b, 1 if a > b.
 */
Processor.prototype.compareEdges = function(a, b)
{
   var rval = 0;
   
   var bnodeA = _isBlankNodeIri(a.s);
   var bnodeB = _isBlankNodeIri(b.s);
   var c14n = this.ng.c14n;
   
   // if not both bnodes, one that is a bnode is greater
   if(bnodeA != bnodeB)
   {
      rval = bnodeA ? 1 : -1;
   }
   else
   {
      if(!bnodeA)
      {
         rval = _compare(a.s, b.s);
      }
      if(rval === 0)
      {
         rval = _compare(a.p, b.p);
      }
      
      // do bnode IRI comparison if canonical naming has begun
      if(rval === 0 && c14n !== null)
      {
         var c14nA = c14n.inNamespace(a.s);
         var c14nB = c14n.inNamespace(b.s);
         if(c14nA != c14nB)
         {
            rval = c14nA ? 1 : -1;
         }
         else if(c14nA)
         {
            rval = _compare(a.s, b.s);
         }
      }
   }
   
   return rval;
};

/**
 * Populates the given reference map with all of the subject edges in the
 * graph. The references will be categorized by the direction of the edges,
 * where 'props' is for properties and 'refs' is for references to a subject as
 * an object. The edge direction categories for each IRI will be sorted into
 * groups 'all' and 'bnodes'.
 */
Processor.prototype.collectEdges = function()
{
   var refs = this.edges.refs;
   var props = this.edges.props;
   
   // collect all references and properties
   for(var iri in this.subjects)
   {
      var subject = this.subjects[iri];
      for(var key in subject)
      {
         if(key !== '@id')
         {
            // normalize to array for single codepath
            var object = subject[key];
            var tmp = (object.constructor !== Array) ? [object] : object;
            for(var i in tmp)
            {
               var o = tmp[i];
               if(o.constructor === Object && '@id' in o &&
                  o['@id'] in this.subjects)
               {
                  var objIri = o['@id'];
                  
                  // map object to this subject
                  refs[objIri].all.push({ s: iri, p: key });
                  
                  // map this subject to object
                  props[iri].all.push({ s: objIri, p: key });
               }
            }
         }
      }
   }
   
   // create sorted categories
   var self = this;
   for(var iri in refs)
   {
      refs[iri].all.sort(function(a, b) { return self.compareEdges(a, b); });
      refs[iri].bnodes = refs[iri].all.filter(function(edge) {
         return _isBlankNodeIri(edge.s);
      });
   }
   for(var iri in props)
   {
      props[iri].all.sort(function(a, b) { return self.compareEdges(a, b); });
      props[iri].bnodes = props[iri].all.filter(function(edge) {
         return _isBlankNodeIri(edge.s);
      });
   }
};

/**
 * Returns true if the given input is a subject and has one of the given types
 * in the given frame.
 * 
 * @param input the input.
 * @param frame the frame with types to look for.
 * 
 * @return true if the input has one of the given types.
 */
var _isType = function(input, frame)
{
   var rval = false;
   
   // check if type(s) are specified in frame and input
   var type = '@type';
   if('@type' in frame &&
      input.constructor === Object && type in input)
   {
      var tmp = (input[type].constructor === Array) ?
         input[type] : [input[type]];
      var types = (frame[type].constructor === Array) ?
         frame[type] : [frame[type]];
      for(var t = 0; t < types.length && !rval; ++t)
      {
         type = types[t];
         for(var i in tmp)
         {
            if(tmp[i] === type)
            {
               rval = true;
               break;
            }
         }
      }
   }
   
   return rval;
};

/**
 * Returns true if the given input matches the given frame via duck-typing.
 * 
 * @param input the input.
 * @param frame the frame to check against.
 * 
 * @return true if the input matches the frame.
 */
var _isDuckType = function(input, frame)
{
   var rval = false;
   
   // frame must not have a specific type
   var type = '@type';
   if(!(type in frame))
   {
      // get frame properties that must exist on input
      var props = Object.keys(frame).filter(function(e)
      {
         // filter non-keywords
         return e.indexOf('@') !== 0;
      });
      if(props.length === 0)
      {
         // input always matches if there are no properties
         rval = true;
      }
      // input must be a subject with all the given properties
      else if(input.constructor === Object && '@id' in input)
      {
         rval = true;
         for(var i in props)
         {
            if(!(props[i] in input))
            {
               rval = false;
               break;
            }
         }
      }
   }
   
   return rval;
};

/**
 * Subframes a value.
 * 
 * @param subjects a map of subjects in the graph.
 * @param value the value to subframe.
 * @param frame the frame to use.
 * @param embeds a map of previously embedded subjects, used to prevent cycles.
 * @param autoembed true if auto-embed is on, false if not.
 * @param parent the parent object.
 * @param parentKey the parent key.
 * @param options the framing options.
 * 
 * @return the framed input.
 */
var _subframe = function(
   subjects, value, frame, embeds, autoembed, parent, parentKey, options)
{
   // get existing embed entry
   var iri = value['@id'];
   var embed = (iri in embeds) ? embeds[iri] : null;
   
   // determine if value should be embedded or referenced,
   // embed is ON if:
   // 1. The frame OR default option specifies @embed as ON, AND
   // 2. There is no existing embed OR it is an autoembed, AND
   //    autoembed mode is off.
   var embedOn = (
      (('@embed' in frame && frame['@embed']) ||
      (!('@embed' in frame) && options.defaults.embedOn)) &&
      (embed === null || (embed.autoembed && !autoembed)));
   
   if(!embedOn)
   {
      // not embedding, so only use subject IRI as reference
      value = {'@id': value['@id']};
   }
   else
   {
      // create new embed entry
      if(embed === null)
      {
         embed = {};
         embeds[iri] = embed;
      }
      // replace the existing embed with a reference
      else if(embed.parent !== null)
      {
         if(embed.parent[embed.key].constructor === Array)
         {
            // find and replace embed in array
            var objs = embed.parent[embed.key];
            for(var i in objs)
            {
               if(objs[i].constructor === Object && '@id' in objs[i] &&
                  objs[i]['@id'] === iri)
               {
                  objs[i] = {'@id': value['@id']};
                  break;
               }
            }
         }
         else
         {
            embed.parent[embed.key] = {'@id': value['@id']};
         }
         
         // recursively remove any dependent dangling embeds
         var removeDependents = function(iri)
         {
            var iris = Object.keys(embeds);
            for(var i in iris)
            {
               i = iris[i];
               if(i in embeds && embeds[i].parent !== null &&
                  embeds[i].parent['@id'] === iri)
               {
                  delete embeds[i];
                  removeDependents(i);
               }
            }
         };
         removeDependents(iri);
      }
      
      // update embed entry
      embed.autoembed = autoembed;
      embed.parent = parent;
      embed.key = parentKey;
      
      // check explicit flag
      var explicitOn = (
         frame['@explicit'] === true || options.defaults.explicitOn);
      if(explicitOn)
      {
         // remove keys from the value that aren't in the frame
         for(key in value)
         {
            // do not remove @id or any frame key
            if(key !== '@id' && !(key in frame))
            {
               delete value[key];
            }
         }
      }
      
      // iterate over keys in value
      var keys = Object.keys(value);
      for(i in keys)
      {
         // skip keywords
         var key = keys[i];
         if(key.indexOf('@') !== 0)
         {
            // get the subframe if available
            if(key in frame)
            {
               var f = frame[key];
               var _autoembed = false;
            }
            // use a catch-all subframe to preserve data from graph
            else
            {
               var f = (value[key].constructor === Array) ? [] : {};
               var _autoembed = true;
            }
            
            // build input and do recursion
            var v = value[key];
            var input = (v.constructor === Array) ? v : [v];
            for(var n in input)
            {
               // replace reference to subject w/embedded subject
               if(input[n].constructor === Object &&
                  '@id' in input[n] &&
                  input[n]['@id'] in subjects)
               {
                  input[n] = subjects[input[n]['@id']];
               }
            }
            value[key] = _frame(
               subjects, input, f, embeds, _autoembed, value, key, options);
         }
      }
      
      // iterate over frame keys to add any missing values
      for(key in frame)
      {
         // skip keywords and non-null keys in value
         if(key.indexOf('@') !== 0 && (!(key in value) || value[key] === null))
         {
            var f = frame[key];
            
            // add empty array to value
            if(f.constructor === Array)
            {
               value[key] = [];
            }
            // add default value to value
            else
            {
               // use first subframe if frame is an array
               if(f.constructor === Array)
               {
                  f = (f.length > 0) ? f[0] : {};
               }
               
               // determine if omit default is on
               var omitOn = (
                  f['@omitDefault'] === true || options.defaults.omitDefaultOn);
               if(!omitOn)
               {
                  if('@default' in f)
                  {
                     // use specified default value
                     value[key] = f['@default'];
                  }
                  else
                  {
                     // built-in default value is: null
                     value[key] = null;
                  }
               }
            }
         }
      }
   }
   
   return value;
};

/**
 * Recursively frames the given input according to the given frame.
 * 
 * @param subjects a map of subjects in the graph.
 * @param input the input to frame.
 * @param frame the frame to use.
 * @param embeds a map of previously embedded subjects, used to prevent cycles.
 * @param autoembed true if auto-embed is on, false if not.
 * @param parent the parent object (for subframing), null for none.
 * @param parentKey the parent key (for subframing), null for none.
 * @param options the framing options.
 * 
 * @return the framed input.
 */
var _frame = function(
   subjects, input, frame, embeds, autoembed, parent, parentKey, options)
{
   var rval = null;
   
   // prepare output, set limit, get array of frames
   var limit = -1;
   var frames;
   if(frame.constructor === Array)
   {
      rval = [];
      frames = frame;
      if(frames.length === 0)
      {
         frames.push({});
      }
   }
   else
   {
      frames = [frame];
      limit = 1;
   }
   
   // iterate over frames adding input matches to list
   var values = [];
   for(var i = 0; i < frames.length && limit !== 0; ++i)
   {
      // get next frame
      frame = frames[i];
      if(frame.constructor !== Object)
      {
         throw {
            message: 'Invalid JSON-LD frame. ' +
               'Frame must be an object or an array.',
            frame: frame
         };
      }
      
      // create array of values for each frame
      values[i] = [];
      for(var n = 0; n < input.length && limit !== 0; ++n)
      {
         // add input to list if it matches frame specific type or duck-type
         var next = input[n];
         if(_isType(next, frame) || _isDuckType(next, frame))
         {
            values[i].push(next);
            --limit;
         }
      }
   }
   
   // for each matching value, add it to the output
   for(var i1 in values)
   {
      for(var i2 in values[i1])
      {
         frame = frames[i1];
         var value = values[i1][i2];
         
         // if value is a subject, do subframing
         if(_isSubject(value))
         {
            value = _subframe(
               subjects, value, frame, embeds, autoembed,
               parent, parentKey, options);
         }
         
         // add value to output
         if(rval === null)
         {
            rval = value;
         }
         else
         {
            // determine if value is a reference to an embed
            var isRef = (_isReference(value) && value['@id'] in embeds);
            
            // push any value that isn't a parentless reference
            if(!(parent === null && isRef))
            {
               rval.push(value);
            }
         }
      }
   }
   
   return rval;
};

/**
 * Frames JSON-LD input.
 * 
 * @param input the JSON-LD input.
 * @param frame the frame to use.
 * @param options framing options to use.
 * 
 * @return the framed output.
 */
Processor.prototype.frame = function(input, frame, options)
{
   var rval;
   
   // normalize input
   input = jsonld.normalize(input);
   
   // save frame context
   var ctx = null;
   if('@context' in frame)
   {
      ctx = _clone(frame['@context']);
      
      // remove context from frame
      frame = jsonld.expand(frame);
   }
   else if(frame.constructor === Array)
   {
      // save first context in the array
      if(frame.length > 0 && '@context' in frame[0])
      {
         ctx = _clone(frame[0]['@context']);
      }
      
      // expand all elements in the array
      var tmp = [];
      for(var i in frame)
      {
         tmp.push(jsonld.expand(frame[i]));
      }
      frame = tmp;
   }
   
   // create framing options
   // TODO: merge in options from function parameter
   options =
   {
      defaults:
      {
         embedOn: true,
         explicitOn: false,
         omitDefaultOn: false
      }
   };
   
   // build map of all subjects
   var subjects = {};
   for(var i in input)
   {
      subjects[input[i]['@id']] = input[i];
   }
   
   // frame input
   rval = _frame(subjects, input, frame, {}, false, null, null, options);
   
   // apply context
   if(ctx !== null && rval !== null)
   {
      rval = jsonld.compact(ctx, rval);
   }
   
   return rval;
};

})();


// exports
var JSONLDParser = {};

JSONLDParser.parser = {};
JSONLDParser.parser.parse = function(data, graph) {
    if(typeof(data) === 'string') {
        data = JSON.parse(data);
    }
    return jsonldParser.toTriples(data, graph);
};


// end of ./src/js-communication/src/jsonld_parser.js 
// exports
var RDFLoader = {};

// imports

RDFLoader.RDFLoader = function(params) {
    this.precedences = ["text/turtle", "text/n3", "application/json"];
    this.parsers = {"text/turtle": TurtleParser.parser, "text/n3":TurtleParser.parser, "application/json":JSONLDParser.parser};
    if(params != null) {
      for(var mime in params["parsers"]) {
          this.parsers[mime] = params["parsers"][mime];
      }
    }

    if(params && params["precedences"] != null) {
        this.precedences = params["precedences"];
        for(var mime in params["parsers"]) {
            if(!Utils.include(this.precedences, mime)) {
                this.precedences.push(mime);
            }
        }
    }

    this.acceptHeaderValue = "";
    for(var i=0; i<this.precedences.length; i++) {
        if(i!=0) {
            this.acceptHeaderValue = this.acceptHeaderValue + "," + this.precedences[i];
        } else {
            this.acceptHeaderValue = this.acceptHeaderValue + this.precedences[i];
        }
    }
}

RDFLoader.RDFLoader.prototype.registerParser = function(mediaType, parser) {
    this.parsers[mediaType] = parser;
    this.precedences.push(mediaType);
};

RDFLoader.RDFLoader.prototype.unregisterParser = function(mediaType) {
    delete this.parsers[mediaType];
    var mediaTypes = [];
    for(var i=0; i<this.precedences.length; i++) {
        if(this.precedences[i] != mediaType) {
            mediaTypes.push(this.precedences[i]);
        }
    }

    this.precedences = mediaTypes;
};

RDFLoader.RDFLoader.prototype.setAcceptHeaderPrecedence = function(mediaTypes) {
    this.precedences = mediaTypes;
};

RDFLoader.RDFLoader.prototype.load = function(uri, graph, callback) {
    var that = this;
    NetworkTransport.load(uri, this.acceptHeaderValue, function(success, results){
        if(success == true) {
            var mime = results["headers"]["Content-Type"] || results["headers"]["content-type"];
            var data = results['data'];
            if(mime != null) {
                mime = mime.split(";")[0]
                for(var m in that.parsers) {
                    if(m.indexOf("/")!=-1) {
                        var mimeParts = m.split("/");
                        if(mimeParts[1] === '*') {
                            if(mime.indexOf(mimeParts[0])!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            }
                        } else {
                            if(mime.indexOf(m)!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            } else if(mime.indexOf(mimeParts[1])!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            }
                        }
                    } else {
                        if(mime.indexOf(m)!=-1) {
                            return that.tryToParse(that.parsers[m], uri, graph, callback);
                        }
                    }
                }
                callback(false, "Unknown media type : "+mime);
            } else {
                console.log("Unknown media type");
                console.log(results["headers"]);
                callback(false, "Uknown media type");
            }
        } else {
            callback(false, "Network error: "+results);
        }});
};

RDFLoader.RDFLoader.prototype.loadFromFile = function(parser, graph, uri, callback) {
    try {
        var that = this;
        fs = require('fs');
        fs.readFile(uri.split("file:/")[1], function(err, data) {
            if(err) throw err;
            var data = data.toString('utf8');
            that.tryToParse(parser, graph, data, callback);
        });
    } catch(e) {
        callback(false, e);
    }
};

RDFLoader.RDFLoader.prototype.tryToParse = function(parser, graph, input, callback) {
    try {
        if(typeof(input) === 'string') {
            input = Utils.normalizeUnicodeLiterals(input);
        }
        var parsed = parser.parse(input, graph);

        if(parsed != null) {
            callback(true, parsed);
        } else {
            callback(false, "parsing error");
        }
    } catch(e) {
        console.log(e.message);
        console.log(e.stack);
        callback(false, "parsing error with mime type : " + e);
    }
};



// var loader = require("./js-communication/src/rdf_loader").RDFLoader; loader = new loader.RDFLoader(); loader.load('http://dbpedialite.org/titles/Lisp_%28programming_language%29', function(success, results){console.log("hey"); console.log(success); console.log(results)})

// end of ./src/js-communication/src/rdf_loader.js 
// exports
var AbstractQueryTree = {};

// imports

/**
 * @doc
 *
 * Based on <http://www.w3.org/2001/sw/DataAccess/rq23/rq24-algebra.html>
 * W3C's note
 */
AbstractQueryTree.AbstractQueryTree = function(params) {
};

AbstractQueryTree.AbstractQueryTree.prototype.parseQueryString = function(query_string) {
    var syntaxTree  = SparqlParser.parser.parse(query_string);
    return syntaxTree;
};

AbstractQueryTree.AbstractQueryTree.prototype.parseExecutableUnit = function(executableUnit) {
    if(executableUnit.kind === 'select') {
        return this.parseSelect(executableUnit);
    } else if(executableUnit.kind === 'ask') {
        return this.parseSelect(executableUnit);        
    } else if(executableUnit.kind === 'modify') {
        return this.parseSelect(executableUnit);
    } else if(executableUnit.kind === 'construct') {
        return this.parseSelect(executableUnit);        
    } else if(executableUnit.kind === 'insertdata') {
        return this.parseInsertData(executableUnit);        
    } else if(executableUnit.kind === 'deletedata') {
        return this.parseInsertData(executableUnit);        
    } else if(executableUnit.kind === 'load') {
        return executableUnit;
    } else if(executableUnit.kind === 'clear') {
        return executableUnit;
    } else if(executableUnit.kind === 'drop') {
        return executableUnit;
    } else if(executableUnit.kind === 'create') {
        return executableUnit;
    } else {
        throw new Error('unknown executable unit: ' + executableUnit.kind);
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.parseSelect = function(syntaxTree){

    if(syntaxTree == null) {
        console.log("error parsing query");
        return null;
    } else {
        var env = { freshCounter: 0 };
        syntaxTree.pattern = this.build(syntaxTree.pattern, env);
        return syntaxTree;
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.parseInsertData = function(syntaxTree){
    if(syntaxTree == null) {
        console.log("error parsing query");
        return null;
    } else {
        return syntaxTree;
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.build = function(node, env) {
    if(node.token === 'groupgraphpattern') {
        return this._buildGroupGraphPattern(node, env);
    } else if (node.token === 'basicgraphpattern') {
        var bgp = { kind: 'BGP',
                    value: node.triplesContext };
	//console.log("pre1");
	bgp = AbstractQueryTree.translatePathExpressionsInBGP(bgp, env);
	//console.log("translation");
	//console.log(sys.inspect(bgp,true,20));	
	return bgp;
    } else if (node.token === 'graphunionpattern') {
        var a = this.build(node.value[0],env);
        var b = this.build(node.value[1],env);

        return { kind: 'UNION',
                 value: [a,b] };
    } else if(node.token === 'graphgraphpattern') {
        var c = this.build(node.value, env);
        return { kind: 'GRAPH',
                 value: c,
                 graph: node.graph };
    } else {
        throw new Error("not supported token in query:"+node.token);
    }
};

AbstractQueryTree.translatePathExpressionsInBGP = function(bgp, env) {
    var pathExpression,nextTriple,beforeToLink;
    var before = [], rest, bottomJoin;
    for(var i=0; i<bgp.value.length; i++) {
	if(bgp.value[i].predicate && bgp.value[i].predicate.token === 'path') {
	    //console.log("FOUND A PATH");
	    pathExpression = bgp.value[i];
	    rest = bgp.value.slice(i+1);
	    var bgpTransformed = AbstractQueryTree.translatePathExpression(pathExpression, env);
	    var optionalPattern = null;
	    //console.log("BACK FROM TRANSFORMED");
	    if(bgpTransformed.kind === 'BGP') {
		before = before.concat(bgpTransformed.value);
	    } else if(bgpTransformed.kind === 'ZERO_OR_MORE_PATH' || bgpTransformed.kind === 'ONE_OR_MORE_PATH'){
		//console.log("BEFORE");
		//console.log(bgpTransformed);
		    

		if(before.length > 0) {
		    bottomJoin =  {kind: 'JOIN',
				   lvalue: {kind: 'BGP', value:before},
				   rvalue: bgpTransformed};
		} else {
		    bottomJoin = bgpTransformed;
		}

		
		if(bgpTransformed.kind === 'ZERO_OR_MORE_PATH') {
		    if(bgpTransformed.y.token === 'var' && bgpTransformed.y.value.indexOf("fresh:")===0 &&
		       bgpTransformed.x.token === 'var' && bgpTransformed.x.value.indexOf("fresh:")===0) {
			//console.log("ADDING EXTRA PATTERN 1)");
			for(var j=0; j<bgp.value.length; j++) {
		   	    //console.log(bgp.value[j]);
		   	    if(bgp.value[j].object && bgp.value[j].object.token === 'var' && bgp.value[j].object.value === bgpTransformed.x.value) {
		   		//console.log(" YES 1)");
		   		optionalPattern = Utils.clone(bgp.value[j]);
		   		optionalPattern.object = bgpTransformed.y;
		   	    }
			}
		    } else if(bgpTransformed.y.token === 'var' && bgpTransformed.y.value.indexOf("fresh:")===0) {
			//console.log("ADDING EXTRA PATTERN 2)");
			var from, to;
			for(var j=0; j<bgp.value.length; j++) {
		   	    //console.log(bgp.value[j]);
		   	    if(bgp.value[j].subject && bgp.value[j].subject.token === 'var' && bgp.value[j].subject.value === bgpTransformed.y.value) {
		   		//console.log(" YES 2)");
		   		optionalPattern = Utils.clone(bgp.value[j]);
		   		optionalPattern.subject = bgpTransformed.x;
		   	    }
			}
		    }
		}

		if(rest.length >0) {
		    //console.log("(2a)")
		    var rvalueJoin = AbstractQueryTree.translatePathExpressionsInBGP({kind: 'BGP', value: rest}, env);
		    //console.log("got rvalue");
		    if(optionalPattern != null) {
			var optionals = before.concat([optionalPattern]).concat(rest);
			return { kind: 'UNION',
				 value: [{ kind: 'JOIN',
					   lvalue: bottomJoin,
					   rvalue: rvalueJoin },
					 {kind: 'BGP',
					  value: optionals}] };
		    } else {
			return { kind: 'JOIN',
				 lvalue: bottomJoin,
				 rvalue: rvalueJoin };
		    }
		} else {
		    //console.log("(2b)")
		    return bottomJoin;
		}

	    } else {
		// @todo ????
		return bgpTransformed;
	    }
	} else {
	    before.push(bgp.value[i]);
	}
    }

    //console.log("returning");
    bgp.value = before;
    return bgp;
};


AbstractQueryTree.translatePathExpression  = function(pathExpression, env) {
    // add support for different path patterns
    if(pathExpression.predicate.kind === 'element') {
	// simple paths, maybe modified
	if(pathExpression.predicate.modifier === '+') {
	    pathExpression.predicate.modifier = null;
	    var expandedPath = AbstractQueryTree.translatePathExpression(pathExpression, env);
	    return {kind: 'ONE_OR_MORE_PATH',
		    path: expandedPath,
		    x: pathExpression.subject,
		    y: pathExpression.object};
	} else if(pathExpression.predicate.modifier === '*') {
	    pathExpression.predicate.modifier = null;
	    var expandedPath = AbstractQueryTree.translatePathExpression(pathExpression, env);
	    return {kind: 'ZERO_OR_MORE_PATH',
	     	    path: expandedPath,
                    x: pathExpression.subject,
		    y: pathExpression.object};
	} else {
	    pathExpression.predicate = pathExpression.predicate.value;
	    return {kind: 'BGP', value: [pathExpression]};
	}
    } else if(pathExpression.predicate.kind === 'sequence') {
	var currentSubject = pathExpression.subject;
	var lastObject = pathExpression.object;
	var currentGraph = pathExpression.graph;
	var nextObject, chain;
	var restTriples = [];
	for(var i=0; i< pathExpression.predicate.value.length; i++) {
	    if(i!=pathExpression.predicate.value.length-1) {
		nextObject = {
		    token: "var",
		    value: "fresh:"+env.freshCounter
		};
		env.freshCounter++;
	    } else {
		nextObject = lastObject;
	    }

	    // @todo
	    // what if the predicate is a path with
	    // '*'? same fresh va in subject and object??
	    chain = {
		subject: currentSubject,
		predicate: pathExpression.predicate.value[i],
		object: nextObject
	    };
	
	    if(currentGraph != null)
		chain.graph = Utils.clone(currentGraph);
	    
	    restTriples.push(chain);

	    if(i!=pathExpression.predicate.value.length-1)
		currentSubject = Utils.clone(nextObject);;
	}
	var bgp = {kind: 'BGP', value: restTriples};
	//console.log("BEFORE (1):");
	//console.log(bgp);
	//console.log("--------------");
	return AbstractQueryTree.translatePathExpressionsInBGP(bgp, env);
    }
};

AbstractQueryTree.AbstractQueryTree.prototype._buildGroupGraphPattern = function(node, env) {
    var f = (node.filters || []);
    var g = {kind: "EMPTY_PATTERN"};

    for(var i=0; i<node.patterns.length; i++) {
        var pattern = node.patterns[i];
        if(pattern.token === 'optionalgraphpattern') {
            var parsedPattern = this.build(pattern.value,env);
            if(parsedPattern.kind === 'FILTER') {
                g =  { kind:'LEFT_JOIN',
                       lvalue: g,
                       rvalue: parsedPattern.value,
                       filter: parsedPattern.filter };
            } else {
                g = { kind:'LEFT_JOIN',
                      lvalue: g,
                      rvalue: parsedPattern,
                      filter: true };
            }
        } else {
            var parsedPattern = this.build(pattern,env);
            if(g.kind == "EMPTY_PATTERN") {
                g = parsedPattern;
            } else {
                g = { kind: 'JOIN',
                      lvalue: g,
                      rvalue: parsedPattern };
            }
        }
    }

    if(f.length != 0) {
        if(g.kind === 'EMPTY_PATTERN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'LEFT_JOIN' && g.filter === true) {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};

//            g.filter = f;
//            return g;
        } else if(g.kind === 'LEFT_JOIN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'JOIN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'UNION') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'GRAPH') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'BGP') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else {
            throw new Error("Unknow kind of algebra expression: "+ g.kind);
        }
    } else {
        return g;
    }
};

/**
 * Collects basic triple pattern in a complex SPARQL AQT
 */
AbstractQueryTree.AbstractQueryTree.prototype.collectBasicTriples = function(aqt, acum) {
    if(acum == null) {
        acum = [];
    }

    if(aqt.kind === 'select') {
        acum = this.collectBasicTriples(aqt.pattern,acum);
    } else if(aqt.kind === 'BGP') {
        acum = acum.concat(aqt.value);
    } else if(aqt.kind === 'ZERO_OR_MORE_PATH') {
	acum = this.collectBasicTriples(aqt.path);
    } else if(aqt.kind === 'UNION') {
        acum = this.collectBasicTriples(aqt.value[0],acum);
        acum = this.collectBasicTriples(aqt.value[1],acum);
    } else if(aqt.kind === 'GRAPH') {
        acum = this.collectBasicTriples(aqt.value,acum);
    } else if(aqt.kind === 'LEFT_JOIN' || aqt.kind === 'JOIN') {
        acum = this.collectBasicTriples(aqt.lvalue, acum);
        acum = this.collectBasicTriples(aqt.rvalue, acum);
    } else if(aqt.kind === 'FILTER') {
        acum = this.collectBasicTriples(aqt.value, acum);
    } else if(aqt.kind === 'construct') {
        acum = this.collectBasicTriples(aqt.pattern,acum);
    } else if(aqt.kind === 'EMPTY_PATTERN') {
        // nothing
    } else {
        throw "Unknown pattern: "+aqt.kind;
    }

    return acum;
};

/**
 * Replaces bindings in an AQT
 */
AbstractQueryTree.AbstractQueryTree.prototype.bind = function(aqt, bindings) {
    if(aqt.graph != null && aqt.graph.token && aqt.graph.token === 'var' &&
       bindings[aqt.graph.value] != null) {
        aqt.graph = bindings[aqt.graph.value];
    }
    if(aqt.filter != null) {
        var acum = [];
        for(var i=0; i< aqt.filter.length; i++) {
            aqt.filter[i].value = this._bindFilter(aqt.filter[i].value, bindings);
            acum.push(aqt.filter[i]);
        }
        aqt.filter = acum;
    }
    if(aqt.kind === 'select') {
        aqt.pattern = this.bind(aqt.pattern, bindings);
        //acum = this.collectBasicTriples(aqt.pattern,acum);
    } else if(aqt.kind === 'BGP') {
        aqt.value = this._bindTripleContext(aqt.value, bindings);
        //acum = acum.concat(aqt.value);
    } else if(aqt.kind === 'ZERO_OR_MORE_PATH') {
        aqt.path = this._bindTripleContext(aqt.path, bindings);
	if(aqt.x && aqt.x.token === 'var' && bindings[aqt.x.value] != null) {
	    aqt.x = bindings[aqt.x.value];
	}
	if(aqt.y && aqt.y.token === 'var' && bindings[aqt.y.value] != null) {
	    aqt.y = bindings[aqt.y.value];
	}
    } else if(aqt.kind === 'UNION') {
        aqt.value[0] = this.bind(aqt.value[0],bindings);
        aqt.value[1] = this.bind(aqt.value[1],bindings);
    } else if(aqt.kind === 'GRAPH') {
        aqt.value = this.bind(aqt.value,bindings);
    } else if(aqt.kind === 'LEFT_JOIN' || aqt.kind === 'JOIN') {
        aqt.lvalue = this.bind(aqt.lvalue, bindings);
        aqt.rvalue = this.bind(aqt.rvalue, bindings);
    } else if(aqt.kind === 'FILTER') {
	aqt.filter = this._bindFilter(aqt.filter[i].value, bindings);
    } else if(aqt.kind === 'EMPTY_PATTERN') {
        // nothing
    } else {
        throw "Unknown pattern: "+aqt.kind;
    }

    return aqt;
};

AbstractQueryTree.AbstractQueryTree.prototype._bindTripleContext = function(triples, bindings) {
    for(var i=0; i<triples.length; i++) {
        delete triples[i]['graph'];
        delete triples[i]['variables'];
        for(var p in triples[i]) {
            var comp = triples[i][p];
            if(comp.token === 'var' && bindings[comp.value] != null) {
                triples[i][p] = bindings[comp.value];
            }
        }
    }

    return triples;
};


AbstractQueryTree.AbstractQueryTree.prototype._bindFilter = function(filterExpr, bindings) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            filterExpr.op1 = this._bindFilter(filterExpr.op1, bindings);
            filterExpr.op2 = this._bindFilter(filterExpr.op2, bindings);
        } else if(expressionType == 'conditionalor' || expressionType == 'conditionaland') {
            for(var i=0; i< filterExpr.operands.length; i++) {
                filterExpr.operands[i] = this._bindFilter(filterExpr.operands[i], bindings);
            }
        } else if(expressionType == 'additiveexpression') {
            filterExpr.summand = this._bindFilter(filterExpr.summand, bindings);
            for(var i=0; i<filterExpr.summands.length; i++) {
                filterExpr.summands[i].expression = this._bindFilter(filterExpr.summands[i].expression, bindings);            
            }
        } else if(expressionType == 'builtincall') {
            for(var i=0; i<filterExpr.args.length; i++) {
                filterExpr.args[i] = this._bindFilter(filterExpr.args[i], bindings);
            }
        } else if(expressionType == 'multiplicativeexpression') {
            filterExpr.factor = this._bindFilter(filterExpr.factor, bindings);
            for(var i=0; i<filterExpr.factors.length; i++) {
                filterExpr.factors[i].expression = this._bindFilter(filterExpr.factors[i].expression, bindings);            
            }
        } else if(expressionType == 'unaryexpression') {
            filterExpr.expression = this._bindFilter(filterExpr.expression, bindings);
        } else if(expressionType == 'irireforfunction') {
            for(var i=0; i<filterExpr.factors.args; i++) {
                filterExpr.args[i] = this._bindFilter(filterExpr.args[i], bindings);            
            }
        } else if(expressionType == 'atomic') {        
            if(filterExpr.primaryexpression == 'var') {
                // lookup the var in the bindings
                if(bindings[filterExpr.value.value] != null) {
                    var val = bindings[filterExpr.value.value];
                    if(val.token === 'uri') {
                        filterExpr.primaryexpression = 'iri';
                    } else {
                        filterExpr.primaryexpression = 'literal';
                    }
                    filterExpr.value = val;
                }
            }
        }
    }

    return filterExpr;
};

/**
 * Replaces terms in an AQT
 */
AbstractQueryTree.AbstractQueryTree.prototype.replace = function(aqt, from, to, ns) {
    if(aqt.graph != null && aqt.graph.token && aqt.graph.token === from.token && 
       aqt.graph.value == from.value) {
        aqt.graph = Utils.clone(to);
    }
    if(aqt.filter != null) {
        var acum = [];
        for(var i=0; i< aqt.filter.length; i++) {
            aqt.filter[i].value = this._replaceFilter(aqt.filter[i].value, from, to, ns);
            acum.push(aqt.filter[i]);
        }
        aqt.filter = acum;
    }
    if(aqt.kind === 'select') {
        aqt.pattern = this.replace(aqt.pattern, from, to, ns);
    } else if(aqt.kind === 'BGP') {
        aqt.value = this._replaceTripleContext(aqt.value, from, to, ns);
    } else if(aqt.kind === 'ZERO_OR_MORE_PATH') {
        aqt.path = this._replaceTripleContext(aqt.path, from,to, ns);
	if(aqt.x && aqt.x.token === from.token && aqt.value === from.value) {
	    aqt.x = Utils.clone(to);
	}
	if(aqt.y && aqt.y.token === from.token && aqt.value === from.value) {
	    aqt.y = Utils.clone(to);
	}
    } else if(aqt.kind === 'UNION') {
        aqt.value[0] = this.replace(aqt.value[0],from,to, ns);
        aqt.value[1] = this.replace(aqt.value[1],from,to, ns);
    } else if(aqt.kind === 'GRAPH') {
        aqt.value = this.replace(aqt.value,from,to);
    } else if(aqt.kind === 'LEFT_JOIN' || aqt.kind === 'JOIN') {
        aqt.lvalue = this.replace(aqt.lvalue, from, to, ns);
        aqt.rvalue = this.replace(aqt.rvalue, from, to, ns);
    } else if(aqt.kind === 'FILTER') {
        aqt.value = this._replaceFilter(aqt.value, from,to, ns);
    } else if(aqt.kind === 'EMPTY_PATTERN') {
        // nothing
    } else {
        throw "Unknown pattern: "+aqt.kind;
    }

    return aqt;
};

AbstractQueryTree.AbstractQueryTree.prototype._replaceTripleContext = function(triples, from, to, ns) {
    for(var i=0; i<triples.length; i++) {
        for(var p in triples[i]) {
            var comp = triples[i][p];
	    if(comp.token === 'var' && from.token === 'var' && comp.value === from.value) {
		triples[i][p] = to;
	    } else if(comp.token === 'blank' && from.token === 'blank' && comp.value === from.value) {
		triples[i][p] = to;
	    } else {
		if((comp.token === 'literal' || comp.token ==='uri') && 
		   (from.token === 'literal' || from.token ==='uri') && 
		   comp.token === from.token && Utils.lexicalFormTerm(comp,ns)[comp.token] === Utils.lexicalFormTerm(from,ns)[comp.token]) {
                    triples[i][p] = to;
		}
	    }
        }
    }

    return triples;
};


AbstractQueryTree.AbstractQueryTree.prototype._replaceFilter = function(filterExpr, from, to, ns) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            filterExpr.op1 = this._replaceFilter(filterExpr.op1, from, to, ns);
            filterExpr.op2 = this._replaceFilter(filterExpr.op2, from, to, ns);
        } else if(expressionType == 'conditionalor' || expressionType == 'conditionaland') {
            for(var i=0; i< filterExpr.operands.length; i++) {
                filterExpr.operands[i] = this._replaceFilter(filterExpr.operands[i], from, to, ns);
            }
        } else if(expressionType == 'additiveexpression') {
            filterExpr.summand = this._replaceFilter(filterExpr.summand, from, to, ns);
            for(var i=0; i<filterExpr.summands.length; i++) {
                filterExpr.summands[i].expression = this._replaceFilter(filterExpr.summands[i].expression, from, to, ns);            
            }
        } else if(expressionType == 'builtincall') {
            for(var i=0; i<filterExpr.args.length; i++) {
                filterExpr.args[i] = this._replaceFilter(filterExpr.args[i], from, to, ns);
            }
        } else if(expressionType == 'multiplicativeexpression') {
            filterExpr.factor = this._replaceFilter(filterExpr.factor, from, to, ns);
            for(var i=0; i<filterExpr.factors.length; i++) {
                filterExpr.factors[i].expression = this._replaceFilter(filterExpr.factors[i].expression, from, to, ns);
            }
        } else if(expressionType == 'unaryexpression') {
            filterExpr.expression = this._replaceFilter(filterExpr.expression, from, to, ns);
        } else if(expressionType == 'irireforfunction') {
            for(var i=0; i<filterExpr.factors.args; i++) {
                filterExpr.args[i] = this._replaceFilter(filterExpr.args[i], from, to, ns);
            }
        } else if(expressionType == 'atomic') {        
	    var val = null;
            if(filterExpr.primaryexpression == from.token && filterExpr.value == from.value) {
                    val = to.value;                
            } else if(filterExpr.primaryexpression == 'iri' && from.token == 'uri' && filterExpr.value == from.value) {
                val = to.value;                
	    }

	
	    if(val != null) {
                if(to.token === 'uri') {
                    filterExpr.primaryexpression = 'iri';
                } else {
                    filterExpr.primaryexpression = to.token;
                }
                filterExpr.value = val;
	    }
        }
    }

    return filterExpr;
};

AbstractQueryTree.AbstractQueryTree.prototype.treeWithUnion = function(aqt) {
    if(aqt == null)
	return false;
    if(aqt.kind == null)
	return false;
    if(aqt.kind === 'select') {
        return this.treeWithUnion(aqt.pattern);
    } else if(aqt.kind === 'BGP') {
        return this.treeWithUnion(aqt.value);
    } else if(aqt.kind === 'ZERO_OR_MORE_PATH') {
	return false;
    } else if(aqt.kind === 'UNION') {
	console.log("UNION!!");
	if(aqt.value[0].value != null && aqt.value[0].value.variables != null &&
	   aqt.value[1].value != null && aqt.value[1].value.variables != null) {
	    console.log("COMPARING:"+aqt.value[0].variables.join("/"));
	    console.log("VS "+aqt.values[1].variables.join("/"));
	    if(aqt.value[0].variables.join("/") === aqt.values[1].variables.join("/")) {
		if(this.treeWithUnion(aqt.value[0]))
		    return true;
		else
		    return this.treeWithUnion(aqt.value[1]);
	    }
	} else {
	    return true;	    
	}
    } else if(aqt.kind === 'GRAPH') {
	return false;
    } else if(aqt.kind === 'LEFT_JOIN' || aqt.kind === 'JOIN') {
        var leftUnion  = this.treeWithUnion(aqt.lvalue);
	if(leftUnion)
	    return true;
	else
            this.treeWithUnion(aqt.rvalue);
    } else if(aqt.kind === 'FILTER') {
	return false;
    } else if(aqt.kind === 'EMPTY_PATTERN') {
	return false;
    } else {
	return false;
    }
};

// end of ./src/js-sparql-parser/src/abstract_query_tree.js 
// exports
var SparqlParser = {};

SparqlParser.parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "ANON": parse_ANON,
        "AdditiveExpression": parse_AdditiveExpression,
        "Aggregate": parse_Aggregate,
        "ArgList": parse_ArgList,
        "AskQuery": parse_AskQuery,
        "BLANK_NODE_LABEL": parse_BLANK_NODE_LABEL,
        "BaseDecl": parse_BaseDecl,
        "BindingValue": parse_BindingValue,
        "BindingsClause": parse_BindingsClause,
        "BlankNode": parse_BlankNode,
        "BlankNodePropertyList": parse_BlankNodePropertyList,
        "BooleanLiteral": parse_BooleanLiteral,
        "BrackettedExpression": parse_BrackettedExpression,
        "BuiltInCall": parse_BuiltInCall,
        "COMMENT": parse_COMMENT,
        "Clear": parse_Clear,
        "Collection": parse_Collection,
        "ConditionalAndExpression": parse_ConditionalAndExpression,
        "ConditionalOrExpression": parse_ConditionalOrExpression,
        "Constraint": parse_Constraint,
        "ConstructQuery": parse_ConstructQuery,
        "ConstructTemplate": parse_ConstructTemplate,
        "ConstructTriples": parse_ConstructTriples,
        "Create": parse_Create,
        "DECIMAL": parse_DECIMAL,
        "DECIMAL_NEGATIVE": parse_DECIMAL_NEGATIVE,
        "DECIMAL_POSITIVE": parse_DECIMAL_POSITIVE,
        "DOCUMENT": parse_DOCUMENT,
        "DOUBLE": parse_DOUBLE,
        "DOUBLE_NEGATIVE": parse_DOUBLE_NEGATIVE,
        "DOUBLE_POSITIVE": parse_DOUBLE_POSITIVE,
        "DatasetClause": parse_DatasetClause,
        "DefaultGraphClause": parse_DefaultGraphClause,
        "DeleteClause": parse_DeleteClause,
        "DeleteData": parse_DeleteData,
        "DeleteWhere": parse_DeleteWhere,
        "DescribeQuery": parse_DescribeQuery,
        "Drop": parse_Drop,
        "ECHAR": parse_ECHAR,
        "EXPONENT": parse_EXPONENT,
        "ExistsFunc": parse_ExistsFunc,
        "ExpressionList": parse_ExpressionList,
        "Filter": parse_Filter,
        "FunctionCall": parse_FunctionCall,
        "GraphGraphPattern": parse_GraphGraphPattern,
        "GraphNode": parse_GraphNode,
        "GraphPatternNotTriples": parse_GraphPatternNotTriples,
        "GraphRef": parse_GraphRef,
        "GraphRefAll": parse_GraphRefAll,
        "GraphTerm": parse_GraphTerm,
        "GroupClause": parse_GroupClause,
        "GroupCondition": parse_GroupCondition,
        "GroupGraphPattern": parse_GroupGraphPattern,
        "GroupGraphPatternSub": parse_GroupGraphPatternSub,
        "GroupOrUnionGraphPattern": parse_GroupOrUnionGraphPattern,
        "HavingClause": parse_HavingClause,
        "INTEGER": parse_INTEGER,
        "INTEGER_NEGATIVE": parse_INTEGER_NEGATIVE,
        "INTEGER_POSITIVE": parse_INTEGER_POSITIVE,
        "IRI_REF": parse_IRI_REF,
        "IRIref": parse_IRIref,
        "IRIrefOrFunction": parse_IRIrefOrFunction,
        "InsertClause": parse_InsertClause,
        "InsertData": parse_InsertData,
        "LANGTAG": parse_LANGTAG,
        "LimitClause": parse_LimitClause,
        "LimitOffsetClauses": parse_LimitOffsetClauses,
        "Load": parse_Load,
        "MinusGraphPattern": parse_MinusGraphPattern,
        "Modify": parse_Modify,
        "MultiplicativeExpression": parse_MultiplicativeExpression,
        "NIL": parse_NIL,
        "NamedGraphClause": parse_NamedGraphClause,
        "NotExistsFunc": parse_NotExistsFunc,
        "NumericLiteral": parse_NumericLiteral,
        "NumericLiteralNegative": parse_NumericLiteralNegative,
        "NumericLiteralPositive": parse_NumericLiteralPositive,
        "NumericLiteralUnsigned": parse_NumericLiteralUnsigned,
        "ObjectList": parse_ObjectList,
        "OffsetClause": parse_OffsetClause,
        "OptionalGraphPattern": parse_OptionalGraphPattern,
        "OrderClause": parse_OrderClause,
        "OrderCondition": parse_OrderCondition,
        "PNAME_LN": parse_PNAME_LN,
        "PNAME_NS": parse_PNAME_NS,
        "PN_CHARS": parse_PN_CHARS,
        "PN_CHARS_BASE": parse_PN_CHARS_BASE,
        "PN_CHARS_U": parse_PN_CHARS_U,
        "PN_LOCAL": parse_PN_LOCAL,
        "PN_PREFIX": parse_PN_PREFIX,
        "PathAlternative": parse_PathAlternative,
        "PathElt": parse_PathElt,
        "PathEltOrInverse": parse_PathEltOrInverse,
        "PathMod": parse_PathMod,
        "PathNegatedPropertySet": parse_PathNegatedPropertySet,
        "PathOneInPropertySet": parse_PathOneInPropertySet,
        "PathPrimary": parse_PathPrimary,
        "PathSequence": parse_PathSequence,
        "PrefixDecl": parse_PrefixDecl,
        "PrefixedName": parse_PrefixedName,
        "PrimaryExpression": parse_PrimaryExpression,
        "Prologue": parse_Prologue,
        "PropertyList": parse_PropertyList,
        "PropertyListNotEmpty": parse_PropertyListNotEmpty,
        "PropertyListNotEmptyPath": parse_PropertyListNotEmptyPath,
        "PropertyListPath": parse_PropertyListPath,
        "QuadData": parse_QuadData,
        "QuadPattern": parse_QuadPattern,
        "Quads": parse_Quads,
        "QuadsNotTriples": parse_QuadsNotTriples,
        "Query": parse_Query,
        "RDFLiteral": parse_RDFLiteral,
        "RegexExpression": parse_RegexExpression,
        "RelationalExpression": parse_RelationalExpression,
        "SPARQL": parse_SPARQL,
        "STRING_LITERAL1": parse_STRING_LITERAL1,
        "STRING_LITERAL2": parse_STRING_LITERAL2,
        "STRING_LITERAL_LONG1": parse_STRING_LITERAL_LONG1,
        "STRING_LITERAL_LONG2": parse_STRING_LITERAL_LONG2,
        "SelectClause": parse_SelectClause,
        "SelectQuery": parse_SelectQuery,
        "ServiceGraphPattern": parse_ServiceGraphPattern,
        "SolutionModifier": parse_SolutionModifier,
        "String": parse_String,
        "SubSelect": parse_SubSelect,
        "TURTLE": parse_TURTLE,
        "TriplesBlock": parse_TriplesBlock,
        "TriplesNode": parse_TriplesNode,
        "TriplesSameSubject": parse_TriplesSameSubject,
        "TriplesSameSubjectPath": parse_TriplesSameSubjectPath,
        "TriplesTemplate": parse_TriplesTemplate,
        "UnaryExpression": parse_UnaryExpression,
        "Update": parse_Update,
        "Update1": parse_Update1,
        "UsingClause": parse_UsingClause,
        "VAR1": parse_VAR1,
        "VAR2": parse_VAR2,
        "VARNAME": parse_VARNAME,
        "Var": parse_Var,
        "VarOrIRIref": parse_VarOrIRIref,
        "VarOrTerm": parse_VarOrTerm,
        "Verb": parse_Verb,
        "VerbPath": parse_VerbPath,
        "WS": parse_WS,
        "WhereClause": parse_WhereClause,
        "base": parse_base,
        "directive": parse_directive,
        "prefixID": parse_prefixID,
        "statement": parse_statement
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "DOCUMENT";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_DOCUMENT() {
        var cacheKey = 'DOCUMENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_SPARQL();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_TURTLE();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SPARQL() {
        var cacheKey = 'SPARQL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_Query();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Update();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Query() {
        var cacheKey = 'Query@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Prologue();
        if (result3 !== null) {
          var result8 = parse_SelectQuery();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var result7 = parse_ConstructQuery();
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result6 = parse_DescribeQuery();
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result5 = parse_AskQuery();
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            };
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, q) {
                return {token: 'query',
                        kind: 'query',
                        prologue: p,
                        units: [q]};
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[2] Query");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Prologue() {
        var cacheKey = 'Prologue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result8 = parse_BaseDecl();
        var result3 = result8 !== null ? result8 : '';
        if (result3 !== null) {
          var result4 = [];
          var result7 = parse_WS();
          while (result7 !== null) {
            result4.push(result7);
            var result7 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = [];
            var result6 = parse_PrefixDecl();
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_PrefixDecl();
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(b, pfx) {
                return { token: 'prologue',
                         base: b,
                         prefixes: pfx }
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[3] Prologue");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BaseDecl() {
        var cacheKey = 'BaseDecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result10 = parse_WS();
        while (result10 !== null) {
          result3.push(result10);
          var result10 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 4) === "BASE") {
            var result9 = "BASE";
            pos += 4;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"BASE\"");
            }
          }
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos, 4) === "base") {
              var result8 = "base";
              pos += 4;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"base\"");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result7 = parse_WS();
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_IRI_REF();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);
          
                base = {};
                base.token = 'base';
                base.value = i;
          
                return base;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[4] BaseDecl");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixDecl() {
        var cacheKey = 'PrefixDecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 6) === "PREFIX") {
            var result12 = "PREFIX";
            pos += 6;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"PREFIX\"");
            }
          }
          if (result12 !== null) {
            var result4 = result12;
          } else {
            if (input.substr(pos, 6) === "prefix") {
              var result11 = "prefix";
              pos += 6;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"prefix\"");
              }
            }
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_PNAME_NS();
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_IRI_REF();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, l) {
          
                registerPrefix(p,l);
          
                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;
          
                return prefix;
          })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[5] PrefixDecl");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TURTLE() {
        var cacheKey = 'TURTLE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        var result3 = parse_statement();
        while (result3 !== null) {
          result1.push(result3);
          var result3 = parse_statement();
        }
        var result2 = result1 !== null
          ? (function(sts) {
                  return sts;
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result14 = [];
        var result21 = parse_WS();
        while (result21 !== null) {
          result14.push(result21);
          var result21 = parse_WS();
        }
        if (result14 !== null) {
          var result15 = parse_directive();
          if (result15 !== null) {
            var result16 = [];
            var result20 = parse_WS();
            while (result20 !== null) {
              result16.push(result20);
              var result20 = parse_WS();
            }
            if (result16 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result17 = ".";
                pos += 1;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result17 !== null) {
                var result18 = [];
                var result19 = parse_WS();
                while (result19 !== null) {
                  result18.push(result19);
                  var result19 = parse_WS();
                }
                if (result18 !== null) {
                  var result12 = [result14, result15, result16, result17, result18];
                } else {
                  var result12 = null;
                  pos = savedPos3;
                }
              } else {
                var result12 = null;
                pos = savedPos3;
              }
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function(d) {
                  return d;
              })(result12[1])
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result6 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result6.push(result10);
            var result10 = parse_WS();
          }
          if (result6 !== null) {
            var result7 = parse_TriplesBlock();
            if (result7 !== null) {
              var result8 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result8.push(result9);
                var result9 = parse_WS();
              }
              if (result8 !== null) {
                var result4 = [result6, result7, result8];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result5 = result4 !== null
            ? (function(ts) {
                    return ts;
                })(result4[1])
            : null;
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_WS();
            if (result2 !== null) {
              var result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                var result2 = parse_WS();
              }
            } else {
              var result1 = null;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_directive() {
        var cacheKey = 'directive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_prefixID();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_base();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_base() {
        var cacheKey = 'base@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result8 = parse_WS();
        while (result8 !== null) {
          result3.push(result8);
          var result8 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 5) === "@base") {
            var result4 = "@base";
            pos += 5;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"@base\"");
            }
          }
          if (result4 !== null) {
            var result7 = parse_WS();
            if (result7 !== null) {
              var result5 = [];
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result6 = parse_IRI_REF();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);
          
                base = {};
                base.token = 'base';
                base.value = i;
          
                return base;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefixID() {
        var cacheKey = 'prefixID@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 7) === "@prefix") {
            var result4 = "@prefix";
            pos += 7;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"@prefix\"");
            }
          }
          if (result4 !== null) {
            var result12 = parse_WS();
            if (result12 !== null) {
              var result5 = [];
              while (result12 !== null) {
                result5.push(result12);
                var result12 = parse_WS();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result11 = parse_PN_PREFIX();
              var result6 = result11 !== null ? result11 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === ":") {
                  var result7 = ":";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result10 = parse_WS();
                  while (result10 !== null) {
                    result8.push(result10);
                    var result10 = parse_WS();
                  }
                  if (result8 !== null) {
                    var result9 = parse_IRI_REF();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, l) {
          
                registerPrefix(p,l);
          
                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;
          
                return prefix;
          })(result1[3], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SelectQuery() {
        var cacheKey = 'SelectQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_SelectClause();
        if (result3 !== null) {
          var result4 = [];
          var result16 = parse_WS();
          while (result16 !== null) {
            result4.push(result16);
            var result16 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = [];
            var result15 = parse_DatasetClause();
            while (result15 !== null) {
              result5.push(result15);
              var result15 = parse_DatasetClause();
            }
            if (result5 !== null) {
              var result6 = [];
              var result14 = parse_WS();
              while (result14 !== null) {
                result6.push(result14);
                var result14 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_WhereClause();
                if (result7 !== null) {
                  var result8 = [];
                  var result13 = parse_WS();
                  while (result13 !== null) {
                    result8.push(result13);
                    var result13 = parse_WS();
                  }
                  if (result8 !== null) {
                    var result9 = parse_SolutionModifier();
                    if (result9 !== null) {
                      var result10 = [];
                      var result12 = parse_WS();
                      while (result12 !== null) {
                        result10.push(result12);
                        var result12 = parse_WS();
                      }
                      if (result10 !== null) {
                        var result11 = parse_BindingsClause();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, gs, w, sm) {
          
                var dataset = {'named':[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'select';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.projection = s.vars;
                query.modifier = s.modifier;
                query.pattern = w
                
                if(sm!=null && sm.limit!=null) {
                    query.limit = sm.limit;
                }
                if(sm!=null && sm.offset!=null) {
                    query.offset = sm.offset;
                }
                if(sm!=null && (sm.order!=null && sm.order!="")) {
                    query.order = sm.order;
                }
                if(sm!=null && sm.group!=null) {
                    query.group = sm.group;
                }
          
                return query
          })(result1[0], result1[2], result1[4], result1[6])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[6] SelectQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SubSelect() {
        var cacheKey = 'SubSelect@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_SelectClause();
        if (result1 !== null) {
          var result2 = parse_WhereClause();
          if (result2 !== null) {
            var result3 = parse_SolutionModifier();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[7] SubSelect");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SelectClause() {
        var cacheKey = 'SelectClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result54 = parse_WS();
        while (result54 !== null) {
          result3.push(result54);
          var result54 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 6) === "SELECT") {
            var result53 = "SELECT";
            pos += 6;
          } else {
            var result53 = null;
            if (reportMatchFailures) {
              matchFailed("\"SELECT\"");
            }
          }
          if (result53 !== null) {
            var result4 = result53;
          } else {
            if (input.substr(pos, 6) === "select") {
              var result52 = "select";
              pos += 6;
            } else {
              var result52 = null;
              if (reportMatchFailures) {
                matchFailed("\"select\"");
              }
            }
            if (result52 !== null) {
              var result4 = result52;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result51 = parse_WS();
            while (result51 !== null) {
              result5.push(result51);
              var result51 = parse_WS();
            }
            if (result5 !== null) {
              if (input.substr(pos, 8) === "DISTINCT") {
                var result50 = "DISTINCT";
                pos += 8;
              } else {
                var result50 = null;
                if (reportMatchFailures) {
                  matchFailed("\"DISTINCT\"");
                }
              }
              if (result50 !== null) {
                var result48 = result50;
              } else {
                if (input.substr(pos, 8) === "distinct") {
                  var result49 = "distinct";
                  pos += 8;
                } else {
                  var result49 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"distinct\"");
                  }
                }
                if (result49 !== null) {
                  var result48 = result49;
                } else {
                  var result48 = null;;
                };
              }
              if (result48 !== null) {
                var result44 = result48;
              } else {
                if (input.substr(pos, 7) === "REDUCED") {
                  var result47 = "REDUCED";
                  pos += 7;
                } else {
                  var result47 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"REDUCED\"");
                  }
                }
                if (result47 !== null) {
                  var result45 = result47;
                } else {
                  if (input.substr(pos, 7) === "reduced") {
                    var result46 = "reduced";
                    pos += 7;
                  } else {
                    var result46 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"reduced\"");
                    }
                  }
                  if (result46 !== null) {
                    var result45 = result46;
                  } else {
                    var result45 = null;;
                  };
                }
                if (result45 !== null) {
                  var result44 = result45;
                } else {
                  var result44 = null;;
                };
              }
              var result6 = result44 !== null ? result44 : '';
              if (result6 !== null) {
                var result7 = [];
                var result43 = parse_WS();
                while (result43 !== null) {
                  result7.push(result43);
                  var result43 = parse_WS();
                }
                if (result7 !== null) {
                  var savedPos4 = pos;
                  var result38 = [];
                  var result42 = parse_WS();
                  while (result42 !== null) {
                    result38.push(result42);
                    var result42 = parse_WS();
                  }
                  if (result38 !== null) {
                    var result39 = parse_Var();
                    if (result39 !== null) {
                      var result40 = [];
                      var result41 = parse_WS();
                      while (result41 !== null) {
                        result40.push(result41);
                        var result41 = parse_WS();
                      }
                      if (result40 !== null) {
                        var result37 = [result38, result39, result40];
                      } else {
                        var result37 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result37 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result37 = null;
                    pos = savedPos4;
                  }
                  if (result37 !== null) {
                    var result16 = result37;
                  } else {
                    var savedPos3 = pos;
                    var result18 = [];
                    var result36 = parse_WS();
                    while (result36 !== null) {
                      result18.push(result36);
                      var result36 = parse_WS();
                    }
                    if (result18 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result19 = "(";
                        pos += 1;
                      } else {
                        var result19 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result19 !== null) {
                        var result20 = [];
                        var result35 = parse_WS();
                        while (result35 !== null) {
                          result20.push(result35);
                          var result35 = parse_WS();
                        }
                        if (result20 !== null) {
                          var result21 = parse_ConditionalOrExpression();
                          if (result21 !== null) {
                            var result22 = [];
                            var result34 = parse_WS();
                            while (result34 !== null) {
                              result22.push(result34);
                              var result34 = parse_WS();
                            }
                            if (result22 !== null) {
                              if (input.substr(pos, 2) === "AS") {
                                var result33 = "AS";
                                pos += 2;
                              } else {
                                var result33 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"AS\"");
                                }
                              }
                              if (result33 !== null) {
                                var result23 = result33;
                              } else {
                                if (input.substr(pos, 2) === "as") {
                                  var result32 = "as";
                                  pos += 2;
                                } else {
                                  var result32 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"as\"");
                                  }
                                }
                                if (result32 !== null) {
                                  var result23 = result32;
                                } else {
                                  var result23 = null;;
                                };
                              }
                              if (result23 !== null) {
                                var result24 = [];
                                var result31 = parse_WS();
                                while (result31 !== null) {
                                  result24.push(result31);
                                  var result31 = parse_WS();
                                }
                                if (result24 !== null) {
                                  var result25 = parse_Var();
                                  if (result25 !== null) {
                                    var result26 = [];
                                    var result30 = parse_WS();
                                    while (result30 !== null) {
                                      result26.push(result30);
                                      var result30 = parse_WS();
                                    }
                                    if (result26 !== null) {
                                      if (input.substr(pos, 1) === ")") {
                                        var result27 = ")";
                                        pos += 1;
                                      } else {
                                        var result27 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\")\"");
                                        }
                                      }
                                      if (result27 !== null) {
                                        var result28 = [];
                                        var result29 = parse_WS();
                                        while (result29 !== null) {
                                          result28.push(result29);
                                          var result29 = parse_WS();
                                        }
                                        if (result28 !== null) {
                                          var result17 = [result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28];
                                        } else {
                                          var result17 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result17 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result17 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result17 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result17 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result17 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result17 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result17 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result17 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result17 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos3;
                    }
                    if (result17 !== null) {
                      var result16 = result17;
                    } else {
                      var result16 = null;;
                    };
                  }
                  if (result16 !== null) {
                    var result15 = [];
                    while (result16 !== null) {
                      result15.push(result16);
                      var savedPos4 = pos;
                      var result38 = [];
                      var result42 = parse_WS();
                      while (result42 !== null) {
                        result38.push(result42);
                        var result42 = parse_WS();
                      }
                      if (result38 !== null) {
                        var result39 = parse_Var();
                        if (result39 !== null) {
                          var result40 = [];
                          var result41 = parse_WS();
                          while (result41 !== null) {
                            result40.push(result41);
                            var result41 = parse_WS();
                          }
                          if (result40 !== null) {
                            var result37 = [result38, result39, result40];
                          } else {
                            var result37 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result37 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result37 = null;
                        pos = savedPos4;
                      }
                      if (result37 !== null) {
                        var result16 = result37;
                      } else {
                        var savedPos3 = pos;
                        var result18 = [];
                        var result36 = parse_WS();
                        while (result36 !== null) {
                          result18.push(result36);
                          var result36 = parse_WS();
                        }
                        if (result18 !== null) {
                          if (input.substr(pos, 1) === "(") {
                            var result19 = "(";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"(\"");
                            }
                          }
                          if (result19 !== null) {
                            var result20 = [];
                            var result35 = parse_WS();
                            while (result35 !== null) {
                              result20.push(result35);
                              var result35 = parse_WS();
                            }
                            if (result20 !== null) {
                              var result21 = parse_ConditionalOrExpression();
                              if (result21 !== null) {
                                var result22 = [];
                                var result34 = parse_WS();
                                while (result34 !== null) {
                                  result22.push(result34);
                                  var result34 = parse_WS();
                                }
                                if (result22 !== null) {
                                  if (input.substr(pos, 2) === "AS") {
                                    var result33 = "AS";
                                    pos += 2;
                                  } else {
                                    var result33 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"AS\"");
                                    }
                                  }
                                  if (result33 !== null) {
                                    var result23 = result33;
                                  } else {
                                    if (input.substr(pos, 2) === "as") {
                                      var result32 = "as";
                                      pos += 2;
                                    } else {
                                      var result32 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"as\"");
                                      }
                                    }
                                    if (result32 !== null) {
                                      var result23 = result32;
                                    } else {
                                      var result23 = null;;
                                    };
                                  }
                                  if (result23 !== null) {
                                    var result24 = [];
                                    var result31 = parse_WS();
                                    while (result31 !== null) {
                                      result24.push(result31);
                                      var result31 = parse_WS();
                                    }
                                    if (result24 !== null) {
                                      var result25 = parse_Var();
                                      if (result25 !== null) {
                                        var result26 = [];
                                        var result30 = parse_WS();
                                        while (result30 !== null) {
                                          result26.push(result30);
                                          var result30 = parse_WS();
                                        }
                                        if (result26 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result27 = ")";
                                            pos += 1;
                                          } else {
                                            var result27 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result27 !== null) {
                                            var result28 = [];
                                            var result29 = parse_WS();
                                            while (result29 !== null) {
                                              result28.push(result29);
                                              var result29 = parse_WS();
                                            }
                                            if (result28 !== null) {
                                              var result17 = [result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28];
                                            } else {
                                              var result17 = null;
                                              pos = savedPos3;
                                            }
                                          } else {
                                            var result17 = null;
                                            pos = savedPos3;
                                          }
                                        } else {
                                          var result17 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result17 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result17 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result17 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result17 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result17 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result17 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result17 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result17 = null;
                          pos = savedPos3;
                        }
                        if (result17 !== null) {
                          var result16 = result17;
                        } else {
                          var result16 = null;;
                        };
                      }
                    }
                  } else {
                    var result15 = null;
                  }
                  if (result15 !== null) {
                    var result8 = result15;
                  } else {
                    var savedPos2 = pos;
                    var result10 = [];
                    var result14 = parse_WS();
                    while (result14 !== null) {
                      result10.push(result14);
                      var result14 = parse_WS();
                    }
                    if (result10 !== null) {
                      if (input.substr(pos, 1) === "*") {
                        var result11 = "*";
                        pos += 1;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"*\"");
                        }
                      }
                      if (result11 !== null) {
                        var result12 = [];
                        var result13 = parse_WS();
                        while (result13 !== null) {
                          result12.push(result13);
                          var result13 = parse_WS();
                        }
                        if (result12 !== null) {
                          var result9 = [result10, result11, result12];
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result8 = result9;
                    } else {
                      var result8 = null;;
                    };
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(mod, proj) {
               var vars = [];
                if(proj.length === 3 && proj[1]==="*") {
                    return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
                }
          
                for(var i=0; i< proj.length; i++) {
                    var aVar = proj[i];
          
                    if(aVar.length === 3) {
                        vars.push({token: 'variable', kind:'var', value:aVar[1]});
                    } else {
                        vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
                    }
                }
          
                return {vars: vars, modifier:arrayToString(mod)};
          })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[8] SelectClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructQuery() {
        var cacheKey = 'ConstructQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result20 = parse_WS();
        while (result20 !== null) {
          result3.push(result20);
          var result20 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 9) === "CONSTRUCT") {
            var result19 = "CONSTRUCT";
            pos += 9;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"CONSTRUCT\"");
            }
          }
          if (result19 !== null) {
            var result4 = result19;
          } else {
            if (input.substr(pos, 9) === "construct") {
              var result18 = "construct";
              pos += 9;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"construct\"");
              }
            }
            if (result18 !== null) {
              var result4 = result18;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result17 = parse_WS();
            while (result17 !== null) {
              result5.push(result17);
              var result17 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_ConstructTemplate();
              if (result6 !== null) {
                var result7 = [];
                var result16 = parse_WS();
                while (result16 !== null) {
                  result7.push(result16);
                  var result16 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result15 = parse_DatasetClause();
                  while (result15 !== null) {
                    result8.push(result15);
                    var result15 = parse_DatasetClause();
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result14 = parse_WS();
                    while (result14 !== null) {
                      result9.push(result14);
                      var result14 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result10 = parse_WhereClause();
                      if (result10 !== null) {
                        var result11 = [];
                        var result13 = parse_WS();
                        while (result13 !== null) {
                          result11.push(result13);
                          var result13 = parse_WS();
                        }
                        if (result11 !== null) {
                          var result12 = parse_SolutionModifier();
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(t, gs, w, sm) {
                var dataset = {'named':[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'construct';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.template = t;
                query.pattern = w
                
                if(sm!=null && sm.limit!=null) {
                    query.limit = sm.limit;
                }
                if(sm!=null && sm.offset!=null) {
                    query.offset = sm.offset;
                }
                if(sm!=null && (sm.order!=null && sm.order!="")) {
                    query.order = sm.order;
                }
                return query
          
          })(result1[3], result1[5], result1[7], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[9] ConstructQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DescribeQuery() {
        var cacheKey = 'DescribeQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "DESCRIBE") {
          var result1 = "DESCRIBE";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"DESCRIBE\"");
          }
        }
        if (result1 !== null) {
          var result10 = parse_VarOrIRIref();
          if (result10 !== null) {
            var result9 = [];
            while (result10 !== null) {
              result9.push(result10);
              var result10 = parse_VarOrIRIref();
            }
          } else {
            var result9 = null;
          }
          if (result9 !== null) {
            var result2 = result9;
          } else {
            if (input.substr(pos, 1) === "*") {
              var result8 = "*";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result8 !== null) {
              var result2 = result8;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result3 = [];
            var result7 = parse_DatasetClause();
            while (result7 !== null) {
              result3.push(result7);
              var result7 = parse_DatasetClause();
            }
            if (result3 !== null) {
              var result6 = parse_WhereClause();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_SolutionModifier();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[10] DescribeQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AskQuery() {
        var cacheKey = 'AskQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result14 = parse_WS();
        while (result14 !== null) {
          result3.push(result14);
          var result14 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 3) === "ASK") {
            var result13 = "ASK";
            pos += 3;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"ASK\"");
            }
          }
          if (result13 !== null) {
            var result4 = result13;
          } else {
            if (input.substr(pos, 3) === "ask") {
              var result12 = "ask";
              pos += 3;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"ask\"");
              }
            }
            if (result12 !== null) {
              var result4 = result12;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result5.push(result11);
              var result11 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = [];
              var result10 = parse_DatasetClause();
              while (result10 !== null) {
                result6.push(result10);
                var result10 = parse_DatasetClause();
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_WhereClause();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(gs, w) {
                var dataset = {'named':[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'ask';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.pattern = w
          
                return query
          })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[11] AskQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DatasetClause() {
        var cacheKey = 'DatasetClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "FROM") {
          var result12 = "FROM";
          pos += 4;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"FROM\"");
          }
        }
        if (result12 !== null) {
          var result3 = result12;
        } else {
          if (input.substr(pos, 4) === "from") {
            var result11 = "from";
            pos += 4;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"from\"");
            }
          }
          if (result11 !== null) {
            var result3 = result11;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result4.push(result10);
            var result10 = parse_WS();
          }
          if (result4 !== null) {
            var result9 = parse_DefaultGraphClause();
            if (result9 !== null) {
              var result5 = result9;
            } else {
              var result8 = parse_NamedGraphClause();
              if (result8 !== null) {
                var result5 = result8;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_WS();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(gs) {
                return gs;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[12] DatasetClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DefaultGraphClause() {
        var cacheKey = 'DefaultGraphClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result5 = parse_WS();
        while (result5 !== null) {
          result3.push(result5);
          var result5 = parse_WS();
        }
        if (result3 !== null) {
          var result4 = parse_IRIref();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {
              return {graph:s , kind:'default', token:'graphClause'}
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[13] DefaultGraphClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NamedGraphClause() {
        var cacheKey = 'NamedGraphClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "NAMED") {
          var result8 = "NAMED";
          pos += 5;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"NAMED\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 5) === "named") {
            var result7 = "named";
            pos += 5;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"named\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_WS();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_IRIref();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s) {      
                return {graph:s, kind:'named', token:'graphCluase'};
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[14] NamedGraphClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhereClause() {
        var cacheKey = 'WhereClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "WHERE") {
          var result11 = "WHERE";
          pos += 5;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"WHERE\"");
          }
        }
        if (result11 !== null) {
          var result9 = result11;
        } else {
          if (input.substr(pos, 5) === "where") {
            var result10 = "where";
            pos += 5;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"where\"");
            }
          }
          if (result10 !== null) {
            var result9 = result10;
          } else {
            var result9 = null;;
          };
        }
        var result3 = result9 !== null ? result9 : '';
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result4.push(result8);
            var result8 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_GroupGraphPattern();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_WS();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(g) {
                return g;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[16] WhereClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SolutionModifier() {
        var cacheKey = 'SolutionModifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result10 = parse_GroupClause();
        var result3 = result10 !== null ? result10 : '';
        if (result3 !== null) {
          var result9 = parse_HavingClause();
          var result4 = result9 !== null ? result9 : '';
          if (result4 !== null) {
            var result8 = parse_OrderClause();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result7 = parse_LimitOffsetClauses();
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(gc, oc, lo) {
                var acum = {};
                if(lo != null) {
                    if(lo.limit != null) {
                        acum.limit = lo.limit;
                    } 
                    if(lo.offset != null) {
                        acum.offset = lo.offset;
                    }
                }
          
                if(gc != null) {
                    acum.group = gc;
                }
          
                acum.order = oc;
          
                return acum
          })(result1[0], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[17] SolutionModifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupClause() {
        var cacheKey = 'GroupClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "GROUP") {
          var result14 = "GROUP";
          pos += 5;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"GROUP\"");
          }
        }
        if (result14 !== null) {
          var result3 = result14;
        } else {
          if (input.substr(pos, 5) === "group") {
            var result13 = "group";
            pos += 5;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"group\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result4.push(result12);
            var result12 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "BY") {
              var result11 = "BY";
              pos += 2;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"BY\"");
              }
            }
            if (result11 !== null) {
              var result5 = result11;
            } else {
              if (input.substr(pos, 2) === "by") {
                var result10 = "by";
                pos += 2;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"by\"");
                }
              }
              if (result10 !== null) {
                var result5 = result10;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result6.push(result9);
                var result9 = parse_WS();
              }
              if (result6 !== null) {
                var result8 = parse_GroupCondition();
                if (result8 !== null) {
                  var result7 = [];
                  while (result8 !== null) {
                    result7.push(result8);
                    var result8 = parse_GroupCondition();
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(conds) {
                return conds;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[18] GroupClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupCondition() {
        var cacheKey = 'GroupCondition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos7 = pos;
        var savedPos8 = pos;
        var result44 = [];
        var result48 = parse_WS();
        while (result48 !== null) {
          result44.push(result48);
          var result48 = parse_WS();
        }
        if (result44 !== null) {
          var result45 = parse_BuiltInCall();
          if (result45 !== null) {
            var result46 = [];
            var result47 = parse_WS();
            while (result47 !== null) {
              result46.push(result47);
              var result47 = parse_WS();
            }
            if (result46 !== null) {
              var result42 = [result44, result45, result46];
            } else {
              var result42 = null;
              pos = savedPos8;
            }
          } else {
            var result42 = null;
            pos = savedPos8;
          }
        } else {
          var result42 = null;
          pos = savedPos8;
        }
        var result43 = result42 !== null
          ? (function(b) {
                return b;
          })(result42[1])
          : null;
        if (result43 !== null) {
          var result41 = result43;
        } else {
          var result41 = null;
          pos = savedPos7;
        }
        if (result41 !== null) {
          var result0 = result41;
        } else {
          var savedPos5 = pos;
          var savedPos6 = pos;
          var result36 = [];
          var result40 = parse_WS();
          while (result40 !== null) {
            result36.push(result40);
            var result40 = parse_WS();
          }
          if (result36 !== null) {
            var result37 = parse_FunctionCall();
            if (result37 !== null) {
              var result38 = [];
              var result39 = parse_WS();
              while (result39 !== null) {
                result38.push(result39);
                var result39 = parse_WS();
              }
              if (result38 !== null) {
                var result34 = [result36, result37, result38];
              } else {
                var result34 = null;
                pos = savedPos6;
              }
            } else {
              var result34 = null;
              pos = savedPos6;
            }
          } else {
            var result34 = null;
            pos = savedPos6;
          }
          var result35 = result34 !== null
            ? (function(f) {
                  return f;
            })(result34[1])
            : null;
          if (result35 !== null) {
            var result33 = result35;
          } else {
            var result33 = null;
            pos = savedPos5;
          }
          if (result33 !== null) {
            var result0 = result33;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result12 = [];
            var result32 = parse_WS();
            while (result32 !== null) {
              result12.push(result32);
              var result32 = parse_WS();
            }
            if (result12 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result13 = "(";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result13 !== null) {
                var result14 = [];
                var result31 = parse_WS();
                while (result31 !== null) {
                  result14.push(result31);
                  var result31 = parse_WS();
                }
                if (result14 !== null) {
                  var result15 = parse_ConditionalOrExpression();
                  if (result15 !== null) {
                    var result16 = [];
                    var result30 = parse_WS();
                    while (result30 !== null) {
                      result16.push(result30);
                      var result30 = parse_WS();
                    }
                    if (result16 !== null) {
                      var savedPos4 = pos;
                      if (input.substr(pos, 2) === "AS") {
                        var result29 = "AS";
                        pos += 2;
                      } else {
                        var result29 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"AS\"");
                        }
                      }
                      if (result29 !== null) {
                        var result24 = result29;
                      } else {
                        if (input.substr(pos, 2) === "as") {
                          var result28 = "as";
                          pos += 2;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"as\"");
                          }
                        }
                        if (result28 !== null) {
                          var result24 = result28;
                        } else {
                          var result24 = null;;
                        };
                      }
                      if (result24 !== null) {
                        var result25 = [];
                        var result27 = parse_WS();
                        while (result27 !== null) {
                          result25.push(result27);
                          var result27 = parse_WS();
                        }
                        if (result25 !== null) {
                          var result26 = parse_Var();
                          if (result26 !== null) {
                            var result23 = [result24, result25, result26];
                          } else {
                            var result23 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result23 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result23 = null;
                        pos = savedPos4;
                      }
                      var result17 = result23 !== null ? result23 : '';
                      if (result17 !== null) {
                        var result18 = [];
                        var result22 = parse_WS();
                        while (result22 !== null) {
                          result18.push(result22);
                          var result22 = parse_WS();
                        }
                        if (result18 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result19 = ")";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result19 !== null) {
                            var result20 = [];
                            var result21 = parse_WS();
                            while (result21 !== null) {
                              result20.push(result21);
                              var result21 = parse_WS();
                            }
                            if (result20 !== null) {
                              var result10 = [result12, result13, result14, result15, result16, result17, result18, result19, result20];
                            } else {
                              var result10 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result10 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
            var result11 = result10 !== null
              ? (function(e, alias) {
                    if(alias.length != 0) {
                        return {token: 'aliased_expression',
                                expression: e,
                                alias: alias[2] };
                    } else {
                        return e;
                    }
              })(result10[3], result10[5])
              : null;
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;
              pos = savedPos2;
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result4.push(result8);
                var result8 = parse_WS();
              }
              if (result4 !== null) {
                var result5 = parse_Var();
                if (result5 !== null) {
                  var result6 = [];
                  var result7 = parse_WS();
                  while (result7 !== null) {
                    result6.push(result7);
                    var result7 = parse_WS();
                  }
                  if (result6 !== null) {
                    var result2 = [result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(v) {
                      return v;
                })(result2[1])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[19] GroupCondition");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HavingClause() {
        var cacheKey = 'HavingClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "HAVING") {
          var result1 = "HAVING";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"HAVING\"");
          }
        }
        if (result1 !== null) {
          var result3 = parse_Constraint();
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              var result3 = parse_Constraint();
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[20] HavingClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrderClause() {
        var cacheKey = 'OrderClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "ORDER") {
          var result16 = "ORDER";
          pos += 5;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"ORDER\"");
          }
        }
        if (result16 !== null) {
          var result3 = result16;
        } else {
          if (input.substr(pos, 5) === "order") {
            var result15 = "order";
            pos += 5;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"order\"");
            }
          }
          if (result15 !== null) {
            var result3 = result15;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result14 = parse_WS();
          while (result14 !== null) {
            result4.push(result14);
            var result14 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 2) === "BY") {
              var result13 = "BY";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"BY\"");
              }
            }
            if (result13 !== null) {
              var result5 = result13;
            } else {
              if (input.substr(pos, 2) === "by") {
                var result12 = "by";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"by\"");
                }
              }
              if (result12 !== null) {
                var result5 = result12;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result11 = parse_WS();
              while (result11 !== null) {
                result6.push(result11);
                var result11 = parse_WS();
              }
              if (result6 !== null) {
                var result10 = parse_OrderCondition();
                if (result10 !== null) {
                  var result7 = [];
                  while (result10 !== null) {
                    result7.push(result10);
                    var result10 = parse_OrderCondition();
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result9 = parse_WS();
                  while (result9 !== null) {
                    result8.push(result9);
                    var result9 = parse_WS();
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(os) {
                return os;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[22] OrderClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrderCondition() {
        var cacheKey = 'OrderCondition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 3) === "ASC") {
          var result21 = "ASC";
          pos += 3;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"ASC\"");
          }
        }
        if (result21 !== null) {
          var result12 = result21;
        } else {
          if (input.substr(pos, 3) === "asc") {
            var result20 = "asc";
            pos += 3;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"asc\"");
            }
          }
          if (result20 !== null) {
            var result12 = result20;
          } else {
            if (input.substr(pos, 4) === "DESC") {
              var result19 = "DESC";
              pos += 4;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"DESC\"");
              }
            }
            if (result19 !== null) {
              var result12 = result19;
            } else {
              if (input.substr(pos, 4) === "desc") {
                var result18 = "desc";
                pos += 4;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"desc\"");
                }
              }
              if (result18 !== null) {
                var result12 = result18;
              } else {
                var result12 = null;;
              };
            };
          };
        }
        if (result12 !== null) {
          var result13 = [];
          var result17 = parse_WS();
          while (result17 !== null) {
            result13.push(result17);
            var result17 = parse_WS();
          }
          if (result13 !== null) {
            var result14 = parse_BrackettedExpression();
            if (result14 !== null) {
              var result15 = [];
              var result16 = parse_WS();
              while (result16 !== null) {
                result15.push(result16);
                var result16 = parse_WS();
              }
              if (result15 !== null) {
                var result10 = [result12, result13, result14, result15];
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        var result11 = result10 !== null
          ? (function(direction, e) {
                return { direction: direction.toUpperCase(), expression:e };
          })(result10[0], result10[2])
          : null;
        if (result11 !== null) {
          var result9 = result11;
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result8 = parse_Constraint();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var result7 = parse_Var();
            if (result7 !== null) {
              var result4 = result7;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result6 = parse_WS();
            while (result6 !== null) {
              result5.push(result6);
              var result6 = parse_WS();
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(e) {
                if(e.token === 'var') {
                    e = { token:'expression', 
                          expressionType:'atomic',
                          primaryexpression: 'var',
                          value: e };
                }
                return { direction: 'ASC', expression:e };
            })(result2[0])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[23] OrderCondition");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LimitOffsetClauses() {
        var cacheKey = 'LimitOffsetClauses@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos2 = pos;
        var result8 = parse_LimitClause();
        if (result8 !== null) {
          var result10 = parse_OffsetClause();
          var result9 = result10 !== null ? result10 : '';
          if (result9 !== null) {
            var result7 = [result8, result9];
          } else {
            var result7 = null;
            pos = savedPos2;
          }
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result1 = result7;
        } else {
          var savedPos1 = pos;
          var result4 = parse_OffsetClause();
          if (result4 !== null) {
            var result6 = parse_LimitClause();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(cls) {
                var acum = {};
                for(var i=0; i<cls.length; i++) {
                    var cl = cls[i];
                    if(cl.limit != null) {
                        acum['limit'] = cl.limit;
                    } else if(cl.offset != null){
                        acum['offset'] = cl.offset;
                    }
                }
          
                return acum;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[24] LimitOffsetClauses");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LimitClause() {
        var cacheKey = 'LimitClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "LIMIT") {
          var result10 = "LIMIT";
          pos += 5;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"LIMIT\"");
          }
        }
        if (result10 !== null) {
          var result3 = result10;
        } else {
          if (input.substr(pos, 5) === "limit") {
            var result9 = "limit";
            pos += 5;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"limit\"");
            }
          }
          if (result9 !== null) {
            var result3 = result9;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result4.push(result8);
            var result8 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_INTEGER();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_WS();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i) {
            return { limit:parseInt(i.value) };
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[25] LimitClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OffsetClause() {
        var cacheKey = 'OffsetClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "OFFSET") {
          var result10 = "OFFSET";
          pos += 6;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"OFFSET\"");
          }
        }
        if (result10 !== null) {
          var result3 = result10;
        } else {
          if (input.substr(pos, 6) === "offset") {
            var result9 = "offset";
            pos += 6;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"offset\"");
            }
          }
          if (result9 !== null) {
            var result3 = result9;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result4.push(result8);
            var result8 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_INTEGER();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_WS();
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i) {
            return { offset:parseInt(i.value) };
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[26] OffsetClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BindingsClause() {
        var cacheKey = 'BindingsClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "BINDINGS") {
          var result2 = "BINDINGS";
          pos += 8;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"BINDINGS\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result14 = parse_Var();
          while (result14 !== null) {
            result3.push(result14);
            var result14 = parse_Var();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result4 = "{";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result10 = "(";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result10 !== null) {
                var result13 = parse_BindingValue();
                if (result13 !== null) {
                  var result11 = [];
                  while (result13 !== null) {
                    result11.push(result13);
                    var result13 = parse_BindingValue();
                  }
                } else {
                  var result11 = null;
                }
                if (result11 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result12 = ")";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result12 !== null) {
                    var result9 = [result10, result11, result12];
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result8 = parse_NIL();
                if (result8 !== null) {
                  var result7 = result8;
                } else {
                  var result7 = null;;
                };
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result10 = "(";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result10 !== null) {
                  var result13 = parse_BindingValue();
                  if (result13 !== null) {
                    var result11 = [];
                    while (result13 !== null) {
                      result11.push(result13);
                      var result13 = parse_BindingValue();
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result12 = ")";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result12 !== null) {
                      var result9 = [result10, result11, result12];
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_NIL();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[27] BindingsClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BindingValue() {
        var cacheKey = 'BindingValue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result5 = parse_IRIref();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_RDFLiteral();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_NumericLiteral();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_BooleanLiteral();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 5) === "UNDEF") {
                  var result1 = "UNDEF";
                  pos += 5;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"UNDEF\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[28] BindingValue");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Update() {
        var cacheKey = 'Update@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Prologue();
        if (result3 !== null) {
          var result4 = [];
          var result15 = parse_WS();
          while (result15 !== null) {
            result4.push(result15);
            var result15 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_Update1();
            if (result5 !== null) {
              var savedPos2 = pos;
              var result8 = [];
              var result14 = parse_WS();
              while (result14 !== null) {
                result8.push(result14);
                var result14 = parse_WS();
              }
              if (result8 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result9 = ";";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = [];
                  var result13 = parse_WS();
                  while (result13 !== null) {
                    result10.push(result13);
                    var result13 = parse_WS();
                  }
                  if (result10 !== null) {
                    var result12 = parse_Update();
                    var result11 = result12 !== null ? result12 : '';
                    if (result11 !== null) {
                      var result7 = [result8, result9, result10, result11];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, u, us) {
          
                var query = {};
                query.token = 'query';
                query.kind = 'update'
                query.prologue = p;
          
               var units = [u];
          
               if(us.length != null && us[3] != null && us[3].units != null) {
                   units = units.concat(us[3].units);
               }
          
               query.units = units;
               return query;
          })(result1[0], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[30] Update");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Update1() {
        var cacheKey = 'Update1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_Load();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_Clear();
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_Drop();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var result5 = parse_Create();
              if (result5 !== null) {
                var result0 = result5;
              } else {
                var result4 = parse_InsertData();
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  var result3 = parse_DeleteData();
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_DeleteWhere();
                    if (result2 !== null) {
                      var result0 = result2;
                    } else {
                      var result1 = parse_Modify();
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[31] Update1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Load() {
        var cacheKey = 'Load@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "LOAD") {
          var result18 = "LOAD";
          pos += 4;
        } else {
          var result18 = null;
          if (reportMatchFailures) {
            matchFailed("\"LOAD\"");
          }
        }
        if (result18 !== null) {
          var result3 = result18;
        } else {
          if (input.substr(pos, 4) === "load") {
            var result17 = "load";
            pos += 4;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"load\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result16 = parse_WS();
          while (result16 !== null) {
            result4.push(result16);
            var result16 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_IRIref();
            if (result5 !== null) {
              var result6 = [];
              var result15 = parse_WS();
              while (result15 !== null) {
                result6.push(result15);
                var result15 = parse_WS();
              }
              if (result6 !== null) {
                var savedPos2 = pos;
                if (input.substr(pos, 4) === "INTO") {
                  var result14 = "INTO";
                  pos += 4;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"INTO\"");
                  }
                }
                if (result14 !== null) {
                  var result9 = result14;
                } else {
                  if (input.substr(pos, 4) === "into") {
                    var result13 = "into";
                    pos += 4;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"into\"");
                    }
                  }
                  if (result13 !== null) {
                    var result9 = result13;
                  } else {
                    var result9 = null;;
                  };
                }
                if (result9 !== null) {
                  var result10 = [];
                  var result12 = parse_WS();
                  while (result12 !== null) {
                    result10.push(result12);
                    var result12 = parse_WS();
                  }
                  if (result10 !== null) {
                    var result11 = parse_GraphRef();
                    if (result11 !== null) {
                      var result8 = [result9, result10, result11];
                    } else {
                      var result8 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(sg, dg) {
                var query = {};
                query.kind = 'load';
                query.token = 'executableunit'
                query.sourceGraph = sg;
                query.destinyGraph = dg[2];
                
                return query;
          })(result1[2], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[32] Load");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Clear() {
        var cacheKey = 'Clear@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "CLEAR") {
          var result14 = "CLEAR";
          pos += 5;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"CLEAR\"");
          }
        }
        if (result14 !== null) {
          var result3 = result14;
        } else {
          if (input.substr(pos, 5) === "clear") {
            var result13 = "clear";
            pos += 5;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"clear\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result4.push(result12);
            var result12 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 6) === "SILENT") {
              var result11 = "SILENT";
              pos += 6;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"SILENT\"");
              }
            }
            if (result11 !== null) {
              var result9 = result11;
            } else {
              if (input.substr(pos, 6) === "silent") {
                var result10 = "silent";
                pos += 6;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"silent\"");
                }
              }
              if (result10 !== null) {
                var result9 = result10;
              } else {
                var result9 = null;;
              };
            }
            var result5 = result9 !== null ? result9 : '';
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_GraphRefAll();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'clear';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[33] Clear");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Drop() {
        var cacheKey = 'Drop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "DROP") {
          var result14 = "DROP";
          pos += 4;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"DROP\"");
          }
        }
        if (result14 !== null) {
          var result3 = result14;
        } else {
          if (input.substr(pos, 4) === "drop") {
            var result13 = "drop";
            pos += 4;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"drop\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result4.push(result12);
            var result12 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 6) === "SILENT") {
              var result11 = "SILENT";
              pos += 6;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"SILENT\"");
              }
            }
            if (result11 !== null) {
              var result9 = result11;
            } else {
              if (input.substr(pos, 6) === "silent") {
                var result10 = "silent";
                pos += 6;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"silent\"");
                }
              }
              if (result10 !== null) {
                var result9 = result10;
              } else {
                var result9 = null;;
              };
            }
            var result5 = result9 !== null ? result9 : '';
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_GraphRefAll();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'drop';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[34] Drop");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Create() {
        var cacheKey = 'Create@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "CREATE") {
          var result14 = "CREATE";
          pos += 6;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"CREATE\"");
          }
        }
        if (result14 !== null) {
          var result3 = result14;
        } else {
          if (input.substr(pos, 6) === "create") {
            var result13 = "create";
            pos += 6;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"create\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result4.push(result12);
            var result12 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 6) === "SILENT") {
              var result11 = "SILENT";
              pos += 6;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"SILENT\"");
              }
            }
            if (result11 !== null) {
              var result9 = result11;
            } else {
              if (input.substr(pos, 6) === "silent") {
                var result10 = "silent";
                pos += 6;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"silent\"");
                }
              }
              if (result10 !== null) {
                var result9 = result10;
              } else {
                var result9 = null;;
              };
            }
            var result5 = result9 !== null ? result9 : '';
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_GraphRef();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'create';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[35] Create");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_InsertData() {
        var cacheKey = 'InsertData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "INSERT") {
          var result13 = "INSERT";
          pos += 6;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"INSERT\"");
          }
        }
        if (result13 !== null) {
          var result3 = result13;
        } else {
          if (input.substr(pos, 6) === "insert") {
            var result12 = "insert";
            pos += 6;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"insert\"");
            }
          }
          if (result12 !== null) {
            var result3 = result12;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result4.push(result11);
            var result11 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 4) === "DATA") {
              var result10 = "DATA";
              pos += 4;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"DATA\"");
              }
            }
            if (result10 !== null) {
              var result5 = result10;
            } else {
              if (input.substr(pos, 4) === "data") {
                var result9 = "data";
                pos += 4;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"data\"");
                }
              }
              if (result9 !== null) {
                var result5 = result9;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_QuadData();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'insertdata';
                query.token = 'executableunit'
                query.quads = qs;
          
                return query;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[36] InsertData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteData() {
        var cacheKey = 'DeleteData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result11 = "DELETE";
          pos += 6;
        } else {
          var result11 = null;
          if (reportMatchFailures) {
            matchFailed("\"DELETE\"");
          }
        }
        if (result11 !== null) {
          var result3 = result11;
        } else {
          if (input.substr(pos, 6) === "delete") {
            var result10 = "delete";
            pos += 6;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"delete\"");
            }
          }
          if (result10 !== null) {
            var result3 = result10;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result4.push(result9);
            var result9 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 4) === "DATA") {
              var result8 = "DATA";
              pos += 4;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"DATA\"");
              }
            }
            if (result8 !== null) {
              var result5 = result8;
            } else {
              if (input.substr(pos, 4) === "data") {
                var result7 = "data";
                pos += 4;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"data\"");
                }
              }
              if (result7 !== null) {
                var result5 = result7;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = parse_QuadData();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'deletedata';
                query.token = 'executableunit'
                query.quads = qs;
          
                return query;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[37] DeleteData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteWhere() {
        var cacheKey = 'DeleteWhere@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result13 = "DELETE";
          pos += 6;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"DELETE\"");
          }
        }
        if (result13 !== null) {
          var result3 = result13;
        } else {
          if (input.substr(pos, 6) === "delete") {
            var result12 = "delete";
            pos += 6;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"delete\"");
            }
          }
          if (result12 !== null) {
            var result3 = result12;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result4.push(result11);
            var result11 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 5) === "WHERE") {
              var result10 = "WHERE";
              pos += 5;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"WHERE\"");
              }
            }
            if (result10 !== null) {
              var result5 = result10;
            } else {
              if (input.substr(pos, 5) === "where") {
                var result9 = "where";
                pos += 5;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"where\"");
                }
              }
              if (result9 !== null) {
                var result5 = result9;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_GroupGraphPattern();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) {
                var query = {};
                query.kind = 'modify';
                query.pattern = p;
                query['with'] = null;
                query['using'] = null;
          
                var quads = [];
          
          
                var patternsCollection = p.patterns[0];
                if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
                    patternsCollection = patternsCollection.patterns[0].triplesContext;
                } else {
                    patternsCollection = patternsCollection.triplesContext;
                }
          
                for(var i=0; i<patternsCollection.length; i++) {
                    var quad = {};
                    var contextQuad = patternsCollection[i];
          
                    quad['subject'] = contextQuad['subject'];
                    quad['predicate'] = contextQuad['predicate'];
                    quad['object'] = contextQuad['object'];
                    quad['graph'] = contextQuad['graph'];
          
                    quads.push(quad);
                }
          
                query['delete'] = quads;
          
                return query;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[38] DeleteWhere");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Modify() {
        var cacheKey = 'Modify@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 4) === "WITH") {
          var result34 = "WITH";
          pos += 4;
        } else {
          var result34 = null;
          if (reportMatchFailures) {
            matchFailed("\"WITH\"");
          }
        }
        if (result34 !== null) {
          var result29 = result34;
        } else {
          if (input.substr(pos, 4) === "with") {
            var result33 = "with";
            pos += 4;
          } else {
            var result33 = null;
            if (reportMatchFailures) {
              matchFailed("\"with\"");
            }
          }
          if (result33 !== null) {
            var result29 = result33;
          } else {
            var result29 = null;;
          };
        }
        if (result29 !== null) {
          var result30 = [];
          var result32 = parse_WS();
          while (result32 !== null) {
            result30.push(result32);
            var result32 = parse_WS();
          }
          if (result30 !== null) {
            var result31 = parse_IRIref();
            if (result31 !== null) {
              var result28 = [result29, result30, result31];
            } else {
              var result28 = null;
              pos = savedPos3;
            }
          } else {
            var result28 = null;
            pos = savedPos3;
          }
        } else {
          var result28 = null;
          pos = savedPos3;
        }
        var result3 = result28 !== null ? result28 : '';
        if (result3 !== null) {
          var result4 = [];
          var result27 = parse_WS();
          while (result27 !== null) {
            result4.push(result27);
            var result27 = parse_WS();
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var result22 = parse_DeleteClause();
            if (result22 !== null) {
              var result23 = [];
              var result26 = parse_WS();
              while (result26 !== null) {
                result23.push(result26);
                var result26 = parse_WS();
              }
              if (result23 !== null) {
                var result25 = parse_InsertClause();
                var result24 = result25 !== null ? result25 : '';
                if (result24 !== null) {
                  var result21 = [result22, result23, result24];
                } else {
                  var result21 = null;
                  pos = savedPos2;
                }
              } else {
                var result21 = null;
                pos = savedPos2;
              }
            } else {
              var result21 = null;
              pos = savedPos2;
            }
            if (result21 !== null) {
              var result5 = result21;
            } else {
              var result20 = parse_InsertClause();
              if (result20 !== null) {
                var result5 = result20;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result19 = parse_WS();
              while (result19 !== null) {
                result6.push(result19);
                var result19 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = [];
                var result18 = parse_UsingClause();
                while (result18 !== null) {
                  result7.push(result18);
                  var result18 = parse_UsingClause();
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result17 = parse_WS();
                  while (result17 !== null) {
                    result8.push(result17);
                    var result17 = parse_WS();
                  }
                  if (result8 !== null) {
                    if (input.substr(pos, 5) === "WHERE") {
                      var result16 = "WHERE";
                      pos += 5;
                    } else {
                      var result16 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"WHERE\"");
                      }
                    }
                    if (result16 !== null) {
                      var result9 = result16;
                    } else {
                      if (input.substr(pos, 5) === "where") {
                        var result15 = "where";
                        pos += 5;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"where\"");
                        }
                      }
                      if (result15 !== null) {
                        var result9 = result15;
                      } else {
                        var result9 = null;;
                      };
                    }
                    if (result9 !== null) {
                      var result10 = [];
                      var result14 = parse_WS();
                      while (result14 !== null) {
                        result10.push(result14);
                        var result14 = parse_WS();
                      }
                      if (result10 !== null) {
                        var result11 = parse_GroupGraphPattern();
                        if (result11 !== null) {
                          var result12 = [];
                          var result13 = parse_WS();
                          while (result13 !== null) {
                            result12.push(result13);
                            var result13 = parse_WS();
                          }
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(wg, dic, uc, p) {
                var query = {};
                query.kind = 'modify';
          
                if(wg != "") {
                    query['with'] = wg[2];
                } else {
                    query['with'] = null;
                }
          
          
                if(dic.length === 3 && dic[2] === '') {
                    query['delete'] = dic[0];
                    query.insert = null;
                } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
                    query['delete'] = dic[0];
                    query.insert = dic[2];
                } else  {
                    query.insert = dic;
                    query['delete'] = null;
                }
          
                if(uc != '') {
                    query['using'] = uc;
                }
          
                query.pattern = p;
          
                return query;
          })(result1[0], result1[2], result1[4], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[39] Modify");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteClause() {
        var cacheKey = 'DeleteClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "DELETE") {
          var result6 = "DELETE";
          pos += 6;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"DELETE\"");
          }
        }
        if (result6 !== null) {
          var result3 = result6;
        } else {
          if (input.substr(pos, 6) === "delete") {
            var result5 = "delete";
            pos += 6;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"delete\"");
            }
          }
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_QuadPattern();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(q) {
                return q;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[40] DeleteClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_InsertClause() {
        var cacheKey = 'InsertClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "INSERT") {
          var result6 = "INSERT";
          pos += 6;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"INSERT\"");
          }
        }
        if (result6 !== null) {
          var result3 = result6;
        } else {
          if (input.substr(pos, 6) === "insert") {
            var result5 = "insert";
            pos += 6;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"insert\"");
            }
          }
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_QuadPattern();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(q) {
            return q;
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[41] InsertClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UsingClause() {
        var cacheKey = 'UsingClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result18 = parse_WS();
        while (result18 !== null) {
          result3.push(result18);
          var result18 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 5) === "USING") {
            var result17 = "USING";
            pos += 5;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"USING\"");
            }
          }
          if (result17 !== null) {
            var result4 = result17;
          } else {
            if (input.substr(pos, 5) === "using") {
              var result16 = "using";
              pos += 5;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"using\"");
              }
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result15 = parse_WS();
            while (result15 !== null) {
              result5.push(result15);
              var result15 = parse_WS();
            }
            if (result5 !== null) {
              var result14 = parse_IRIref();
              if (result14 !== null) {
                var result6 = result14;
              } else {
                var savedPos2 = pos;
                if (input.substr(pos, 5) === "NAMED") {
                  var result13 = "NAMED";
                  pos += 5;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"NAMED\"");
                  }
                }
                if (result13 !== null) {
                  var result8 = result13;
                } else {
                  if (input.substr(pos, 5) === "named") {
                    var result12 = "named";
                    pos += 5;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"named\"");
                    }
                  }
                  if (result12 !== null) {
                    var result8 = result12;
                  } else {
                    var result8 = null;;
                  };
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result11 = parse_WS();
                  while (result11 !== null) {
                    result9.push(result11);
                    var result11 = parse_WS();
                  }
                  if (result9 !== null) {
                    var result10 = parse_IRIref();
                    if (result10 !== null) {
                      var result7 = [result8, result9, result10];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                if (result7 !== null) {
                  var result6 = result7;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(g) {
                if(g.length!=null) {
                    return {kind: 'named', uri: g[2]};
                } else {
                    return {kind: 'default', uri: g};
                }
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[42] UsingClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphRef() {
        var cacheKey = 'GraphRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "GRAPH") {
          var result8 = "GRAPH";
          pos += 5;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"GRAPH\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 5) === "graph") {
            var result7 = "graph";
            pos += 5;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"graph\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_WS();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_IRIref();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i) {
                return i;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[43] GraphRef");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphRefAll() {
        var cacheKey = 'GraphRefAll@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        var result17 = parse_GraphRef();
        var result18 = result17 !== null
          ? (function(g) {
                return g;
          })(result17)
          : null;
        if (result18 !== null) {
          var result16 = result18;
        } else {
          var result16 = null;
          pos = savedPos3;
        }
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 7) === "DEFAULT") {
            var result15 = "DEFAULT";
            pos += 7;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"DEFAULT\"");
            }
          }
          if (result15 !== null) {
            var result12 = result15;
          } else {
            if (input.substr(pos, 7) === "default") {
              var result14 = "default";
              pos += 7;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"default\"");
              }
            }
            if (result14 !== null) {
              var result12 = result14;
            } else {
              var result12 = null;;
            };
          }
          var result13 = result12 !== null
            ? (function() {
                  return 'default';
            })()
            : null;
          if (result13 !== null) {
            var result11 = result13;
          } else {
            var result11 = null;
            pos = savedPos2;
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 5) === "NAMED") {
              var result10 = "NAMED";
              pos += 5;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"NAMED\"");
              }
            }
            if (result10 !== null) {
              var result7 = result10;
            } else {
              if (input.substr(pos, 5) === "named") {
                var result9 = "named";
                pos += 5;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"named\"");
                }
              }
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result7 = null;;
              };
            }
            var result8 = result7 !== null
              ? (function() {
                    return 'named';
              })()
              : null;
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 3) === "ALL") {
                var result5 = "ALL";
                pos += 3;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ALL\"");
                }
              }
              if (result5 !== null) {
                var result2 = result5;
              } else {
                if (input.substr(pos, 3) === "all") {
                  var result4 = "all";
                  pos += 3;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"all\"");
                  }
                }
                if (result4 !== null) {
                  var result2 = result4;
                } else {
                  var result2 = null;;
                };
              }
              var result3 = result2 !== null
                ? (function() {
                      return 'all';
                })()
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[44] GraphRefAll");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadPattern() {
        var cacheKey = 'QuadPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result5.push(result12);
              var result12 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_Quads();
              if (result6 !== null) {
                var result7 = [];
                var result11 = parse_WS();
                while (result11 !== null) {
                  result7.push(result11);
                  var result11 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[45] QuadPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadData() {
        var cacheKey = 'QuadData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result5.push(result12);
              var result12 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_Quads();
              if (result6 !== null) {
                var result7 = [];
                var result11 = parse_WS();
                while (result11 !== null) {
                  result7.push(result11);
                  var result11 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[46] QuadData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Quads() {
        var cacheKey = 'Quads@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result11 = parse_TriplesTemplate();
        var result3 = result11 !== null ? result11 : '';
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse_QuadsNotTriples();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result10 = ".";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            var result7 = result10 !== null ? result10 : '';
            if (result7 !== null) {
              var result9 = parse_TriplesTemplate();
              var result8 = result9 !== null ? result9 : '';
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse_QuadsNotTriples();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result10 = ".";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              var result7 = result10 !== null ? result10 : '';
              if (result7 !== null) {
                var result9 = parse_TriplesTemplate();
                var result8 = result9 !== null ? result9 : '';
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ts, qs) {
                var quads = []
                if(ts.triplesContext != null && ts.triplesContext != null) {
                  for(var i=0; i<ts.triplesContext.length; i++) {
                      var triple = ts.triplesContext[i]
                      triple.graph = null;
                      quads.push(triple)
                  }
                }
          
                if(qs && qs.length>0 && qs[0].length > 0) {
                    quads = quads.concat(qs[0][0].quadsContext);
          
                    if( qs[0][2] != null && qs[0][2].triplesContext != null) {
                      for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                          var triple = qs[0][2].triplesContext[i]
                          triple.graph = null;
                          quads.push(triple)
                      }
                    }
                }
          
                return {token:'quads',
                        quadsContext: quads}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[47] Quads");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadsNotTriples() {
        var cacheKey = 'QuadsNotTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result22 = parse_WS();
        while (result22 !== null) {
          result3.push(result22);
          var result22 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 5) === "GRAPH") {
            var result21 = "GRAPH";
            pos += 5;
          } else {
            var result21 = null;
            if (reportMatchFailures) {
              matchFailed("\"GRAPH\"");
            }
          }
          if (result21 !== null) {
            var result4 = result21;
          } else {
            if (input.substr(pos, 5) === "graph") {
              var result20 = "graph";
              pos += 5;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"graph\"");
              }
            }
            if (result20 !== null) {
              var result4 = result20;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result19 = parse_WS();
            while (result19 !== null) {
              result5.push(result19);
              var result19 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_VarOrIRIref();
              if (result6 !== null) {
                var result7 = [];
                var result18 = parse_WS();
                while (result18 !== null) {
                  result7.push(result18);
                  var result18 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "{") {
                    var result8 = "{";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"{\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result17 = parse_WS();
                    while (result17 !== null) {
                      result9.push(result17);
                      var result17 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result16 = parse_TriplesTemplate();
                      var result10 = result16 !== null ? result16 : '';
                      if (result10 !== null) {
                        var result11 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                          result11.push(result15);
                          var result15 = parse_WS();
                        }
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === "}") {
                            var result12 = "}";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"}\"");
                            }
                          }
                          if (result12 !== null) {
                            var result13 = [];
                            var result14 = parse_WS();
                            while (result14 !== null) {
                              result13.push(result14);
                              var result14 = parse_WS();
                            }
                            if (result13 !== null) {
                              var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(g, ts) {
                var quads = []
                for(var i=0; i<ts.triplesContext.length; i++) {
                    var triple = ts.triplesContext[i]
                    triple.graph = g;
                    quads.push(triple)
                }
          
                return {token:'quadsnottriples',
                        quadsContext: quads}
          })(result1[3], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[48] QuadsNotTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesTemplate() {
        var cacheKey = 'TriplesTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_TriplesSameSubject();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result6.push(result12);
            var result12 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result7 = ".";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result11 = parse_WS();
              while (result11 !== null) {
                result8.push(result11);
                var result11 = parse_WS();
              }
              if (result8 !== null) {
                var result10 = parse_TriplesTemplate();
                var result9 = result10 !== null ? result10 : '';
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[3].triplesContext!=null) {
                               triples = triples.concat(bs[3].triplesContext);
                        }
                     }
                }
          
               return {token:'triplestemplate',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[49] TriplesTemplate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupGraphPattern() {
        var cacheKey = 'GroupGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos, 1) === "{") {
          var result14 = "{";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result14 !== null) {
          var result15 = [];
          var result20 = parse_WS();
          while (result20 !== null) {
            result15.push(result20);
            var result20 = parse_WS();
          }
          if (result15 !== null) {
            var result16 = parse_SubSelect();
            if (result16 !== null) {
              var result17 = [];
              var result19 = parse_WS();
              while (result19 !== null) {
                result17.push(result19);
                var result19 = parse_WS();
              }
              if (result17 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result18 = "}";
                  pos += 1;
                } else {
                  var result18 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result18 !== null) {
                  var result12 = [result14, result15, result16, result17, result18];
                } else {
                  var result12 = null;
                  pos = savedPos3;
                }
              } else {
                var result12 = null;
                pos = savedPos3;
              }
            } else {
              var result12 = null;
              pos = savedPos3;
            }
          } else {
            var result12 = null;
            pos = savedPos3;
          }
        } else {
          var result12 = null;
          pos = savedPos3;
        }
        var result13 = result12 !== null
          ? (function(p) {
                return p;
          })(result12[2])
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos2;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "{") {
            var result4 = "{";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_GroupGraphPatternSub();
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result8 = "}";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(p) {
                  return p;
            })(result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[50] GroupGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupGraphPatternSub() {
        var cacheKey = 'GroupGraphPatternSub@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result17 = parse_TriplesBlock();
        var result3 = result17 !== null ? result17 : '';
        if (result3 !== null) {
          var result4 = [];
          var result16 = parse_WS();
          while (result16 !== null) {
            result4.push(result16);
            var result16 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            var result7 = parse_GraphPatternNotTriples();
            if (result7 !== null) {
              var result8 = [];
              var result15 = parse_WS();
              while (result15 !== null) {
                result8.push(result15);
                var result15 = parse_WS();
              }
              if (result8 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result14 = ".";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                var result9 = result14 !== null ? result14 : '';
                if (result9 !== null) {
                  var result10 = [];
                  var result13 = parse_WS();
                  while (result13 !== null) {
                    result10.push(result13);
                    var result13 = parse_WS();
                  }
                  if (result10 !== null) {
                    var result12 = parse_TriplesBlock();
                    var result11 = result12 !== null ? result12 : '';
                    if (result11 !== null) {
                      var result6 = [result7, result8, result9, result10, result11];
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              var result7 = parse_GraphPatternNotTriples();
              if (result7 !== null) {
                var result8 = [];
                var result15 = parse_WS();
                while (result15 !== null) {
                  result8.push(result15);
                  var result15 = parse_WS();
                }
                if (result8 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result14 = ".";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  var result9 = result14 !== null ? result14 : '';
                  if (result9 !== null) {
                    var result10 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                      result10.push(result13);
                      var result13 = parse_WS();
                    }
                    if (result10 !== null) {
                      var result12 = parse_TriplesBlock();
                      var result11 = result12 !== null ? result12 : '';
                      if (result11 !== null) {
                        var result6 = [result7, result8, result9, result10, result11];
                      } else {
                        var result6 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(tb, tbs) {
                var subpatterns = [];
                if(tb != null && tb != []) {
                    subpatterns.push(tb);
                }
          
                for(var i=0; i<tbs.length; i++) {
                    for(var j=0; j< tbs[i].length; j++) {
                        if(tbs[i][j].token != null) {
                            subpatterns.push(tbs[i][j]);
                        }
                    }
                }
          
                var compactedSubpatterns = [];
          
                var currentBasicGraphPatterns = [];
                var currentFilters = [];
          
                for(var i=0; i<subpatterns.length; i++) {
                    if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                        if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                            var triplesContext = [];
                            for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                                triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                            }
                            if(triplesContext.length > 0) {  
                                compactedSubpatterns.push({token: 'basicgraphpattern',
                                                           triplesContext: triplesContext});
                            }
                            currentBasicGraphPatterns = [];
                        }
                        compactedSubpatterns.push(subpatterns[i]);
                    } else {
                        if(subpatterns[i].token === 'triplespattern') {
                            currentBasicGraphPatterns.push(subpatterns[i]);
                        } else {
                            currentFilters.push(subpatterns[i]);
                        }
                    }
                }
          
                if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                    var triplesContext = [];
                    for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                        triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                    }
                    if(triplesContext.length > 0) {
                      compactedSubpatterns.push({token: 'basicgraphpattern',
                                                 triplesContext: triplesContext});
                    }
                }
          
          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
                    return { token: 'groupgraphpattern',
                             patterns: compactedSubpatterns,
                             filters: currentFilters }
          //      }
          })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[51] GroupGraphPatternSub");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesBlock() {
        var cacheKey = 'TriplesBlock@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_TriplesSameSubjectPath();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result6.push(result10);
            var result10 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result7 = ".";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result7 !== null) {
              var result9 = parse_TriplesBlock();
              var result8 = result9 !== null ? result9 : '';
              if (result8 !== null) {
                var result5 = [result6, result7, result8];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[2].triplesContext!=null) {
                               triples = triples.concat(bs[2].triplesContext);
                        }
                     }
                }
          
               return {token:'triplespattern',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[54] TriplesBlock");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphPatternNotTriples() {
        var cacheKey = 'GraphPatternNotTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_GroupOrUnionGraphPattern();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_OptionalGraphPattern();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_MinusGraphPattern();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_GraphGraphPattern();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_ServiceGraphPattern();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Filter();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[53] GraphPatternNotTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OptionalGraphPattern() {
        var cacheKey = 'OptionalGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result8 = parse_WS();
        while (result8 !== null) {
          result3.push(result8);
          var result8 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 8) === "OPTIONAL") {
            var result4 = "OPTIONAL";
            pos += 8;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"OPTIONAL\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result7 = parse_WS();
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_GroupGraphPattern();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) {
                return { token: 'optionalgraphpattern',
                         value: v }
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[54] OptionalGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphGraphPattern() {
        var cacheKey = 'GraphGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 5) === "GRAPH") {
            var result12 = "GRAPH";
            pos += 5;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"GRAPH\"");
            }
          }
          if (result12 !== null) {
            var result4 = result12;
          } else {
            if (input.substr(pos, 5) === "graph") {
              var result11 = "graph";
              pos += 5;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"graph\"");
              }
            }
            if (result11 !== null) {
              var result4 = result11;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_VarOrIRIref();
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_GroupGraphPattern();
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(g, gg) {
                for(var i=0; i<gg.patterns.length; i++) {
                  var quads = []
                  var ts = gg.patterns[i];
                  for(var j=0; j<ts.triplesContext.length; j++) {
                      var triple = ts.triplesContext[j]
                      triple.graph = g;
                  }
                }
          
                gg.token = 'groupgraphpattern'
                return gg;
          })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[55] GraphGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ServiceGraphPattern() {
        var cacheKey = 'ServiceGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 7) === "SERVICE") {
          var result3 = "SERVICE";
          pos += 7;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"SERVICE\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_VarOrIRIref();
          if (result4 !== null) {
            var result5 = parse_GroupGraphPattern();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v, ts) {
                return {token: 'servicegraphpattern',
                        status: 'todo',
                        value: [v,ts] }
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[56] ServiceGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MinusGraphPattern() {
        var cacheKey = 'MinusGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "MINUS") {
          var result3 = "MINUS";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"MINUS\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_GroupGraphPattern();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ts) {
                return {token: 'minusgraphpattern',
                        status: 'todo',
                        value: ts}
          })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[57] MinusGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupOrUnionGraphPattern() {
        var cacheKey = 'GroupOrUnionGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_GroupGraphPattern();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = [];
          var result13 = parse_WS();
          while (result13 !== null) {
            result6.push(result13);
            var result13 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 5) === "UNION") {
              var result12 = "UNION";
              pos += 5;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"UNION\"");
              }
            }
            if (result12 !== null) {
              var result7 = result12;
            } else {
              if (input.substr(pos, 5) === "union") {
                var result11 = "union";
                pos += 5;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"union\"");
                }
              }
              if (result11 !== null) {
                var result7 = result11;
              } else {
                var result7 = null;;
              };
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_WS();
              }
              if (result8 !== null) {
                var result9 = parse_GroupGraphPattern();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = [];
            var result13 = parse_WS();
            while (result13 !== null) {
              result6.push(result13);
              var result13 = parse_WS();
            }
            if (result6 !== null) {
              if (input.substr(pos, 5) === "UNION") {
                var result12 = "UNION";
                pos += 5;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"UNION\"");
                }
              }
              if (result12 !== null) {
                var result7 = result12;
              } else {
                if (input.substr(pos, 5) === "union") {
                  var result11 = "union";
                  pos += 5;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"union\"");
                  }
                }
                if (result11 !== null) {
                  var result7 = result11;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var result8 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result8.push(result10);
                  var result10 = parse_WS();
                }
                if (result8 !== null) {
                  var result9 = parse_GroupGraphPattern();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a, b) {
                if(b.length === 0) {
                    return a;
                } else {
          
                    var lastToken = {token: 'graphunionpattern',
                                     value: [a]};
          
                    for(var i=0; i<b.length; i++) {
                        if(i==b.length-1) {
                            lastToken.value.push(b[i][3]);
                        } else {
                            lastToken.value.push(b[i][3]);
                            var newToken = {token: 'graphunionpattern',
                                            value: [lastToken]}
          
                            lastToken = newToken;
                        }
                    }
          
                    return lastToken;
          
                }
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[58] GroupOrUnionGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Filter() {
        var cacheKey = 'Filter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result10 = parse_WS();
        while (result10 !== null) {
          result3.push(result10);
          var result10 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 6) === "FILTER") {
            var result9 = "FILTER";
            pos += 6;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"FILTER\"");
            }
          }
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos, 6) === "filter") {
              var result8 = "filter";
              pos += 6;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"filter\"");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              var result4 = null;;
            };
          }
          if (result4 !== null) {
            var result5 = [];
            var result7 = parse_WS();
            while (result7 !== null) {
              result5.push(result7);
              var result7 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_Constraint();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(c) {
                return {token: 'filter',
                        value: c}
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[59] Filter");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Constraint() {
        var cacheKey = 'Constraint@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_BrackettedExpression();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_BuiltInCall();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_FunctionCall();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[60] Constraint");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionCall() {
        var cacheKey = 'FunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IRIref();
        if (result3 !== null) {
          var result4 = parse_ArgList();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i, args) {
                var fcall = {};
                fcall.token = "expression";
                fcall.expressionType = 'irireforfunction'
                fcall.iriref = i;
                fcall.args = args.value;
          
                return fcall;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[61] FunctionCall");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArgList() {
        var cacheKey = 'ArgList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        var result16 = parse_NIL();
        var result17 = result16 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result17 !== null) {
          var result15 = result17;
        } else {
          var result15 = null;
          pos = savedPos3;
        }
        if (result15 !== null) {
          var result0 = result15;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 8) === "DISTINCT") {
              var result14 = "DISTINCT";
              pos += 8;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"DISTINCT\"");
              }
            }
            if (result14 !== null) {
              var result12 = result14;
            } else {
              if (input.substr(pos, 8) === "distinct") {
                var result13 = "distinct";
                pos += 8;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"distinct\"");
                }
              }
              if (result13 !== null) {
                var result12 = result13;
              } else {
                var result12 = null;;
              };
            }
            var result5 = result12 !== null ? result12 : '';
            if (result5 !== null) {
              var result6 = parse_ConditionalOrExpression();
              if (result6 !== null) {
                var result7 = [];
                var savedPos2 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result10 = ",";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result10 !== null) {
                  var result11 = parse_ConditionalOrExpression();
                  if (result11 !== null) {
                    var result9 = [result10, result11];
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
                while (result9 !== null) {
                  result7.push(result9);
                  var savedPos2 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result10 = ",";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result10 !== null) {
                    var result11 = parse_ConditionalOrExpression();
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result2 = [result4, result5, result6, result7, result8];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(d, e, es) {
                  cleanEx = [];
            
                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);
            
                  if(d!=null && d.toUpperCase()==="DISTINCT") {
                      args.distinct = true;
                  } else {
                      args.distinct = false;
                  }
            
                  return args;
            })(result2[1], result2[2], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[62] ArgList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExpressionList() {
        var cacheKey = 'ExpressionList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        var result12 = parse_NIL();
        var result13 = result12 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_ConditionalOrExpression();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result9 = ",";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_ConditionalOrExpression();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result6.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result9 = ",";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_ConditionalOrExpression();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(e, es) {
                  cleanEx = [];
            
                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);
            
                  return args;
            })(result2[1], result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[63] ExpressionList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructTemplate() {
        var cacheKey = 'ConstructTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result4.push(result10);
            var result10 = parse_WS();
          }
          if (result4 !== null) {
            var result9 = parse_ConstructTriples();
            var result5 = result9 !== null ? result9 : '';
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result7 = "}";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ts) {
                return ts;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[64] ConstructTemplate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructTriples() {
        var cacheKey = 'ConstructTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_TriplesSameSubject();
        if (result3 !== null) {
          var savedPos2 = pos;
          var result6 = [];
          var result12 = parse_WS();
          while (result12 !== null) {
            result6.push(result12);
            var result12 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result7 = ".";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result11 = parse_WS();
              while (result11 !== null) {
                result8.push(result11);
                var result11 = parse_WS();
              }
              if (result8 !== null) {
                var result10 = parse_ConstructTriples();
                var result9 = result10 !== null ? result10 : '';
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[3].triplesContext!=null) {
                               triples = triples.concat(bs[3].triplesContext);
                        }
                     }
                }
          
               return {token:'triplestemplate',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[65] ConstructTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesSameSubject() {
        var cacheKey = 'TriplesSameSubject@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result13 = [];
        var result18 = parse_WS();
        while (result18 !== null) {
          result13.push(result18);
          var result18 = parse_WS();
        }
        if (result13 !== null) {
          var result14 = parse_VarOrTerm();
          if (result14 !== null) {
            var result15 = [];
            var result17 = parse_WS();
            while (result17 !== null) {
              result15.push(result17);
              var result17 = parse_WS();
            }
            if (result15 !== null) {
              var result16 = parse_PropertyListNotEmpty();
              if (result16 !== null) {
                var result11 = [result13, result14, result15, result16];
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
          	    if(pair[1].length != null)
          	      pair[1] = pair[1][0]
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
                }
          
                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;
          
                return token;
            })(result11[1], result11[3])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result4.push(result9);
            var result9 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_TriplesNode();
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_PropertyList();
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = tn.triplesContext;
                  var subject = tn.chainSubject;
            
                  if(pairs.pairs) {
                    for(var i=0; i< pairs.pairs.length; i++) {
                        var pair = pairs.pairs[i];
                        if(pair[1].length != null)
            	      pair[1] = pair[1][0]
            
                        if(tn.token === "triplesnodecollection") {
                            for(var j=0; j<subject.length; j++) {
                                var subj = subject[j];
                                if(subj.triplesContext != null) {
                                    var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                    triplesContext.concat(subj.triplesContext);
                                } else {
                                    var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        } else {
                            var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                            triplesContext.push(triple);
                        }
                    }
                  }
            
                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;
            
                  return token;
              })(result2[1], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[66] TriplesSameSubject");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmpty() {
        var cacheKey = 'PropertyListNotEmpty@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Verb();
        if (result3 !== null) {
          var result4 = [];
          var result19 = parse_WS();
          while (result19 !== null) {
            result4.push(result19);
            var result19 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_ObjectList();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var result8 = [];
              var result18 = parse_WS();
              while (result18 !== null) {
                result8.push(result18);
                var result18 = parse_WS();
              }
              if (result8 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result9 = ";";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = [];
                  var result17 = parse_WS();
                  while (result17 !== null) {
                    result10.push(result17);
                    var result17 = parse_WS();
                  }
                  if (result10 !== null) {
                    var savedPos3 = pos;
                    var result13 = parse_Verb();
                    if (result13 !== null) {
                      var result14 = [];
                      var result16 = parse_WS();
                      while (result16 !== null) {
                        result14.push(result16);
                        var result16 = parse_WS();
                      }
                      if (result14 !== null) {
                        var result15 = parse_ObjectList();
                        if (result15 !== null) {
                          var result12 = [result13, result14, result15];
                        } else {
                          var result12 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                    var result11 = result12 !== null ? result12 : '';
                    if (result11 !== null) {
                      var result7 = [result8, result9, result10, result11];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var result8 = [];
                var result18 = parse_WS();
                while (result18 !== null) {
                  result8.push(result18);
                  var result18 = parse_WS();
                }
                if (result8 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result9 = ";";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result9 !== null) {
                    var result10 = [];
                    var result17 = parse_WS();
                    while (result17 !== null) {
                      result10.push(result17);
                      var result17 = parse_WS();
                    }
                    if (result10 !== null) {
                      var savedPos3 = pos;
                      var result13 = parse_Verb();
                      if (result13 !== null) {
                        var result14 = [];
                        var result16 = parse_WS();
                        while (result16 !== null) {
                          result14.push(result16);
                          var result16 = parse_WS();
                        }
                        if (result14 !== null) {
                          var result15 = parse_ObjectList();
                          if (result15 !== null) {
                            var result12 = [result13, result14, result15];
                          } else {
                            var result12 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result12 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos3;
                      }
                      var result11 = result12 !== null ? result12 : '';
                      if (result11 !== null) {
                        var result7 = [result8, result9, result10, result11];
                      } else {
                        var result7 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];
          
                for( var i=0; i<ol.length; i++) {
          
                   if(ol[i].triplesContext != null) {
                       triplesContext = triplesContext.concat(ol[i].triplesContext);
                       if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                           pairs.push([v, ol[i].chainSubject[0]]);
                       } else {
                           pairs.push([v, ol[i].chainSubject]);
                       }
          
                    } else {
                        pairs.push([v, ol[i]])
                    }
          
                }
          
          
                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[2] || [];
          
                    for(var j=0; j<newObjsList.length; j++) {
                     if(newObjsList[j].triplesContext != null) {
                        triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                       pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                        pairs.push([newVerb, newObjsList[j]])
                      }
                    }
                }
          
                token.pairs = pairs;
                token.triplesContext = triplesContext;
          
                return token;
          
          })(result1[0], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[67] PropertyListNotEmpty");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyList() {
        var cacheKey = 'PropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[68] PropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ObjectList() {
        var cacheKey = 'ObjectList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_GraphNode();
        if (result3 !== null) {
          var result4 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result4.push(result11);
            var result11 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_WS();
              }
              if (result8 !== null) {
                var result9 = parse_GraphNode();
                if (result9 !== null) {
                  var result6 = [result7, result8, result9];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result8.push(result10);
                  var result10 = parse_WS();
                }
                if (result8 !== null) {
                  var result9 = parse_GraphNode();
                  if (result9 !== null) {
                    var result6 = [result7, result8, result9];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(obj, objs) {
          
                  var toReturn = [];
          
                  toReturn.push(obj);
          
                  for(var i=0; i<objs.length; i++) {
                      for(var j=0; j<objs[i].length; j++) {
                          if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                              toReturn.push(objs[i][j]);
                          }
                      }
                  }
          
                  return toReturn;
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[69] ObjectList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Verb() {
        var cacheKey = 'Verb@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_VarOrIRIref();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "a") {
            var result2 = "a";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          var result3 = result2 !== null
            ? (function() {
                  return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
              })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[71] Verb");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesSameSubjectPath() {
        var cacheKey = 'TriplesSameSubjectPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result13 = [];
        var result18 = parse_WS();
        while (result18 !== null) {
          result13.push(result18);
          var result18 = parse_WS();
        }
        if (result13 !== null) {
          var result14 = parse_VarOrTerm();
          if (result14 !== null) {
            var result15 = [];
            var result17 = parse_WS();
            while (result17 !== null) {
              result15.push(result17);
              var result17 = parse_WS();
            }
            if (result15 !== null) {
              var result16 = parse_PropertyListNotEmptyPath();
              if (result16 !== null) {
                var result11 = [result13, result14, result15, result16];
              } else {
                var result11 = null;
                pos = savedPos3;
              }
            } else {
              var result11 = null;
              pos = savedPos3;
            }
          } else {
            var result11 = null;
            pos = savedPos3;
          }
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        var result12 = result11 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
          	    if(pair[1].length != null)
          	      pair[1] = pair[1][0]
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
                }
          
                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;
          
                return token;
            })(result11[1], result11[3])
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result4.push(result9);
            var result9 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_TriplesNode();
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_PropertyListPath();
                if (result7 !== null) {
                  var result2 = [result4, result5, result6, result7];
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = tn.triplesContext;
                  var subject = tn.chainSubject;
            
                  if(pairs.pairs) {
                    for(var i=0; i< pairs.pairs.length; i++) {
                        var pair = pairs.pairs[i];
                        if(pair[1].length != null)
            	      pair[1] = pair[1][0]
            
                        if(tn.token === "triplesnodecollection") {
                            for(var j=0; j<subject.length; j++) {
                                var subj = subject[j];
                                if(subj.triplesContext != null) {
                                    var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                    triplesContext.concat(subj.triplesContext);
                                } else {
                                    var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        } else {
                            var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                            triplesContext.push(triple);
                        }
                    }
                  }
            
                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;
            
                  return token;
            
                })(result2[1], result2[3])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[72] TriplesSameSubjectPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmptyPath() {
        var cacheKey = 'PropertyListNotEmptyPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result21 = parse_VerbPath();
        if (result21 !== null) {
          var result3 = result21;
        } else {
          var result20 = parse_Var();
          if (result20 !== null) {
            var result3 = result20;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result19 = parse_WS();
          while (result19 !== null) {
            result4.push(result19);
            var result19 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_ObjectList();
            if (result5 !== null) {
              var result6 = [];
              var savedPos2 = pos;
              var result8 = [];
              var result18 = parse_WS();
              while (result18 !== null) {
                result8.push(result18);
                var result18 = parse_WS();
              }
              if (result8 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result9 = ";";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = [];
                  var result17 = parse_WS();
                  while (result17 !== null) {
                    result10.push(result17);
                    var result17 = parse_WS();
                  }
                  if (result10 !== null) {
                    var savedPos3 = pos;
                    var result16 = parse_VerbPath();
                    if (result16 !== null) {
                      var result13 = result16;
                    } else {
                      var result15 = parse_Var();
                      if (result15 !== null) {
                        var result13 = result15;
                      } else {
                        var result13 = null;;
                      };
                    }
                    if (result13 !== null) {
                      var result14 = parse_ObjectList();
                      if (result14 !== null) {
                        var result12 = [result13, result14];
                      } else {
                        var result12 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                    var result11 = result12 !== null ? result12 : '';
                    if (result11 !== null) {
                      var result7 = [result8, result9, result10, result11];
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              while (result7 !== null) {
                result6.push(result7);
                var savedPos2 = pos;
                var result8 = [];
                var result18 = parse_WS();
                while (result18 !== null) {
                  result8.push(result18);
                  var result18 = parse_WS();
                }
                if (result8 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result9 = ";";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result9 !== null) {
                    var result10 = [];
                    var result17 = parse_WS();
                    while (result17 !== null) {
                      result10.push(result17);
                      var result17 = parse_WS();
                    }
                    if (result10 !== null) {
                      var savedPos3 = pos;
                      var result16 = parse_VerbPath();
                      if (result16 !== null) {
                        var result13 = result16;
                      } else {
                        var result15 = parse_Var();
                        if (result15 !== null) {
                          var result13 = result15;
                        } else {
                          var result13 = null;;
                        };
                      }
                      if (result13 !== null) {
                        var result14 = parse_ObjectList();
                        if (result14 !== null) {
                          var result12 = [result13, result14];
                        } else {
                          var result12 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos3;
                      }
                      var result11 = result12 !== null ? result12 : '';
                      if (result11 !== null) {
                        var result7 = [result8, result9, result10, result11];
                      } else {
                        var result7 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];
          
                for( var i=0; i<ol.length; i++) {
          
                   if(ol[i].triplesContext != null) {
                       triplesContext = triplesContext.concat(ol[i].triplesContext);
                       if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                           pairs.push([v, ol[i].chainSubject[0]]);
                       } else {
                           pairs.push([v, ol[i].chainSubject]);
                       }
          
                    } else {
                        pairs.push([v, ol[i]])
                    }
          
                }
          
          
                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[1] || [];
          
                    for(var j=0; j<newObjsList.length; j++) {
                     if(newObjsList[j].triplesContext != null) {
                        triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                       pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                        pairs.push([newVerb, newObjsList[j]])
                      }
                    }
                }
          
                token.pairs = pairs;
                token.triplesContext = triplesContext;
          
                return token;
          })(result1[0], result1[2], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[73] PropertyListNotEmptyPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListPath() {
        var cacheKey = 'PropertyListPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[74] PropertyListPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VerbPath() {
        var cacheKey = 'VerbPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathAlternative();
        var result2 = result1 !== null
          ? (function(p) {
                var path = {};
                path.token = 'path';
                path.kind = 'element';
                path.value = p;
          
                return p;
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[75]");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathAlternative() {
        var cacheKey = 'PathAlternative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PathSequence();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "|") {
            var result6 = "|";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_PathSequence();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "|") {
              var result6 = "|";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_PathSequence();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) {
          	if(rest == null || rest.length === 0) {
          	    return first;
          	} else {
          	    var acum = [];
          	    for(var i=0; i<rest.length; i++)
          		acum.push(rest[1]);
          
          	    var path = {};
          	    path.token = 'path';
          	    path.kind = 'alternative';
          	    path.value = acum;
          
          	    return path;
          	}
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[78] PathAlternative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathSequence() {
        var cacheKey = 'PathSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PathEltOrInverse();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "/") {
            var result6 = "/";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result6 !== null) {
            var result7 = parse_PathEltOrInverse();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "/") {
              var result6 = "/";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_PathEltOrInverse();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) {
          	if(rest == null || rest.length === 0) {
          	    return first;
          	} else {
          	    var acum = [first];
          
          	    for(var i=0; i<rest.length; i++) 
          		acum.push(rest[i][1]);
          
          	    var path = {};
          	    path.token = 'path';
          	    path.kind = 'sequence';
          	
          	    path.value = acum;
          		
          	    return path;
          	}
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[79] PathSequence");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathElt() {
        var cacheKey = 'PathElt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PathPrimary();
        if (result3 !== null) {
          var result5 = parse_PathMod();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, mod) {
          	if(p.token && p.token != 'path' && mod == '') {
          	    return p;
          	} else if(p.token && p.token != path && mod != '') {
          	    var path = {};
          	    path.token = 'path';
          	    path.kind = 'element';
          	    path.value = p;
          	    path.modifier = mod;
          	    return path;
          	} else {
          	    p.modifier = mod;
          	    return p;
          	}
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] PathElt");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathEltOrInverse() {
        var cacheKey = 'PathEltOrInverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_PathElt();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "^") {
            var result4 = "^";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathElt();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(elt) {
            	var path = {};
            	path.token = 'path';
            	path.kind = 'inversePath';
            	path.value = elt;
            
            	return path;
                })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[81] PathEltOrInverse");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathMod() {
        var cacheKey = 'PathMod@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "*") {
          var result21 = "*";
          pos += 1;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          if (input.substr(pos, 1) === "?") {
            var result20 = "?";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"?\"");
            }
          }
          if (result20 !== null) {
            var result0 = result20;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result19 = "+";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "{") {
                var result2 = "{";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"{\"");
                }
              }
              if (result2 !== null) {
                var savedPos2 = pos;
                var result9 = parse_INTEGER();
                if (result9 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result13 = ",";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result13 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result18 = "}";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result18 !== null) {
                      var result14 = result18;
                    } else {
                      var savedPos4 = pos;
                      var result16 = parse_INTEGER();
                      if (result16 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result17 = "}";
                          pos += 1;
                        } else {
                          var result17 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result17 !== null) {
                          var result15 = [result16, result17];
                        } else {
                          var result15 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos4;
                      }
                      if (result15 !== null) {
                        var result14 = result15;
                      } else {
                        var result14 = null;;
                      };
                    }
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    if (input.substr(pos, 1) === "}") {
                      var result11 = "}";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result11 !== null) {
                      var result10 = result11;
                    } else {
                      var result10 = null;;
                    };
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result5 = ",";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result5 !== null) {
                    var result6 = parse_INTEGER();
                    if (result6 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result7 = "}";
                        pos += 1;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result7 !== null) {
                        var result4 = [result5, result6, result7];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                }
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[82] PathMod");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathPrimary() {
        var cacheKey = 'PathPrimary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result13 = parse_IRIref();
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos3 = pos;
          if (input.substr(pos, 1) === "a") {
            var result11 = "a";
            pos += 1;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          var result12 = result11 !== null
            ? (function() {
            	return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
                })()
            : null;
          if (result12 !== null) {
            var result10 = result12;
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "!") {
              var result8 = "!";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result8 !== null) {
              var result9 = parse_PathNegatedPropertySet();
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_PathAlternative();
                if (result5 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result6 = ")";
                    pos += 1;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result6 !== null) {
                    var result2 = [result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(p) {
                	return p;
                    })(result2[1])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[83] PathPrimary");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathNegatedPropertySet() {
        var cacheKey = 'PathNegatedPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result11 = parse_PathOneInPropertySet();
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_PathOneInPropertySet();
            if (result6 !== null) {
              var result7 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "|") {
                var result9 = "|";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_PathOneInPropertySet();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result7.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "|") {
                  var result9 = "|";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"|\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_PathOneInPropertySet();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathOneInPropertySet() {
        var cacheKey = 'PathOneInPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_IRIref();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result6 = "a";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "^") {
              var result2 = "^";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result2 !== null) {
              var result5 = parse_IRIref();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result4 = "a";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              }
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[85] PathOneInPropertySet");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesNode() {
        var cacheKey = 'TriplesNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result3 = parse_Collection();
        var result4 = result3 !== null
          ? (function(c) {
                triplesContext = [];
                chainSubject = [];
          
                var triple = null;
          
                // catch NIL
                /*
                if(c.length == 1 && c[0].token && c[0].token === 'nil') {
                    GlobalBlankNodeCounter++;
                    return  {token: "triplesnodecollection", 
                             triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                              object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}], 
                             chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};
          
                }
                */
          
                // other cases
                for(var i=0; i<c.length; i++) {
                    GlobalBlankNodeCounter++;
                    //_:b0  rdf:first  1 ;
                    //rdf:rest   _:b1 .
                    var nextObject = null;
                    if(c[i].chainSubject == null && c[i].triplesContext == null) {
                        nextObject = c[i];
                    } else {
                        nextObject = c[i].chainSubject;
                        triplesContext = triplesContext.concat(nextSubject.triplesContext);
                    }
                    var currentSubject = null;
                    triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                              object:nextObject };
          
                    if(i==0) {
                        chainSubject.push(triple.subject);
                    }
          
                    triplesContext.push(triple);
          
                    if(i===(c.length-1)) {
                        triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                    } else {
                        triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
                    }
          
                    triplesContext.push(triple);
                }
          
                return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          })(result3)
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_BlankNodePropertyList();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[87] TriplesNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNodePropertyList() {
        var cacheKey = 'BlankNodePropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result3.push(result13);
          var result13 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result4 = "[";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result5.push(result12);
              var result12 = parse_WS();
            }
            if (result5 !== null) {
              var result6 = parse_PropertyListNotEmpty();
              if (result6 !== null) {
                var result7 = [];
                var result11 = parse_WS();
                while (result11 !== null) {
                  result7.push(result11);
                  var result11 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result8 = "]";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(pl) {
          
                GlobalBlankNodeCounter++;
                var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
                var newTriples =  [];
          
                for(var i=0; i< pl.pairs.length; i++) {
                    var pair = pl.pairs[i];
                    var triple = {}
                    triple.subject = subject;
                    triple.predicate = pair[0];
                    if(pair[1].length != null)
          	    pair[1] = pair[1][0]
                    triple.object = pair[1];
                    newTriples.push(triple);
                }
          
                return {token: 'triplesnode',
                        kind: 'blanknodepropertylist',
                        triplesContext: pl.triplesContext.concat(newTriples),
                        chainSubject: subject};
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] BlankNodePropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Collection() {
        var cacheKey = 'Collection@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var result14 = parse_WS();
        while (result14 !== null) {
          result3.push(result14);
          var result14 = parse_WS();
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result4 = "(";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result4 !== null) {
            var result5 = [];
            var result13 = parse_WS();
            while (result13 !== null) {
              result5.push(result13);
              var result13 = parse_WS();
            }
            if (result5 !== null) {
              var result12 = parse_GraphNode();
              if (result12 !== null) {
                var result6 = [];
                while (result12 !== null) {
                  result6.push(result12);
                  var result12 = parse_GraphNode();
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result7 = [];
                var result11 = parse_WS();
                while (result11 !== null) {
                  result7.push(result11);
                  var result11 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result8 = ")";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result9.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(gn) {
                return gn;
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[89] Collection");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphNode() {
        var cacheKey = 'GraphNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos2 = pos;
        var result10 = [];
        var result14 = parse_WS();
        while (result14 !== null) {
          result10.push(result14);
          var result14 = parse_WS();
        }
        if (result10 !== null) {
          var result11 = parse_VarOrTerm();
          if (result11 !== null) {
            var result12 = [];
            var result13 = parse_WS();
            while (result13 !== null) {
              result12.push(result13);
              var result13 = parse_WS();
            }
            if (result12 !== null) {
              var result9 = [result10, result11, result12];
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          } else {
            var result9 = null;
            pos = savedPos2;
          }
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        if (result9 !== null) {
          var result1 = result9;
        } else {
          var savedPos1 = pos;
          var result4 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result4.push(result8);
            var result8 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_TriplesNode();
            if (result5 !== null) {
              var result6 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result6.push(result7);
                var result7 = parse_WS();
              }
              if (result6 !== null) {
                var result3 = [result4, result5, result6];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(gn) {
            return gn[1];
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[90] GraphNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrTerm() {
        var cacheKey = 'VarOrTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_GraphTerm();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[91] VarOrTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrIRIref() {
        var cacheKey = 'VarOrIRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_IRIref();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[92] VarOrIRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Var() {
        var cacheKey = 'Var@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result4 = parse_VAR1();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_VAR2();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(v) {
                var term = {};
                term.token = 'var';
                term.value = v;
                return term;
            })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[93] Var");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphTerm() {
        var cacheKey = 'GraphTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_IRIref();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_RDFLiteral();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_NumericLiteral();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_BooleanLiteral();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_BlankNode();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_NIL();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[94] GraphTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConditionalOrExpression() {
        var cacheKey = 'ConditionalOrExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ConditionalAndExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "||") {
              var result7 = "||";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"||\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_WS();
              }
              if (result8 !== null) {
                var result9 = parse_ConditionalAndExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result6.push(result11);
              var result11 = parse_WS();
            }
            if (result6 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result7 = "||";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"||\"");
                }
              }
              if (result7 !== null) {
                var result8 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result8.push(result10);
                  var result10 = parse_WS();
                }
                if (result8 !== null) {
                  var result9 = parse_ConditionalAndExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }
          
                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionalor";
                var ops = [v];
          
                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }
          
                exp.operands = ops;
          
                return exp;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[96] ConditionalOrExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConditionalAndExpression() {
        var cacheKey = 'ConditionalAndExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_RelationalExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result6.push(result11);
            var result11 = parse_WS();
          }
          if (result6 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result7 = "&&";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"&&\"");
              }
            }
            if (result7 !== null) {
              var result8 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result8.push(result10);
                var result10 = parse_WS();
              }
              if (result8 !== null) {
                var result9 = parse_RelationalExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result6.push(result11);
              var result11 = parse_WS();
            }
            if (result6 !== null) {
              if (input.substr(pos, 2) === "&&") {
                var result7 = "&&";
                pos += 2;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"&&\"");
                }
              }
              if (result7 !== null) {
                var result8 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result8.push(result10);
                  var result10 = parse_WS();
                }
                if (result8 !== null) {
                  var result9 = parse_RelationalExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }
                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionaland";
                var ops = [v];
          
                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }
          
                exp.operands = ops;
          
                return exp;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[97] ConditionalAndExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpression() {
        var cacheKey = 'RelationalExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AdditiveExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos7 = pos;
          var result42 = [];
          var result47 = parse_WS();
          while (result47 !== null) {
            result42.push(result47);
            var result47 = parse_WS();
          }
          if (result42 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result43 = "=";
              pos += 1;
            } else {
              var result43 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result43 !== null) {
              var result44 = [];
              var result46 = parse_WS();
              while (result46 !== null) {
                result44.push(result46);
                var result46 = parse_WS();
              }
              if (result44 !== null) {
                var result45 = parse_AdditiveExpression();
                if (result45 !== null) {
                  var result41 = [result42, result43, result44, result45];
                } else {
                  var result41 = null;
                  pos = savedPos7;
                }
              } else {
                var result41 = null;
                pos = savedPos7;
              }
            } else {
              var result41 = null;
              pos = savedPos7;
            }
          } else {
            var result41 = null;
            pos = savedPos7;
          }
          if (result41 !== null) {
            var result5 = result41;
          } else {
            var savedPos6 = pos;
            var result35 = [];
            var result40 = parse_WS();
            while (result40 !== null) {
              result35.push(result40);
              var result40 = parse_WS();
            }
            if (result35 !== null) {
              if (input.substr(pos, 2) === "!=") {
                var result36 = "!=";
                pos += 2;
              } else {
                var result36 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result36 !== null) {
                var result37 = [];
                var result39 = parse_WS();
                while (result39 !== null) {
                  result37.push(result39);
                  var result39 = parse_WS();
                }
                if (result37 !== null) {
                  var result38 = parse_AdditiveExpression();
                  if (result38 !== null) {
                    var result34 = [result35, result36, result37, result38];
                  } else {
                    var result34 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result34 = null;
                  pos = savedPos6;
                }
              } else {
                var result34 = null;
                pos = savedPos6;
              }
            } else {
              var result34 = null;
              pos = savedPos6;
            }
            if (result34 !== null) {
              var result5 = result34;
            } else {
              var savedPos5 = pos;
              var result28 = [];
              var result33 = parse_WS();
              while (result33 !== null) {
                result28.push(result33);
                var result33 = parse_WS();
              }
              if (result28 !== null) {
                if (input.substr(pos, 1) === "<") {
                  var result29 = "<";
                  pos += 1;
                } else {
                  var result29 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result29 !== null) {
                  var result30 = [];
                  var result32 = parse_WS();
                  while (result32 !== null) {
                    result30.push(result32);
                    var result32 = parse_WS();
                  }
                  if (result30 !== null) {
                    var result31 = parse_AdditiveExpression();
                    if (result31 !== null) {
                      var result27 = [result28, result29, result30, result31];
                    } else {
                      var result27 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result27 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result27 = null;
                  pos = savedPos5;
                }
              } else {
                var result27 = null;
                pos = savedPos5;
              }
              if (result27 !== null) {
                var result5 = result27;
              } else {
                var savedPos4 = pos;
                var result21 = [];
                var result26 = parse_WS();
                while (result26 !== null) {
                  result21.push(result26);
                  var result26 = parse_WS();
                }
                if (result21 !== null) {
                  if (input.substr(pos, 1) === ">") {
                    var result22 = ">";
                    pos += 1;
                  } else {
                    var result22 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result22 !== null) {
                    var result23 = [];
                    var result25 = parse_WS();
                    while (result25 !== null) {
                      result23.push(result25);
                      var result25 = parse_WS();
                    }
                    if (result23 !== null) {
                      var result24 = parse_AdditiveExpression();
                      if (result24 !== null) {
                        var result20 = [result21, result22, result23, result24];
                      } else {
                        var result20 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result20 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos4;
                }
                if (result20 !== null) {
                  var result5 = result20;
                } else {
                  var savedPos3 = pos;
                  var result14 = [];
                  var result19 = parse_WS();
                  while (result19 !== null) {
                    result14.push(result19);
                    var result19 = parse_WS();
                  }
                  if (result14 !== null) {
                    if (input.substr(pos, 2) === "<=") {
                      var result15 = "<=";
                      pos += 2;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"<=\"");
                      }
                    }
                    if (result15 !== null) {
                      var result16 = [];
                      var result18 = parse_WS();
                      while (result18 !== null) {
                        result16.push(result18);
                        var result18 = parse_WS();
                      }
                      if (result16 !== null) {
                        var result17 = parse_AdditiveExpression();
                        if (result17 !== null) {
                          var result13 = [result14, result15, result16, result17];
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                  if (result13 !== null) {
                    var result5 = result13;
                  } else {
                    var savedPos2 = pos;
                    var result7 = [];
                    var result12 = parse_WS();
                    while (result12 !== null) {
                      result7.push(result12);
                      var result12 = parse_WS();
                    }
                    if (result7 !== null) {
                      if (input.substr(pos, 2) === ">=") {
                        var result8 = ">=";
                        pos += 2;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\">=\"");
                        }
                      }
                      if (result8 !== null) {
                        var result9 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                          result9.push(result11);
                          var result11 = parse_WS();
                        }
                        if (result9 !== null) {
                          var result10 = parse_AdditiveExpression();
                          if (result10 !== null) {
                            var result6 = [result7, result8, result9, result10];
                          } else {
                            var result6 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result6 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result6 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                    if (result6 !== null) {
                      var result5 = result6;
                    } else {
                      var result5 = null;;
                    };
                  };
                };
              };
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos7 = pos;
            var result42 = [];
            var result47 = parse_WS();
            while (result47 !== null) {
              result42.push(result47);
              var result47 = parse_WS();
            }
            if (result42 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result43 = "=";
                pos += 1;
              } else {
                var result43 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result43 !== null) {
                var result44 = [];
                var result46 = parse_WS();
                while (result46 !== null) {
                  result44.push(result46);
                  var result46 = parse_WS();
                }
                if (result44 !== null) {
                  var result45 = parse_AdditiveExpression();
                  if (result45 !== null) {
                    var result41 = [result42, result43, result44, result45];
                  } else {
                    var result41 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result41 = null;
                  pos = savedPos7;
                }
              } else {
                var result41 = null;
                pos = savedPos7;
              }
            } else {
              var result41 = null;
              pos = savedPos7;
            }
            if (result41 !== null) {
              var result5 = result41;
            } else {
              var savedPos6 = pos;
              var result35 = [];
              var result40 = parse_WS();
              while (result40 !== null) {
                result35.push(result40);
                var result40 = parse_WS();
              }
              if (result35 !== null) {
                if (input.substr(pos, 2) === "!=") {
                  var result36 = "!=";
                  pos += 2;
                } else {
                  var result36 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result36 !== null) {
                  var result37 = [];
                  var result39 = parse_WS();
                  while (result39 !== null) {
                    result37.push(result39);
                    var result39 = parse_WS();
                  }
                  if (result37 !== null) {
                    var result38 = parse_AdditiveExpression();
                    if (result38 !== null) {
                      var result34 = [result35, result36, result37, result38];
                    } else {
                      var result34 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result34 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result34 = null;
                  pos = savedPos6;
                }
              } else {
                var result34 = null;
                pos = savedPos6;
              }
              if (result34 !== null) {
                var result5 = result34;
              } else {
                var savedPos5 = pos;
                var result28 = [];
                var result33 = parse_WS();
                while (result33 !== null) {
                  result28.push(result33);
                  var result33 = parse_WS();
                }
                if (result28 !== null) {
                  if (input.substr(pos, 1) === "<") {
                    var result29 = "<";
                    pos += 1;
                  } else {
                    var result29 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result29 !== null) {
                    var result30 = [];
                    var result32 = parse_WS();
                    while (result32 !== null) {
                      result30.push(result32);
                      var result32 = parse_WS();
                    }
                    if (result30 !== null) {
                      var result31 = parse_AdditiveExpression();
                      if (result31 !== null) {
                        var result27 = [result28, result29, result30, result31];
                      } else {
                        var result27 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result27 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result27 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result27 = null;
                  pos = savedPos5;
                }
                if (result27 !== null) {
                  var result5 = result27;
                } else {
                  var savedPos4 = pos;
                  var result21 = [];
                  var result26 = parse_WS();
                  while (result26 !== null) {
                    result21.push(result26);
                    var result26 = parse_WS();
                  }
                  if (result21 !== null) {
                    if (input.substr(pos, 1) === ">") {
                      var result22 = ">";
                      pos += 1;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result22 !== null) {
                      var result23 = [];
                      var result25 = parse_WS();
                      while (result25 !== null) {
                        result23.push(result25);
                        var result25 = parse_WS();
                      }
                      if (result23 !== null) {
                        var result24 = parse_AdditiveExpression();
                        if (result24 !== null) {
                          var result20 = [result21, result22, result23, result24];
                        } else {
                          var result20 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result20 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result20 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos4;
                  }
                  if (result20 !== null) {
                    var result5 = result20;
                  } else {
                    var savedPos3 = pos;
                    var result14 = [];
                    var result19 = parse_WS();
                    while (result19 !== null) {
                      result14.push(result19);
                      var result19 = parse_WS();
                    }
                    if (result14 !== null) {
                      if (input.substr(pos, 2) === "<=") {
                        var result15 = "<=";
                        pos += 2;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"<=\"");
                        }
                      }
                      if (result15 !== null) {
                        var result16 = [];
                        var result18 = parse_WS();
                        while (result18 !== null) {
                          result16.push(result18);
                          var result18 = parse_WS();
                        }
                        if (result16 !== null) {
                          var result17 = parse_AdditiveExpression();
                          if (result17 !== null) {
                            var result13 = [result14, result15, result16, result17];
                          } else {
                            var result13 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                    if (result13 !== null) {
                      var result5 = result13;
                    } else {
                      var savedPos2 = pos;
                      var result7 = [];
                      var result12 = parse_WS();
                      while (result12 !== null) {
                        result7.push(result12);
                        var result12 = parse_WS();
                      }
                      if (result7 !== null) {
                        if (input.substr(pos, 2) === ">=") {
                          var result8 = ">=";
                          pos += 2;
                        } else {
                          var result8 = null;
                          if (reportMatchFailures) {
                            matchFailed("\">=\"");
                          }
                        }
                        if (result8 !== null) {
                          var result9 = [];
                          var result11 = parse_WS();
                          while (result11 !== null) {
                            result9.push(result11);
                            var result11 = parse_WS();
                          }
                          if (result9 !== null) {
                            var result10 = parse_AdditiveExpression();
                            if (result10 !== null) {
                              var result6 = [result7, result8, result9, result10];
                            } else {
                              var result6 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result6 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result6 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result6 = null;
                        pos = savedPos2;
                      }
                      if (result6 !== null) {
                        var result5 = result6;
                      } else {
                        var result5 = null;;
                      };
                    };
                  };
                };
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op1, op2) {
                if(op2.length === 0) {
                    return op1;
                } else {
                  var exp = {};
                  exp.expressionType = "relationalexpression"
                  exp.operator = op2[0][1];
                  exp.op1 = op1;
                  exp.op2 = op2[0][3];
                  exp.token = "expression";
          
                  return exp;
                }
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[99] RelationalExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpression() {
        var cacheKey = 'AdditiveExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_MultiplicativeExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos6 = pos;
          var result34 = [];
          var result39 = parse_WS();
          while (result39 !== null) {
            result34.push(result39);
            var result39 = parse_WS();
          }
          if (result34 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result35 = "+";
              pos += 1;
            } else {
              var result35 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result35 !== null) {
              var result36 = [];
              var result38 = parse_WS();
              while (result38 !== null) {
                result36.push(result38);
                var result38 = parse_WS();
              }
              if (result36 !== null) {
                var result37 = parse_MultiplicativeExpression();
                if (result37 !== null) {
                  var result33 = [result34, result35, result36, result37];
                } else {
                  var result33 = null;
                  pos = savedPos6;
                }
              } else {
                var result33 = null;
                pos = savedPos6;
              }
            } else {
              var result33 = null;
              pos = savedPos6;
            }
          } else {
            var result33 = null;
            pos = savedPos6;
          }
          if (result33 !== null) {
            var result5 = result33;
          } else {
            var savedPos5 = pos;
            var result27 = [];
            var result32 = parse_WS();
            while (result32 !== null) {
              result27.push(result32);
              var result32 = parse_WS();
            }
            if (result27 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result28 = "-";
                pos += 1;
              } else {
                var result28 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result28 !== null) {
                var result29 = [];
                var result31 = parse_WS();
                while (result31 !== null) {
                  result29.push(result31);
                  var result31 = parse_WS();
                }
                if (result29 !== null) {
                  var result30 = parse_MultiplicativeExpression();
                  if (result30 !== null) {
                    var result26 = [result27, result28, result29, result30];
                  } else {
                    var result26 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos5;
                }
              } else {
                var result26 = null;
                pos = savedPos5;
              }
            } else {
              var result26 = null;
              pos = savedPos5;
            }
            if (result26 !== null) {
              var result5 = result26;
            } else {
              var savedPos2 = pos;
              var result25 = parse_NumericLiteralNegative();
              if (result25 !== null) {
                var result7 = result25;
              } else {
                var result24 = parse_NumericLiteralNegative();
                if (result24 !== null) {
                  var result7 = result24;
                } else {
                  var result7 = null;;
                };
              }
              if (result7 !== null) {
                var savedPos4 = pos;
                var result18 = [];
                var result23 = parse_WS();
                while (result23 !== null) {
                  result18.push(result23);
                  var result23 = parse_WS();
                }
                if (result18 !== null) {
                  if (input.substr(pos, 1) === "*") {
                    var result19 = "*";
                    pos += 1;
                  } else {
                    var result19 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result19 !== null) {
                    var result20 = [];
                    var result22 = parse_WS();
                    while (result22 !== null) {
                      result20.push(result22);
                      var result22 = parse_WS();
                    }
                    if (result20 !== null) {
                      var result21 = parse_UnaryExpression();
                      if (result21 !== null) {
                        var result17 = [result18, result19, result20, result21];
                      } else {
                        var result17 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos4;
                }
                if (result17 !== null) {
                  var result9 = result17;
                } else {
                  var savedPos3 = pos;
                  var result11 = [];
                  var result16 = parse_WS();
                  while (result16 !== null) {
                    result11.push(result16);
                    var result16 = parse_WS();
                  }
                  if (result11 !== null) {
                    if (input.substr(pos, 1) === "/") {
                      var result12 = "/";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"/\"");
                      }
                    }
                    if (result12 !== null) {
                      var result13 = [];
                      var result15 = parse_WS();
                      while (result15 !== null) {
                        result13.push(result15);
                        var result15 = parse_WS();
                      }
                      if (result13 !== null) {
                        var result14 = parse_UnaryExpression();
                        if (result14 !== null) {
                          var result10 = [result11, result12, result13, result14];
                        } else {
                          var result10 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                  if (result10 !== null) {
                    var result9 = result10;
                  } else {
                    var result9 = null;;
                  };
                }
                var result8 = result9 !== null ? result9 : '';
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos6 = pos;
            var result34 = [];
            var result39 = parse_WS();
            while (result39 !== null) {
              result34.push(result39);
              var result39 = parse_WS();
            }
            if (result34 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result35 = "+";
                pos += 1;
              } else {
                var result35 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result35 !== null) {
                var result36 = [];
                var result38 = parse_WS();
                while (result38 !== null) {
                  result36.push(result38);
                  var result38 = parse_WS();
                }
                if (result36 !== null) {
                  var result37 = parse_MultiplicativeExpression();
                  if (result37 !== null) {
                    var result33 = [result34, result35, result36, result37];
                  } else {
                    var result33 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result33 = null;
                  pos = savedPos6;
                }
              } else {
                var result33 = null;
                pos = savedPos6;
              }
            } else {
              var result33 = null;
              pos = savedPos6;
            }
            if (result33 !== null) {
              var result5 = result33;
            } else {
              var savedPos5 = pos;
              var result27 = [];
              var result32 = parse_WS();
              while (result32 !== null) {
                result27.push(result32);
                var result32 = parse_WS();
              }
              if (result27 !== null) {
                if (input.substr(pos, 1) === "-") {
                  var result28 = "-";
                  pos += 1;
                } else {
                  var result28 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result28 !== null) {
                  var result29 = [];
                  var result31 = parse_WS();
                  while (result31 !== null) {
                    result29.push(result31);
                    var result31 = parse_WS();
                  }
                  if (result29 !== null) {
                    var result30 = parse_MultiplicativeExpression();
                    if (result30 !== null) {
                      var result26 = [result27, result28, result29, result30];
                    } else {
                      var result26 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result26 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos5;
                }
              } else {
                var result26 = null;
                pos = savedPos5;
              }
              if (result26 !== null) {
                var result5 = result26;
              } else {
                var savedPos2 = pos;
                var result25 = parse_NumericLiteralNegative();
                if (result25 !== null) {
                  var result7 = result25;
                } else {
                  var result24 = parse_NumericLiteralNegative();
                  if (result24 !== null) {
                    var result7 = result24;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var savedPos4 = pos;
                  var result18 = [];
                  var result23 = parse_WS();
                  while (result23 !== null) {
                    result18.push(result23);
                    var result23 = parse_WS();
                  }
                  if (result18 !== null) {
                    if (input.substr(pos, 1) === "*") {
                      var result19 = "*";
                      pos += 1;
                    } else {
                      var result19 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result19 !== null) {
                      var result20 = [];
                      var result22 = parse_WS();
                      while (result22 !== null) {
                        result20.push(result22);
                        var result22 = parse_WS();
                      }
                      if (result20 !== null) {
                        var result21 = parse_UnaryExpression();
                        if (result21 !== null) {
                          var result17 = [result18, result19, result20, result21];
                        } else {
                          var result17 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result17 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos4;
                  }
                  if (result17 !== null) {
                    var result9 = result17;
                  } else {
                    var savedPos3 = pos;
                    var result11 = [];
                    var result16 = parse_WS();
                    while (result16 !== null) {
                      result11.push(result16);
                      var result16 = parse_WS();
                    }
                    if (result11 !== null) {
                      if (input.substr(pos, 1) === "/") {
                        var result12 = "/";
                        pos += 1;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"/\"");
                        }
                      }
                      if (result12 !== null) {
                        var result13 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                          result13.push(result15);
                          var result15 = parse_WS();
                        }
                        if (result13 !== null) {
                          var result14 = parse_UnaryExpression();
                          if (result14 !== null) {
                            var result10 = [result11, result12, result13, result14];
                          } else {
                            var result10 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos3;
                    }
                    if (result10 !== null) {
                      var result9 = result10;
                    } else {
                      var result9 = null;;
                    };
                  }
                  var result8 = result9 !== null ? result9 : '';
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op1, ops) {
                if(ops.length === 0) {
                    return op1;
                }
          
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'additiveexpression';
                ex.summand = op1;
                ex.summands = [];
          
                for(var i=0; i<ops.length; i++) {
                    var summand = ops[i];
                    var sum = {};
                    if(summand.length == 4 && typeof(summand[1]) === "string") {
                        sum.operator = summand[1];
                        sum.expression = summand[3];
                    } else {
                        var subexp = {}
                        var firstFactor = sum[0];
                        var operator = sum[1][1];
                        var secondFactor = sum[1][3];
                        var operator = null;
                        if(firstFactor.value < 0) {
                            sum.operator = '-';
                            firstFactor.value = - firstFactor.value;
                        } else {
                            sum.operator = '+';
                        }
                        subexp.token = 'expression';
                        subexp.expressionType = 'multiplicativeexpression';
                        subexp.operator = firstFactor;
                        subexp.factors = [{operator: operator, expression: secondFactor}];
          
                        sum.expression = subexp;
                    }
                    ex.summands.push(sum);
                }
          
                return ex;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[101] AdditiveExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpression() {
        var cacheKey = 'MultiplicativeExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UnaryExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos3 = pos;
          var result14 = [];
          var result19 = parse_WS();
          while (result19 !== null) {
            result14.push(result19);
            var result19 = parse_WS();
          }
          if (result14 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result15 = "*";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result15 !== null) {
              var result16 = [];
              var result18 = parse_WS();
              while (result18 !== null) {
                result16.push(result18);
                var result18 = parse_WS();
              }
              if (result16 !== null) {
                var result17 = parse_UnaryExpression();
                if (result17 !== null) {
                  var result13 = [result14, result15, result16, result17];
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
          } else {
            var result13 = null;
            pos = savedPos3;
          }
          if (result13 !== null) {
            var result5 = result13;
          } else {
            var savedPos2 = pos;
            var result7 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result7.push(result12);
              var result12 = parse_WS();
            }
            if (result7 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result8 = "/";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result8 !== null) {
                var result9 = [];
                var result11 = parse_WS();
                while (result11 !== null) {
                  result9.push(result11);
                  var result11 = parse_WS();
                }
                if (result9 !== null) {
                  var result10 = parse_UnaryExpression();
                  if (result10 !== null) {
                    var result6 = [result7, result8, result9, result10];
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos3 = pos;
            var result14 = [];
            var result19 = parse_WS();
            while (result19 !== null) {
              result14.push(result19);
              var result19 = parse_WS();
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result15 = "*";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result15 !== null) {
                var result16 = [];
                var result18 = parse_WS();
                while (result18 !== null) {
                  result16.push(result18);
                  var result18 = parse_WS();
                }
                if (result16 !== null) {
                  var result17 = parse_UnaryExpression();
                  if (result17 !== null) {
                    var result13 = [result14, result15, result16, result17];
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            if (result13 !== null) {
              var result5 = result13;
            } else {
              var savedPos2 = pos;
              var result7 = [];
              var result12 = parse_WS();
              while (result12 !== null) {
                result7.push(result12);
                var result12 = parse_WS();
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === "/") {
                  var result8 = "/";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result11 = parse_WS();
                  while (result11 !== null) {
                    result9.push(result11);
                    var result11 = parse_WS();
                  }
                  if (result9 !== null) {
                    var result10 = parse_UnaryExpression();
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(exp, exps) {
                if(exps.length === 0) {
                    return exp;
                }
          
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'multiplicativeexpression';
                ex.factor = exp;
                ex.factors = [];
                for(var i=0; i<exps.length; i++) {
                    var factor = exps[i];
                    var fact = {};
                    fact.operator = factor[1];
                    fact.expression = factor[3];
                    ex.factors.push(fact);
                }
          
                return ex;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[102] MultiplicativeExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpression() {
        var cacheKey = 'UnaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var savedPos5 = pos;
        if (input.substr(pos, 1) === "!") {
          var result19 = "!";
          pos += 1;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("\"!\"");
          }
        }
        if (result19 !== null) {
          var result20 = [];
          var result22 = parse_WS();
          while (result22 !== null) {
            result20.push(result22);
            var result22 = parse_WS();
          }
          if (result20 !== null) {
            var result21 = parse_PrimaryExpression();
            if (result21 !== null) {
              var result17 = [result19, result20, result21];
            } else {
              var result17 = null;
              pos = savedPos5;
            }
          } else {
            var result17 = null;
            pos = savedPos5;
          }
        } else {
          var result17 = null;
          pos = savedPos5;
        }
        var result18 = result17 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'unaryexpression';
                ex.unaryexpression = "!";
                ex.expression = e;
          
                return ex;
            })(result17[2])
          : null;
        if (result18 !== null) {
          var result16 = result18;
        } else {
          var result16 = null;
          pos = savedPos4;
        }
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === "+") {
            var result12 = "+";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_WS();
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_WS();
            }
            if (result13 !== null) {
              var result14 = parse_PrimaryExpression();
              if (result14 !== null) {
                var result10 = [result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          var result11 = result10 !== null
            ? (function(v) {
                  var ex = {};
                  ex.token = 'expression';
                  ex.expressionType = 'unaryexpression';
                  ex.unaryexpression = "+";
                  ex.expression = v;
            
                  return ex;
              })(result10[2])
            : null;
          if (result11 !== null) {
            var result9 = result11;
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result5 = "-";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_PrimaryExpression();
                if (result7 !== null) {
                  var result3 = [result5, result6, result7];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
            var result4 = result3 !== null
              ? (function(v) {
                    var ex = {};
                    ex.token = 'expression';
                    ex.expressionType = 'unaryexpression';
                    ex.unaryexpression = "-";
                    ex.expression = v;
              
                    return ex;
                })(result3[2])
              : null;
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_PrimaryExpression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[103] UnaryExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpression() {
        var cacheKey = 'PrimaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result16 = parse_BrackettedExpression();
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var result15 = parse_BuiltInCall();
          if (result15 !== null) {
            var result0 = result15;
          } else {
            var result14 = parse_IRIrefOrFunction();
            if (result14 !== null) {
              var result0 = result14;
            } else {
              var savedPos3 = pos;
              var result12 = parse_RDFLiteral();
              var result13 = result12 !== null
                ? (function(v) {
                      var ex = {};
                      ex.token = 'expression';
                      ex.expressionType = 'atomic';
                      ex.primaryexpression = 'rdfliteral';
                      ex.value = v;
                
                      return ex;
                  })(result12)
                : null;
              if (result13 !== null) {
                var result11 = result13;
              } else {
                var result11 = null;
                pos = savedPos3;
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                var savedPos2 = pos;
                var result9 = parse_NumericLiteral();
                var result10 = result9 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'atomic';
                        ex.primaryexpression = 'numericliteral';
                        ex.value = v;
                  
                        return ex;
                    })(result9)
                  : null;
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  var savedPos1 = pos;
                  var result6 = parse_BooleanLiteral();
                  var result7 = result6 !== null
                    ? (function(v) {
                          var ex = {};
                          ex.token = 'expression';
                          ex.expressionType = 'atomic';
                          ex.primaryexpression = 'booleanliteral';
                          ex.value = v;
                    
                          return ex;
                      })(result6)
                    : null;
                  if (result7 !== null) {
                    var result5 = result7;
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                  if (result5 !== null) {
                    var result0 = result5;
                  } else {
                    var result4 = parse_Aggregate();
                    if (result4 !== null) {
                      var result0 = result4;
                    } else {
                      var savedPos0 = pos;
                      var result2 = parse_Var();
                      var result3 = result2 !== null
                        ? (function(v) {
                              var ex = {};
                              ex.token = 'expression';
                              ex.expressionType = 'atomic';
                              ex.primaryexpression = 'var';
                              ex.value = v;
                        
                              return ex;
                          })(result2)
                        : null;
                      if (result3 !== null) {
                        var result1 = result3;
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[104] PrimaryExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BrackettedExpression() {
        var cacheKey = 'BrackettedExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result4.push(result9);
            var result9 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_ConditionalOrExpression();
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e) {
                return e;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[105] BrackettedExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BuiltInCall() {
        var cacheKey = 'BuiltInCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos27 = pos;
        var savedPos28 = pos;
        if (input.substr(pos, 3) === "STR") {
          var result216 = "STR";
          pos += 3;
        } else {
          var result216 = null;
          if (reportMatchFailures) {
            matchFailed("\"STR\"");
          }
        }
        if (result216 !== null) {
          var result205 = result216;
        } else {
          if (input.substr(pos, 3) === "str") {
            var result215 = "str";
            pos += 3;
          } else {
            var result215 = null;
            if (reportMatchFailures) {
              matchFailed("\"str\"");
            }
          }
          if (result215 !== null) {
            var result205 = result215;
          } else {
            var result205 = null;;
          };
        }
        if (result205 !== null) {
          var result206 = [];
          var result214 = parse_WS();
          while (result214 !== null) {
            result206.push(result214);
            var result214 = parse_WS();
          }
          if (result206 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result207 = "(";
              pos += 1;
            } else {
              var result207 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result207 !== null) {
              var result208 = [];
              var result213 = parse_WS();
              while (result213 !== null) {
                result208.push(result213);
                var result213 = parse_WS();
              }
              if (result208 !== null) {
                var result209 = parse_ConditionalOrExpression();
                if (result209 !== null) {
                  var result210 = [];
                  var result212 = parse_WS();
                  while (result212 !== null) {
                    result210.push(result212);
                    var result212 = parse_WS();
                  }
                  if (result210 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result211 = ")";
                      pos += 1;
                    } else {
                      var result211 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result211 !== null) {
                      var result203 = [result205, result206, result207, result208, result209, result210, result211];
                    } else {
                      var result203 = null;
                      pos = savedPos28;
                    }
                  } else {
                    var result203 = null;
                    pos = savedPos28;
                  }
                } else {
                  var result203 = null;
                  pos = savedPos28;
                }
              } else {
                var result203 = null;
                pos = savedPos28;
              }
            } else {
              var result203 = null;
              pos = savedPos28;
            }
          } else {
            var result203 = null;
            pos = savedPos28;
          }
        } else {
          var result203 = null;
          pos = savedPos28;
        }
        var result204 = result203 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression'
                ex.expressionType = 'builtincall'
                ex.builtincall = 'str'
                ex.args = [e]
          
                return ex;
            })(result203[4])
          : null;
        if (result204 !== null) {
          var result202 = result204;
        } else {
          var result202 = null;
          pos = savedPos27;
        }
        if (result202 !== null) {
          var result0 = result202;
        } else {
          var savedPos25 = pos;
          var savedPos26 = pos;
          if (input.substr(pos, 4) === "LANG") {
            var result201 = "LANG";
            pos += 4;
          } else {
            var result201 = null;
            if (reportMatchFailures) {
              matchFailed("\"LANG\"");
            }
          }
          if (result201 !== null) {
            var result190 = result201;
          } else {
            if (input.substr(pos, 4) === "lang") {
              var result200 = "lang";
              pos += 4;
            } else {
              var result200 = null;
              if (reportMatchFailures) {
                matchFailed("\"lang\"");
              }
            }
            if (result200 !== null) {
              var result190 = result200;
            } else {
              var result190 = null;;
            };
          }
          if (result190 !== null) {
            var result191 = [];
            var result199 = parse_WS();
            while (result199 !== null) {
              result191.push(result199);
              var result199 = parse_WS();
            }
            if (result191 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result192 = "(";
                pos += 1;
              } else {
                var result192 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result192 !== null) {
                var result193 = [];
                var result198 = parse_WS();
                while (result198 !== null) {
                  result193.push(result198);
                  var result198 = parse_WS();
                }
                if (result193 !== null) {
                  var result194 = parse_ConditionalOrExpression();
                  if (result194 !== null) {
                    var result195 = [];
                    var result197 = parse_WS();
                    while (result197 !== null) {
                      result195.push(result197);
                      var result197 = parse_WS();
                    }
                    if (result195 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result196 = ")";
                        pos += 1;
                      } else {
                        var result196 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result196 !== null) {
                        var result188 = [result190, result191, result192, result193, result194, result195, result196];
                      } else {
                        var result188 = null;
                        pos = savedPos26;
                      }
                    } else {
                      var result188 = null;
                      pos = savedPos26;
                    }
                  } else {
                    var result188 = null;
                    pos = savedPos26;
                  }
                } else {
                  var result188 = null;
                  pos = savedPos26;
                }
              } else {
                var result188 = null;
                pos = savedPos26;
              }
            } else {
              var result188 = null;
              pos = savedPos26;
            }
          } else {
            var result188 = null;
            pos = savedPos26;
          }
          var result189 = result188 !== null
            ? (function(e) {
                  var ex = {};
                  ex.token = 'expression'
                  ex.expressionType = 'builtincall'
                  ex.builtincall = 'lang'
                  ex.args = [e]
            
                  return ex;
            })(result188[4])
            : null;
          if (result189 !== null) {
            var result187 = result189;
          } else {
            var result187 = null;
            pos = savedPos25;
          }
          if (result187 !== null) {
            var result0 = result187;
          } else {
            var savedPos23 = pos;
            var savedPos24 = pos;
            if (input.substr(pos, 11) === "LANGMATCHES") {
              var result171 = "LANGMATCHES";
              pos += 11;
            } else {
              var result171 = null;
              if (reportMatchFailures) {
                matchFailed("\"LANGMATCHES\"");
              }
            }
            if (result171 !== null) {
              var result172 = [];
              var result186 = parse_WS();
              while (result186 !== null) {
                result172.push(result186);
                var result186 = parse_WS();
              }
              if (result172 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result173 = "(";
                  pos += 1;
                } else {
                  var result173 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result173 !== null) {
                  var result174 = [];
                  var result185 = parse_WS();
                  while (result185 !== null) {
                    result174.push(result185);
                    var result185 = parse_WS();
                  }
                  if (result174 !== null) {
                    var result175 = parse_ConditionalOrExpression();
                    if (result175 !== null) {
                      var result176 = [];
                      var result184 = parse_WS();
                      while (result184 !== null) {
                        result176.push(result184);
                        var result184 = parse_WS();
                      }
                      if (result176 !== null) {
                        if (input.substr(pos, 1) === ",") {
                          var result177 = ",";
                          pos += 1;
                        } else {
                          var result177 = null;
                          if (reportMatchFailures) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result177 !== null) {
                          var result178 = [];
                          var result183 = parse_WS();
                          while (result183 !== null) {
                            result178.push(result183);
                            var result183 = parse_WS();
                          }
                          if (result178 !== null) {
                            var result179 = parse_ConditionalOrExpression();
                            if (result179 !== null) {
                              var result180 = [];
                              var result182 = parse_WS();
                              while (result182 !== null) {
                                result180.push(result182);
                                var result182 = parse_WS();
                              }
                              if (result180 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result181 = ")";
                                  pos += 1;
                                } else {
                                  var result181 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result181 !== null) {
                                  var result169 = [result171, result172, result173, result174, result175, result176, result177, result178, result179, result180, result181];
                                } else {
                                  var result169 = null;
                                  pos = savedPos24;
                                }
                              } else {
                                var result169 = null;
                                pos = savedPos24;
                              }
                            } else {
                              var result169 = null;
                              pos = savedPos24;
                            }
                          } else {
                            var result169 = null;
                            pos = savedPos24;
                          }
                        } else {
                          var result169 = null;
                          pos = savedPos24;
                        }
                      } else {
                        var result169 = null;
                        pos = savedPos24;
                      }
                    } else {
                      var result169 = null;
                      pos = savedPos24;
                    }
                  } else {
                    var result169 = null;
                    pos = savedPos24;
                  }
                } else {
                  var result169 = null;
                  pos = savedPos24;
                }
              } else {
                var result169 = null;
                pos = savedPos24;
              }
            } else {
              var result169 = null;
              pos = savedPos24;
            }
            var result170 = result169 !== null
              ? (function(e1, e2) {
                    var ex = {};
                    ex.token = 'expression'
                    ex.expressionType = 'builtincall'
                    ex.builtincall = 'langmatches'
                    ex.args = [e1,e2]
              
                    return ex;
              })(result169[4], result169[8])
              : null;
            if (result170 !== null) {
              var result168 = result170;
            } else {
              var result168 = null;
              pos = savedPos23;
            }
            if (result168 !== null) {
              var result0 = result168;
            } else {
              var savedPos21 = pos;
              var savedPos22 = pos;
              if (input.substr(pos, 8) === "DATATYPE") {
                var result167 = "DATATYPE";
                pos += 8;
              } else {
                var result167 = null;
                if (reportMatchFailures) {
                  matchFailed("\"DATATYPE\"");
                }
              }
              if (result167 !== null) {
                var result156 = result167;
              } else {
                if (input.substr(pos, 8) === "datatype") {
                  var result166 = "datatype";
                  pos += 8;
                } else {
                  var result166 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"datatype\"");
                  }
                }
                if (result166 !== null) {
                  var result156 = result166;
                } else {
                  var result156 = null;;
                };
              }
              if (result156 !== null) {
                var result157 = [];
                var result165 = parse_WS();
                while (result165 !== null) {
                  result157.push(result165);
                  var result165 = parse_WS();
                }
                if (result157 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result158 = "(";
                    pos += 1;
                  } else {
                    var result158 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result158 !== null) {
                    var result159 = [];
                    var result164 = parse_WS();
                    while (result164 !== null) {
                      result159.push(result164);
                      var result164 = parse_WS();
                    }
                    if (result159 !== null) {
                      var result160 = parse_ConditionalOrExpression();
                      if (result160 !== null) {
                        var result161 = [];
                        var result163 = parse_WS();
                        while (result163 !== null) {
                          result161.push(result163);
                          var result163 = parse_WS();
                        }
                        if (result161 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result162 = ")";
                            pos += 1;
                          } else {
                            var result162 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result162 !== null) {
                            var result154 = [result156, result157, result158, result159, result160, result161, result162];
                          } else {
                            var result154 = null;
                            pos = savedPos22;
                          }
                        } else {
                          var result154 = null;
                          pos = savedPos22;
                        }
                      } else {
                        var result154 = null;
                        pos = savedPos22;
                      }
                    } else {
                      var result154 = null;
                      pos = savedPos22;
                    }
                  } else {
                    var result154 = null;
                    pos = savedPos22;
                  }
                } else {
                  var result154 = null;
                  pos = savedPos22;
                }
              } else {
                var result154 = null;
                pos = savedPos22;
              }
              var result155 = result154 !== null
                ? (function(e) {
                      var ex = {};
                      ex.token = 'expression'
                      ex.expressionType = 'builtincall'
                      ex.builtincall = 'datatype'
                      ex.args = [e]
                
                      return ex;
                })(result154[4])
                : null;
              if (result155 !== null) {
                var result153 = result155;
              } else {
                var result153 = null;
                pos = savedPos21;
              }
              if (result153 !== null) {
                var result0 = result153;
              } else {
                var savedPos19 = pos;
                var savedPos20 = pos;
                if (input.substr(pos, 5) === "BOUND") {
                  var result143 = "BOUND";
                  pos += 5;
                } else {
                  var result143 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"BOUND\"");
                  }
                }
                if (result143 !== null) {
                  var result144 = [];
                  var result152 = parse_WS();
                  while (result152 !== null) {
                    result144.push(result152);
                    var result152 = parse_WS();
                  }
                  if (result144 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result145 = "(";
                      pos += 1;
                    } else {
                      var result145 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result145 !== null) {
                      var result146 = [];
                      var result151 = parse_WS();
                      while (result151 !== null) {
                        result146.push(result151);
                        var result151 = parse_WS();
                      }
                      if (result146 !== null) {
                        var result147 = parse_Var();
                        if (result147 !== null) {
                          var result148 = [];
                          var result150 = parse_WS();
                          while (result150 !== null) {
                            result148.push(result150);
                            var result150 = parse_WS();
                          }
                          if (result148 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result149 = ")";
                              pos += 1;
                            } else {
                              var result149 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result149 !== null) {
                              var result141 = [result143, result144, result145, result146, result147, result148, result149];
                            } else {
                              var result141 = null;
                              pos = savedPos20;
                            }
                          } else {
                            var result141 = null;
                            pos = savedPos20;
                          }
                        } else {
                          var result141 = null;
                          pos = savedPos20;
                        }
                      } else {
                        var result141 = null;
                        pos = savedPos20;
                      }
                    } else {
                      var result141 = null;
                      pos = savedPos20;
                    }
                  } else {
                    var result141 = null;
                    pos = savedPos20;
                  }
                } else {
                  var result141 = null;
                  pos = savedPos20;
                }
                var result142 = result141 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression'
                        ex.expressionType = 'builtincall'
                        ex.builtincall = 'bound'
                        ex.args = [v]
                  
                        return ex;
                  })(result141[4])
                  : null;
                if (result142 !== null) {
                  var result140 = result142;
                } else {
                  var result140 = null;
                  pos = savedPos19;
                }
                if (result140 !== null) {
                  var result0 = result140;
                } else {
                  var savedPos17 = pos;
                  var savedPos18 = pos;
                  if (input.substr(pos, 3) === "IRI") {
                    var result130 = "IRI";
                    pos += 3;
                  } else {
                    var result130 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"IRI\"");
                    }
                  }
                  if (result130 !== null) {
                    var result131 = [];
                    var result139 = parse_WS();
                    while (result139 !== null) {
                      result131.push(result139);
                      var result139 = parse_WS();
                    }
                    if (result131 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result132 = "(";
                        pos += 1;
                      } else {
                        var result132 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result132 !== null) {
                        var result133 = [];
                        var result138 = parse_WS();
                        while (result138 !== null) {
                          result133.push(result138);
                          var result138 = parse_WS();
                        }
                        if (result133 !== null) {
                          var result134 = parse_ConditionalOrExpression();
                          if (result134 !== null) {
                            var result135 = [];
                            var result137 = parse_WS();
                            while (result137 !== null) {
                              result135.push(result137);
                              var result137 = parse_WS();
                            }
                            if (result135 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result136 = ")";
                                pos += 1;
                              } else {
                                var result136 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result136 !== null) {
                                var result128 = [result130, result131, result132, result133, result134, result135, result136];
                              } else {
                                var result128 = null;
                                pos = savedPos18;
                              }
                            } else {
                              var result128 = null;
                              pos = savedPos18;
                            }
                          } else {
                            var result128 = null;
                            pos = savedPos18;
                          }
                        } else {
                          var result128 = null;
                          pos = savedPos18;
                        }
                      } else {
                        var result128 = null;
                        pos = savedPos18;
                      }
                    } else {
                      var result128 = null;
                      pos = savedPos18;
                    }
                  } else {
                    var result128 = null;
                    pos = savedPos18;
                  }
                  var result129 = result128 !== null
                    ? (function(e) {
                          var ex = {};
                          ex.token = 'expression';
                          ex.expressionType = 'builtincall';
                          ex.builtincall = 'iri'
                          ex.args = [e];
                    
                          return ex;
                    })(result128[4])
                    : null;
                  if (result129 !== null) {
                    var result127 = result129;
                  } else {
                    var result127 = null;
                    pos = savedPos17;
                  }
                  if (result127 !== null) {
                    var result0 = result127;
                  } else {
                    var savedPos15 = pos;
                    var savedPos16 = pos;
                    if (input.substr(pos, 3) === "URI") {
                      var result117 = "URI";
                      pos += 3;
                    } else {
                      var result117 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"URI\"");
                      }
                    }
                    if (result117 !== null) {
                      var result118 = [];
                      var result126 = parse_WS();
                      while (result126 !== null) {
                        result118.push(result126);
                        var result126 = parse_WS();
                      }
                      if (result118 !== null) {
                        if (input.substr(pos, 1) === "(") {
                          var result119 = "(";
                          pos += 1;
                        } else {
                          var result119 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"(\"");
                          }
                        }
                        if (result119 !== null) {
                          var result120 = [];
                          var result125 = parse_WS();
                          while (result125 !== null) {
                            result120.push(result125);
                            var result125 = parse_WS();
                          }
                          if (result120 !== null) {
                            var result121 = parse_ConditionalOrExpression();
                            if (result121 !== null) {
                              var result122 = [];
                              var result124 = parse_WS();
                              while (result124 !== null) {
                                result122.push(result124);
                                var result124 = parse_WS();
                              }
                              if (result122 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result123 = ")";
                                  pos += 1;
                                } else {
                                  var result123 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result123 !== null) {
                                  var result115 = [result117, result118, result119, result120, result121, result122, result123];
                                } else {
                                  var result115 = null;
                                  pos = savedPos16;
                                }
                              } else {
                                var result115 = null;
                                pos = savedPos16;
                              }
                            } else {
                              var result115 = null;
                              pos = savedPos16;
                            }
                          } else {
                            var result115 = null;
                            pos = savedPos16;
                          }
                        } else {
                          var result115 = null;
                          pos = savedPos16;
                        }
                      } else {
                        var result115 = null;
                        pos = savedPos16;
                      }
                    } else {
                      var result115 = null;
                      pos = savedPos16;
                    }
                    var result116 = result115 !== null
                      ? (function(e) {
                            var ex = {};
                            ex.token = 'expression';
                            ex.expressionType = 'builtincall';
                            ex.builtincall = 'uri'
                            ex.args = [e];
                      
                            return ex;
                      })(result115[4])
                      : null;
                    if (result116 !== null) {
                      var result114 = result116;
                    } else {
                      var result114 = null;
                      pos = savedPos15;
                    }
                    if (result114 !== null) {
                      var result0 = result114;
                    } else {
                      var savedPos12 = pos;
                      var savedPos13 = pos;
                      if (input.substr(pos, 5) === "BNODE") {
                        var result101 = "BNODE";
                        pos += 5;
                      } else {
                        var result101 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"BNODE\"");
                        }
                      }
                      if (result101 !== null) {
                        var result102 = [];
                        var result113 = parse_WS();
                        while (result113 !== null) {
                          result102.push(result113);
                          var result113 = parse_WS();
                        }
                        if (result102 !== null) {
                          var savedPos14 = pos;
                          if (input.substr(pos, 1) === "(") {
                            var result106 = "(";
                            pos += 1;
                          } else {
                            var result106 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"(\"");
                            }
                          }
                          if (result106 !== null) {
                            var result107 = [];
                            var result112 = parse_WS();
                            while (result112 !== null) {
                              result107.push(result112);
                              var result112 = parse_WS();
                            }
                            if (result107 !== null) {
                              var result108 = parse_ConditionalOrExpression();
                              if (result108 !== null) {
                                var result109 = [];
                                var result111 = parse_WS();
                                while (result111 !== null) {
                                  result109.push(result111);
                                  var result111 = parse_WS();
                                }
                                if (result109 !== null) {
                                  if (input.substr(pos, 1) === ")") {
                                    var result110 = ")";
                                    pos += 1;
                                  } else {
                                    var result110 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\")\"");
                                    }
                                  }
                                  if (result110 !== null) {
                                    var result105 = [result106, result107, result108, result109, result110];
                                  } else {
                                    var result105 = null;
                                    pos = savedPos14;
                                  }
                                } else {
                                  var result105 = null;
                                  pos = savedPos14;
                                }
                              } else {
                                var result105 = null;
                                pos = savedPos14;
                              }
                            } else {
                              var result105 = null;
                              pos = savedPos14;
                            }
                          } else {
                            var result105 = null;
                            pos = savedPos14;
                          }
                          if (result105 !== null) {
                            var result103 = result105;
                          } else {
                            var result104 = parse_NIL();
                            if (result104 !== null) {
                              var result103 = result104;
                            } else {
                              var result103 = null;;
                            };
                          }
                          if (result103 !== null) {
                            var result99 = [result101, result102, result103];
                          } else {
                            var result99 = null;
                            pos = savedPos13;
                          }
                        } else {
                          var result99 = null;
                          pos = savedPos13;
                        }
                      } else {
                        var result99 = null;
                        pos = savedPos13;
                      }
                      var result100 = result99 !== null
                        ? (function(arg) {
                              var ex = {};
                              ex.token = 'expression';
                              ex.expressionType = 'builtincall';
                              ex.builtincall = 'bnode';
                              if(arg.length === 5) {
                                  ex.args = [arg[2]];
                              } else {
                                  ex.args = null;
                              }
                        
                              return ex;
                        })(result99[2])
                        : null;
                      if (result100 !== null) {
                        var result98 = result100;
                      } else {
                        var result98 = null;
                        pos = savedPos12;
                      }
                      if (result98 !== null) {
                        var result0 = result98;
                      } else {
                        var savedPos10 = pos;
                        var savedPos11 = pos;
                        if (input.substr(pos, 8) === "COALESCE") {
                          var result94 = "COALESCE";
                          pos += 8;
                        } else {
                          var result94 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"COALESCE\"");
                          }
                        }
                        if (result94 !== null) {
                          var result95 = [];
                          var result97 = parse_WS();
                          while (result97 !== null) {
                            result95.push(result97);
                            var result97 = parse_WS();
                          }
                          if (result95 !== null) {
                            var result96 = parse_ExpressionList();
                            if (result96 !== null) {
                              var result92 = [result94, result95, result96];
                            } else {
                              var result92 = null;
                              pos = savedPos11;
                            }
                          } else {
                            var result92 = null;
                            pos = savedPos11;
                          }
                        } else {
                          var result92 = null;
                          pos = savedPos11;
                        }
                        var result93 = result92 !== null
                          ? (function(args) {
                                var ex = {};
                                ex.token = 'expression';
                                ex.expressionType = 'builtincall';
                                ex.builtincall = 'coalesce';
                                ex.args = args;
                          
                                return ex;    
                          })(result92[2])
                          : null;
                        if (result93 !== null) {
                          var result91 = result93;
                        } else {
                          var result91 = null;
                          pos = savedPos10;
                        }
                        if (result91 !== null) {
                          var result0 = result91;
                        } else {
                          var savedPos8 = pos;
                          var savedPos9 = pos;
                          if (input.substr(pos, 2) === "IF") {
                            var result69 = "IF";
                            pos += 2;
                          } else {
                            var result69 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"IF\"");
                            }
                          }
                          if (result69 !== null) {
                            var result70 = [];
                            var result90 = parse_WS();
                            while (result90 !== null) {
                              result70.push(result90);
                              var result90 = parse_WS();
                            }
                            if (result70 !== null) {
                              if (input.substr(pos, 1) === "(") {
                                var result71 = "(";
                                pos += 1;
                              } else {
                                var result71 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"(\"");
                                }
                              }
                              if (result71 !== null) {
                                var result72 = [];
                                var result89 = parse_WS();
                                while (result89 !== null) {
                                  result72.push(result89);
                                  var result89 = parse_WS();
                                }
                                if (result72 !== null) {
                                  var result73 = parse_ConditionalOrExpression();
                                  if (result73 !== null) {
                                    var result74 = [];
                                    var result88 = parse_WS();
                                    while (result88 !== null) {
                                      result74.push(result88);
                                      var result88 = parse_WS();
                                    }
                                    if (result74 !== null) {
                                      if (input.substr(pos, 1) === ",") {
                                        var result75 = ",";
                                        pos += 1;
                                      } else {
                                        var result75 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\",\"");
                                        }
                                      }
                                      if (result75 !== null) {
                                        var result76 = [];
                                        var result87 = parse_WS();
                                        while (result87 !== null) {
                                          result76.push(result87);
                                          var result87 = parse_WS();
                                        }
                                        if (result76 !== null) {
                                          var result77 = parse_ConditionalOrExpression();
                                          if (result77 !== null) {
                                            var result78 = [];
                                            var result86 = parse_WS();
                                            while (result86 !== null) {
                                              result78.push(result86);
                                              var result86 = parse_WS();
                                            }
                                            if (result78 !== null) {
                                              if (input.substr(pos, 1) === ",") {
                                                var result79 = ",";
                                                pos += 1;
                                              } else {
                                                var result79 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\",\"");
                                                }
                                              }
                                              if (result79 !== null) {
                                                var result80 = [];
                                                var result85 = parse_WS();
                                                while (result85 !== null) {
                                                  result80.push(result85);
                                                  var result85 = parse_WS();
                                                }
                                                if (result80 !== null) {
                                                  var result81 = parse_ConditionalOrExpression();
                                                  if (result81 !== null) {
                                                    var result82 = [];
                                                    var result84 = parse_WS();
                                                    while (result84 !== null) {
                                                      result82.push(result84);
                                                      var result84 = parse_WS();
                                                    }
                                                    if (result82 !== null) {
                                                      if (input.substr(pos, 1) === ")") {
                                                        var result83 = ")";
                                                        pos += 1;
                                                      } else {
                                                        var result83 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\")\"");
                                                        }
                                                      }
                                                      if (result83 !== null) {
                                                        var result67 = [result69, result70, result71, result72, result73, result74, result75, result76, result77, result78, result79, result80, result81, result82, result83];
                                                      } else {
                                                        var result67 = null;
                                                        pos = savedPos9;
                                                      }
                                                    } else {
                                                      var result67 = null;
                                                      pos = savedPos9;
                                                    }
                                                  } else {
                                                    var result67 = null;
                                                    pos = savedPos9;
                                                  }
                                                } else {
                                                  var result67 = null;
                                                  pos = savedPos9;
                                                }
                                              } else {
                                                var result67 = null;
                                                pos = savedPos9;
                                              }
                                            } else {
                                              var result67 = null;
                                              pos = savedPos9;
                                            }
                                          } else {
                                            var result67 = null;
                                            pos = savedPos9;
                                          }
                                        } else {
                                          var result67 = null;
                                          pos = savedPos9;
                                        }
                                      } else {
                                        var result67 = null;
                                        pos = savedPos9;
                                      }
                                    } else {
                                      var result67 = null;
                                      pos = savedPos9;
                                    }
                                  } else {
                                    var result67 = null;
                                    pos = savedPos9;
                                  }
                                } else {
                                  var result67 = null;
                                  pos = savedPos9;
                                }
                              } else {
                                var result67 = null;
                                pos = savedPos9;
                              }
                            } else {
                              var result67 = null;
                              pos = savedPos9;
                            }
                          } else {
                            var result67 = null;
                            pos = savedPos9;
                          }
                          var result68 = result67 !== null
                            ? (function(test, trueCond, falseCond) {
                                var ex = {};
                                ex.token = 'expression';
                                ex.expressionType = 'builtincall';
                                ex.builtincall = 'if';
                                ex.args = [test,trueCond,falseCond];
                            
                                return ex;
                            })(result67[4], result67[8], result67[12])
                            : null;
                          if (result68 !== null) {
                            var result66 = result68;
                          } else {
                            var result66 = null;
                            pos = savedPos8;
                          }
                          if (result66 !== null) {
                            var result0 = result66;
                          } else {
                            var savedPos6 = pos;
                            var savedPos7 = pos;
                            if (input.substr(pos, 9) === "ISLITERAL") {
                              var result56 = "ISLITERAL";
                              pos += 9;
                            } else {
                              var result56 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"ISLITERAL\"");
                              }
                            }
                            if (result56 !== null) {
                              var result57 = [];
                              var result65 = parse_WS();
                              while (result65 !== null) {
                                result57.push(result65);
                                var result65 = parse_WS();
                              }
                              if (result57 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                  var result58 = "(";
                                  pos += 1;
                                } else {
                                  var result58 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                  }
                                }
                                if (result58 !== null) {
                                  var result59 = [];
                                  var result64 = parse_WS();
                                  while (result64 !== null) {
                                    result59.push(result64);
                                    var result64 = parse_WS();
                                  }
                                  if (result59 !== null) {
                                    var result60 = parse_ConditionalOrExpression();
                                    if (result60 !== null) {
                                      var result61 = [];
                                      var result63 = parse_WS();
                                      while (result63 !== null) {
                                        result61.push(result63);
                                        var result63 = parse_WS();
                                      }
                                      if (result61 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                          var result62 = ")";
                                          pos += 1;
                                        } else {
                                          var result62 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result62 !== null) {
                                          var result54 = [result56, result57, result58, result59, result60, result61, result62];
                                        } else {
                                          var result54 = null;
                                          pos = savedPos7;
                                        }
                                      } else {
                                        var result54 = null;
                                        pos = savedPos7;
                                      }
                                    } else {
                                      var result54 = null;
                                      pos = savedPos7;
                                    }
                                  } else {
                                    var result54 = null;
                                    pos = savedPos7;
                                  }
                                } else {
                                  var result54 = null;
                                  pos = savedPos7;
                                }
                              } else {
                                var result54 = null;
                                pos = savedPos7;
                              }
                            } else {
                              var result54 = null;
                              pos = savedPos7;
                            }
                            var result55 = result54 !== null
                              ? (function(arg) {
                                  var ex = {};
                                  ex.token = 'expression';
                                  ex.expressionType = 'builtincall';
                                  ex.builtincall = 'isliteral';
                                  ex.args = [arg];
                              
                                  return ex;
                              })(result54[4])
                              : null;
                            if (result55 !== null) {
                              var result53 = result55;
                            } else {
                              var result53 = null;
                              pos = savedPos6;
                            }
                            if (result53 !== null) {
                              var result0 = result53;
                            } else {
                              var savedPos4 = pos;
                              var savedPos5 = pos;
                              if (input.substr(pos, 7) === "ISBLANK") {
                                var result43 = "ISBLANK";
                                pos += 7;
                              } else {
                                var result43 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"ISBLANK\"");
                                }
                              }
                              if (result43 !== null) {
                                var result44 = [];
                                var result52 = parse_WS();
                                while (result52 !== null) {
                                  result44.push(result52);
                                  var result52 = parse_WS();
                                }
                                if (result44 !== null) {
                                  if (input.substr(pos, 1) === "(") {
                                    var result45 = "(";
                                    pos += 1;
                                  } else {
                                    var result45 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"(\"");
                                    }
                                  }
                                  if (result45 !== null) {
                                    var result46 = [];
                                    var result51 = parse_WS();
                                    while (result51 !== null) {
                                      result46.push(result51);
                                      var result51 = parse_WS();
                                    }
                                    if (result46 !== null) {
                                      var result47 = parse_ConditionalOrExpression();
                                      if (result47 !== null) {
                                        var result48 = [];
                                        var result50 = parse_WS();
                                        while (result50 !== null) {
                                          result48.push(result50);
                                          var result50 = parse_WS();
                                        }
                                        if (result48 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result49 = ")";
                                            pos += 1;
                                          } else {
                                            var result49 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result49 !== null) {
                                            var result41 = [result43, result44, result45, result46, result47, result48, result49];
                                          } else {
                                            var result41 = null;
                                            pos = savedPos5;
                                          }
                                        } else {
                                          var result41 = null;
                                          pos = savedPos5;
                                        }
                                      } else {
                                        var result41 = null;
                                        pos = savedPos5;
                                      }
                                    } else {
                                      var result41 = null;
                                      pos = savedPos5;
                                    }
                                  } else {
                                    var result41 = null;
                                    pos = savedPos5;
                                  }
                                } else {
                                  var result41 = null;
                                  pos = savedPos5;
                                }
                              } else {
                                var result41 = null;
                                pos = savedPos5;
                              }
                              var result42 = result41 !== null
                                ? (function(arg) {
                                    var ex = {};
                                    ex.token = 'expression';
                                    ex.expressionType = 'builtincall';
                                    ex.builtincall = 'isblank';
                                    ex.args = [arg];
                                
                                    return ex;
                                })(result41[4])
                                : null;
                              if (result42 !== null) {
                                var result40 = result42;
                              } else {
                                var result40 = null;
                                pos = savedPos4;
                              }
                              if (result40 !== null) {
                                var result0 = result40;
                              } else {
                                var savedPos2 = pos;
                                var savedPos3 = pos;
                                if (input.substr(pos, 8) === "SAMETERM") {
                                  var result24 = "SAMETERM";
                                  pos += 8;
                                } else {
                                  var result24 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"SAMETERM\"");
                                  }
                                }
                                if (result24 !== null) {
                                  var result25 = [];
                                  var result39 = parse_WS();
                                  while (result39 !== null) {
                                    result25.push(result39);
                                    var result39 = parse_WS();
                                  }
                                  if (result25 !== null) {
                                    if (input.substr(pos, 1) === "(") {
                                      var result26 = "(";
                                      pos += 1;
                                    } else {
                                      var result26 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                      }
                                    }
                                    if (result26 !== null) {
                                      var result27 = [];
                                      var result38 = parse_WS();
                                      while (result38 !== null) {
                                        result27.push(result38);
                                        var result38 = parse_WS();
                                      }
                                      if (result27 !== null) {
                                        var result28 = parse_ConditionalOrExpression();
                                        if (result28 !== null) {
                                          var result29 = [];
                                          var result37 = parse_WS();
                                          while (result37 !== null) {
                                            result29.push(result37);
                                            var result37 = parse_WS();
                                          }
                                          if (result29 !== null) {
                                            if (input.substr(pos, 1) === ",") {
                                              var result30 = ",";
                                              pos += 1;
                                            } else {
                                              var result30 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\",\"");
                                              }
                                            }
                                            if (result30 !== null) {
                                              var result31 = [];
                                              var result36 = parse_WS();
                                              while (result36 !== null) {
                                                result31.push(result36);
                                                var result36 = parse_WS();
                                              }
                                              if (result31 !== null) {
                                                var result32 = parse_ConditionalOrExpression();
                                                if (result32 !== null) {
                                                  var result33 = [];
                                                  var result35 = parse_WS();
                                                  while (result35 !== null) {
                                                    result33.push(result35);
                                                    var result35 = parse_WS();
                                                  }
                                                  if (result33 !== null) {
                                                    if (input.substr(pos, 1) === ")") {
                                                      var result34 = ")";
                                                      pos += 1;
                                                    } else {
                                                      var result34 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\")\"");
                                                      }
                                                    }
                                                    if (result34 !== null) {
                                                      var result22 = [result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34];
                                                    } else {
                                                      var result22 = null;
                                                      pos = savedPos3;
                                                    }
                                                  } else {
                                                    var result22 = null;
                                                    pos = savedPos3;
                                                  }
                                                } else {
                                                  var result22 = null;
                                                  pos = savedPos3;
                                                }
                                              } else {
                                                var result22 = null;
                                                pos = savedPos3;
                                              }
                                            } else {
                                              var result22 = null;
                                              pos = savedPos3;
                                            }
                                          } else {
                                            var result22 = null;
                                            pos = savedPos3;
                                          }
                                        } else {
                                          var result22 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result22 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result22 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result22 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result22 = null;
                                  pos = savedPos3;
                                }
                                var result23 = result22 !== null
                                  ? (function(e1, e2) {
                                      var ex = {};
                                      ex.token = 'expression';
                                      ex.expressionType = 'builtincall';
                                      ex.builtincall = 'sameterm';
                                      ex.args = [e1, e2];
                                      return ex;
                                  })(result22[4], result22[8])
                                  : null;
                                if (result23 !== null) {
                                  var result21 = result23;
                                } else {
                                  var result21 = null;
                                  pos = savedPos2;
                                }
                                if (result21 !== null) {
                                  var result0 = result21;
                                } else {
                                  var savedPos0 = pos;
                                  var savedPos1 = pos;
                                  if (input.substr(pos, 5) === "ISURI") {
                                    var result20 = "ISURI";
                                    pos += 5;
                                  } else {
                                    var result20 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"ISURI\"");
                                    }
                                  }
                                  if (result20 !== null) {
                                    var result7 = result20;
                                  } else {
                                    if (input.substr(pos, 5) === "isuri") {
                                      var result19 = "isuri";
                                      pos += 5;
                                    } else {
                                      var result19 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"isuri\"");
                                      }
                                    }
                                    if (result19 !== null) {
                                      var result7 = result19;
                                    } else {
                                      if (input.substr(pos, 5) === "ISIRI") {
                                        var result18 = "ISIRI";
                                        pos += 5;
                                      } else {
                                        var result18 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"ISIRI\"");
                                        }
                                      }
                                      if (result18 !== null) {
                                        var result7 = result18;
                                      } else {
                                        if (input.substr(pos, 5) === "isiri") {
                                          var result17 = "isiri";
                                          pos += 5;
                                        } else {
                                          var result17 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"isiri\"");
                                          }
                                        }
                                        if (result17 !== null) {
                                          var result7 = result17;
                                        } else {
                                          var result7 = null;;
                                        };
                                      };
                                    };
                                  }
                                  if (result7 !== null) {
                                    var result8 = [];
                                    var result16 = parse_WS();
                                    while (result16 !== null) {
                                      result8.push(result16);
                                      var result16 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                      if (input.substr(pos, 1) === "(") {
                                        var result9 = "(";
                                        pos += 1;
                                      } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"(\"");
                                        }
                                      }
                                      if (result9 !== null) {
                                        var result10 = [];
                                        var result15 = parse_WS();
                                        while (result15 !== null) {
                                          result10.push(result15);
                                          var result15 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                          var result11 = parse_ConditionalOrExpression();
                                          if (result11 !== null) {
                                            var result12 = [];
                                            var result14 = parse_WS();
                                            while (result14 !== null) {
                                              result12.push(result14);
                                              var result14 = parse_WS();
                                            }
                                            if (result12 !== null) {
                                              if (input.substr(pos, 1) === ")") {
                                                var result13 = ")";
                                                pos += 1;
                                              } else {
                                                var result13 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\")\"");
                                                }
                                              }
                                              if (result13 !== null) {
                                                var result5 = [result7, result8, result9, result10, result11, result12, result13];
                                              } else {
                                                var result5 = null;
                                                pos = savedPos1;
                                              }
                                            } else {
                                              var result5 = null;
                                              pos = savedPos1;
                                            }
                                          } else {
                                            var result5 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result5 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result5 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result5 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result5 = null;
                                    pos = savedPos1;
                                  }
                                  var result6 = result5 !== null
                                    ? (function(arg) {
                                        var ex = {};
                                        ex.token = 'expression';
                                        ex.expressionType = 'builtincall';
                                        ex.builtincall = 'isuri';
                                        ex.args = [arg];
                                    
                                        return ex;
                                    })(result5[4])
                                    : null;
                                  if (result6 !== null) {
                                    var result4 = result6;
                                  } else {
                                    var result4 = null;
                                    pos = savedPos0;
                                  }
                                  if (result4 !== null) {
                                    var result0 = result4;
                                  } else {
                                    var result3 = parse_RegexExpression();
                                    if (result3 !== null) {
                                      var result0 = result3;
                                    } else {
                                      var result2 = parse_ExistsFunc();
                                      if (result2 !== null) {
                                        var result0 = result2;
                                      } else {
                                        var result1 = parse_NotExistsFunc();
                                        if (result1 !== null) {
                                          var result0 = result1;
                                        } else {
                                          var result0 = null;;
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[106] BuiltInCall");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RegexExpression() {
        var cacheKey = 'RegexExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 5) === "REGEX") {
          var result28 = "REGEX";
          pos += 5;
        } else {
          var result28 = null;
          if (reportMatchFailures) {
            matchFailed("\"REGEX\"");
          }
        }
        if (result28 !== null) {
          var result3 = result28;
        } else {
          if (input.substr(pos, 5) === "regex") {
            var result27 = "regex";
            pos += 5;
          } else {
            var result27 = null;
            if (reportMatchFailures) {
              matchFailed("\"regex\"");
            }
          }
          if (result27 !== null) {
            var result3 = result27;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result26 = parse_WS();
          while (result26 !== null) {
            result4.push(result26);
            var result26 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = [];
              var result25 = parse_WS();
              while (result25 !== null) {
                result6.push(result25);
                var result25 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_ConditionalOrExpression();
                if (result7 !== null) {
                  var result8 = [];
                  var result24 = parse_WS();
                  while (result24 !== null) {
                    result8.push(result24);
                    var result24 = parse_WS();
                  }
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ",") {
                      var result9 = ",";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\",\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = [];
                      var result23 = parse_WS();
                      while (result23 !== null) {
                        result10.push(result23);
                        var result23 = parse_WS();
                      }
                      if (result10 !== null) {
                        var result11 = parse_ConditionalOrExpression();
                        if (result11 !== null) {
                          var result12 = [];
                          var result22 = parse_WS();
                          while (result22 !== null) {
                            result12.push(result22);
                            var result22 = parse_WS();
                          }
                          if (result12 !== null) {
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === ",") {
                              var result18 = ",";
                              pos += 1;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result18 !== null) {
                              var result19 = [];
                              var result21 = parse_WS();
                              while (result21 !== null) {
                                result19.push(result21);
                                var result21 = parse_WS();
                              }
                              if (result19 !== null) {
                                var result20 = parse_ConditionalOrExpression();
                                if (result20 !== null) {
                                  var result17 = [result18, result19, result20];
                                } else {
                                  var result17 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result17 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result17 = null;
                              pos = savedPos2;
                            }
                            var result13 = result17 !== null ? result17 : '';
                            if (result13 !== null) {
                              var result14 = [];
                              var result16 = parse_WS();
                              while (result16 !== null) {
                                result14.push(result16);
                                var result16 = parse_WS();
                              }
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result15 = ")";
                                  pos += 1;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(e1, e2, eo) {
                var regex = {};
                regex.token = 'expression';
                regex.expressionType = 'regex';
                regex.text = e1;
                regex.pattern = e2;
                regex.flags = eo[2];
          
                return regex;
          })(result1[4], result1[8], result1[10])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[107] RegexExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExistsFunc() {
        var cacheKey = 'ExistsFunc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "EXISTS") {
          var result8 = "EXISTS";
          pos += 6;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"EXISTS\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 6) === "exists") {
            var result7 = "exists";
            pos += 6;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"exists\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_WS();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_WS();
          }
          if (result4 !== null) {
            var result5 = parse_GroupGraphPattern();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'exists';
              ex.args = [ggp];
          
              return ex;
          })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[108] ExistsFunc");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NotExistsFunc() {
        var cacheKey = 'NotExistsFunc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "NOT") {
          var result13 = "NOT";
          pos += 3;
        } else {
          var result13 = null;
          if (reportMatchFailures) {
            matchFailed("\"NOT\"");
          }
        }
        if (result13 !== null) {
          var result3 = result13;
        } else {
          if (input.substr(pos, 3) === "not") {
            var result12 = "not";
            pos += 3;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"not\"");
            }
          }
          if (result12 !== null) {
            var result3 = result12;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result4.push(result11);
            var result11 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 6) === "EXISTS") {
              var result10 = "EXISTS";
              pos += 6;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"EXISTS\"");
              }
            }
            if (result10 !== null) {
              var result5 = result10;
            } else {
              if (input.substr(pos, 6) === "exists") {
                var result9 = "exists";
                pos += 6;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"exists\"");
                }
              }
              if (result9 !== null) {
                var result5 = result9;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result6 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result6.push(result8);
                var result8 = parse_WS();
              }
              if (result6 !== null) {
                var result7 = parse_GroupGraphPattern();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'notexists';
              ex.args = [ggp];
          
              return ex;
          })(result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[109] NotExistsFunc");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Aggregate() {
        var cacheKey = 'Aggregate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos8 = pos;
        var savedPos9 = pos;
        if (input.substr(pos, 5) === "COUNT") {
          var result117 = "COUNT";
          pos += 5;
        } else {
          var result117 = null;
          if (reportMatchFailures) {
            matchFailed("\"COUNT\"");
          }
        }
        if (result117 !== null) {
          var result96 = result117;
        } else {
          if (input.substr(pos, 5) === "count") {
            var result116 = "count";
            pos += 5;
          } else {
            var result116 = null;
            if (reportMatchFailures) {
              matchFailed("\"count\"");
            }
          }
          if (result116 !== null) {
            var result96 = result116;
          } else {
            var result96 = null;;
          };
        }
        if (result96 !== null) {
          var result97 = [];
          var result115 = parse_WS();
          while (result115 !== null) {
            result97.push(result115);
            var result115 = parse_WS();
          }
          if (result97 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result98 = "(";
              pos += 1;
            } else {
              var result98 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result98 !== null) {
              var result99 = [];
              var result114 = parse_WS();
              while (result114 !== null) {
                result99.push(result114);
                var result114 = parse_WS();
              }
              if (result99 !== null) {
                if (input.substr(pos, 8) === "DISTINCT") {
                  var result113 = "DISTINCT";
                  pos += 8;
                } else {
                  var result113 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"DISTINCT\"");
                  }
                }
                if (result113 !== null) {
                  var result111 = result113;
                } else {
                  if (input.substr(pos, 8) === "distinct") {
                    var result112 = "distinct";
                    pos += 8;
                  } else {
                    var result112 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"distinct\"");
                    }
                  }
                  if (result112 !== null) {
                    var result111 = result112;
                  } else {
                    var result111 = null;;
                  };
                }
                var result100 = result111 !== null ? result111 : '';
                if (result100 !== null) {
                  var result101 = [];
                  var result110 = parse_WS();
                  while (result110 !== null) {
                    result101.push(result110);
                    var result110 = parse_WS();
                  }
                  if (result101 !== null) {
                    if (input.substr(pos, 1) === "*") {
                      var result109 = "*";
                      pos += 1;
                    } else {
                      var result109 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result109 !== null) {
                      var result102 = result109;
                    } else {
                      var result108 = parse_ConditionalOrExpression();
                      if (result108 !== null) {
                        var result102 = result108;
                      } else {
                        var result102 = null;;
                      };
                    }
                    if (result102 !== null) {
                      var result103 = [];
                      var result107 = parse_WS();
                      while (result107 !== null) {
                        result103.push(result107);
                        var result107 = parse_WS();
                      }
                      if (result103 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result104 = ")";
                          pos += 1;
                        } else {
                          var result104 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result104 !== null) {
                          var result105 = [];
                          var result106 = parse_WS();
                          while (result106 !== null) {
                            result105.push(result106);
                            var result106 = parse_WS();
                          }
                          if (result105 !== null) {
                            var result94 = [result96, result97, result98, result99, result100, result101, result102, result103, result104, result105];
                          } else {
                            var result94 = null;
                            pos = savedPos9;
                          }
                        } else {
                          var result94 = null;
                          pos = savedPos9;
                        }
                      } else {
                        var result94 = null;
                        pos = savedPos9;
                      }
                    } else {
                      var result94 = null;
                      pos = savedPos9;
                    }
                  } else {
                    var result94 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result94 = null;
                  pos = savedPos9;
                }
              } else {
                var result94 = null;
                pos = savedPos9;
              }
            } else {
              var result94 = null;
              pos = savedPos9;
            }
          } else {
            var result94 = null;
            pos = savedPos9;
          }
        } else {
          var result94 = null;
          pos = savedPos9;
        }
        var result95 = result94 !== null
          ? (function(d, e) {
                exp = {};
                exp.token = 'expression';
                exp.expressionType = 'aggregate';
                exp.aggregateType = 'count';
                exp.distinct = (d != "" ? 'DISTINCT' : d);
                exp.expression = e;
          
                return exp;
          
            })(result94[4], result94[6])
          : null;
        if (result95 !== null) {
          var result93 = result95;
        } else {
          var result93 = null;
          pos = savedPos8;
        }
        if (result93 !== null) {
          var result0 = result93;
        } else {
          var savedPos6 = pos;
          var savedPos7 = pos;
          if (input.substr(pos, 3) === "SUM") {
            var result92 = "SUM";
            pos += 3;
          } else {
            var result92 = null;
            if (reportMatchFailures) {
              matchFailed("\"SUM\"");
            }
          }
          if (result92 !== null) {
            var result73 = result92;
          } else {
            if (input.substr(pos, 3) === "sum") {
              var result91 = "sum";
              pos += 3;
            } else {
              var result91 = null;
              if (reportMatchFailures) {
                matchFailed("\"sum\"");
              }
            }
            if (result91 !== null) {
              var result73 = result91;
            } else {
              var result73 = null;;
            };
          }
          if (result73 !== null) {
            var result74 = [];
            var result90 = parse_WS();
            while (result90 !== null) {
              result74.push(result90);
              var result90 = parse_WS();
            }
            if (result74 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result75 = "(";
                pos += 1;
              } else {
                var result75 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result75 !== null) {
                var result76 = [];
                var result89 = parse_WS();
                while (result89 !== null) {
                  result76.push(result89);
                  var result89 = parse_WS();
                }
                if (result76 !== null) {
                  if (input.substr(pos, 8) === "DISTINCT") {
                    var result88 = "DISTINCT";
                    pos += 8;
                  } else {
                    var result88 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"DISTINCT\"");
                    }
                  }
                  if (result88 !== null) {
                    var result86 = result88;
                  } else {
                    if (input.substr(pos, 8) === "distinct") {
                      var result87 = "distinct";
                      pos += 8;
                    } else {
                      var result87 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"distinct\"");
                      }
                    }
                    if (result87 !== null) {
                      var result86 = result87;
                    } else {
                      var result86 = null;;
                    };
                  }
                  var result77 = result86 !== null ? result86 : '';
                  if (result77 !== null) {
                    var result78 = [];
                    var result85 = parse_WS();
                    while (result85 !== null) {
                      result78.push(result85);
                      var result85 = parse_WS();
                    }
                    if (result78 !== null) {
                      var result79 = parse_ConditionalOrExpression();
                      if (result79 !== null) {
                        var result80 = [];
                        var result84 = parse_WS();
                        while (result84 !== null) {
                          result80.push(result84);
                          var result84 = parse_WS();
                        }
                        if (result80 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result81 = ")";
                            pos += 1;
                          } else {
                            var result81 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result81 !== null) {
                            var result82 = [];
                            var result83 = parse_WS();
                            while (result83 !== null) {
                              result82.push(result83);
                              var result83 = parse_WS();
                            }
                            if (result82 !== null) {
                              var result71 = [result73, result74, result75, result76, result77, result78, result79, result80, result81, result82];
                            } else {
                              var result71 = null;
                              pos = savedPos7;
                            }
                          } else {
                            var result71 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result71 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result71 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result71 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result71 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result71 = null;
                  pos = savedPos7;
                }
              } else {
                var result71 = null;
                pos = savedPos7;
              }
            } else {
              var result71 = null;
              pos = savedPos7;
            }
          } else {
            var result71 = null;
            pos = savedPos7;
          }
          var result72 = result71 !== null
            ? (function(d, e) {
                  exp = {};
                  exp.token = 'expression';
                  exp.expressionType = 'aggregate';
                  exp.aggregateType = 'sum';
                  exp.distinct = (d != "" ? 'DISTINCT' : d);
                  exp.expression = e;
            
                  return exp;
            
              })(result71[4], result71[6])
            : null;
          if (result72 !== null) {
            var result70 = result72;
          } else {
            var result70 = null;
            pos = savedPos6;
          }
          if (result70 !== null) {
            var result0 = result70;
          } else {
            var savedPos4 = pos;
            var savedPos5 = pos;
            if (input.substr(pos, 3) === "MIN") {
              var result69 = "MIN";
              pos += 3;
            } else {
              var result69 = null;
              if (reportMatchFailures) {
                matchFailed("\"MIN\"");
              }
            }
            if (result69 !== null) {
              var result50 = result69;
            } else {
              if (input.substr(pos, 3) === "min") {
                var result68 = "min";
                pos += 3;
              } else {
                var result68 = null;
                if (reportMatchFailures) {
                  matchFailed("\"min\"");
                }
              }
              if (result68 !== null) {
                var result50 = result68;
              } else {
                var result50 = null;;
              };
            }
            if (result50 !== null) {
              var result51 = [];
              var result67 = parse_WS();
              while (result67 !== null) {
                result51.push(result67);
                var result67 = parse_WS();
              }
              if (result51 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result52 = "(";
                  pos += 1;
                } else {
                  var result52 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result52 !== null) {
                  var result53 = [];
                  var result66 = parse_WS();
                  while (result66 !== null) {
                    result53.push(result66);
                    var result66 = parse_WS();
                  }
                  if (result53 !== null) {
                    if (input.substr(pos, 8) === "DISTINCT") {
                      var result65 = "DISTINCT";
                      pos += 8;
                    } else {
                      var result65 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"DISTINCT\"");
                      }
                    }
                    if (result65 !== null) {
                      var result63 = result65;
                    } else {
                      if (input.substr(pos, 8) === "distinct") {
                        var result64 = "distinct";
                        pos += 8;
                      } else {
                        var result64 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"distinct\"");
                        }
                      }
                      if (result64 !== null) {
                        var result63 = result64;
                      } else {
                        var result63 = null;;
                      };
                    }
                    var result54 = result63 !== null ? result63 : '';
                    if (result54 !== null) {
                      var result55 = [];
                      var result62 = parse_WS();
                      while (result62 !== null) {
                        result55.push(result62);
                        var result62 = parse_WS();
                      }
                      if (result55 !== null) {
                        var result56 = parse_ConditionalOrExpression();
                        if (result56 !== null) {
                          var result57 = [];
                          var result61 = parse_WS();
                          while (result61 !== null) {
                            result57.push(result61);
                            var result61 = parse_WS();
                          }
                          if (result57 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result58 = ")";
                              pos += 1;
                            } else {
                              var result58 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result58 !== null) {
                              var result59 = [];
                              var result60 = parse_WS();
                              while (result60 !== null) {
                                result59.push(result60);
                                var result60 = parse_WS();
                              }
                              if (result59 !== null) {
                                var result48 = [result50, result51, result52, result53, result54, result55, result56, result57, result58, result59];
                              } else {
                                var result48 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result48 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result48 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result48 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result48 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result48 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result48 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result48 = null;
                  pos = savedPos5;
                }
              } else {
                var result48 = null;
                pos = savedPos5;
              }
            } else {
              var result48 = null;
              pos = savedPos5;
            }
            var result49 = result48 !== null
              ? (function(d, e) {
                    exp = {};
                    exp.token = 'expression';
                    exp.expressionType = 'aggregate';
                    exp.aggregateType = 'min';
                    exp.distinct = (d != "" ? 'DISTINCT' : d);
                    exp.expression = e;
              
                    return exp;
              
                })(result48[4], result48[6])
              : null;
            if (result49 !== null) {
              var result47 = result49;
            } else {
              var result47 = null;
              pos = savedPos4;
            }
            if (result47 !== null) {
              var result0 = result47;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 3) === "MAX") {
                var result46 = "MAX";
                pos += 3;
              } else {
                var result46 = null;
                if (reportMatchFailures) {
                  matchFailed("\"MAX\"");
                }
              }
              if (result46 !== null) {
                var result27 = result46;
              } else {
                if (input.substr(pos, 3) === "max") {
                  var result45 = "max";
                  pos += 3;
                } else {
                  var result45 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"max\"");
                  }
                }
                if (result45 !== null) {
                  var result27 = result45;
                } else {
                  var result27 = null;;
                };
              }
              if (result27 !== null) {
                var result28 = [];
                var result44 = parse_WS();
                while (result44 !== null) {
                  result28.push(result44);
                  var result44 = parse_WS();
                }
                if (result28 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result29 = "(";
                    pos += 1;
                  } else {
                    var result29 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result29 !== null) {
                    var result30 = [];
                    var result43 = parse_WS();
                    while (result43 !== null) {
                      result30.push(result43);
                      var result43 = parse_WS();
                    }
                    if (result30 !== null) {
                      if (input.substr(pos, 8) === "DISTINCT") {
                        var result42 = "DISTINCT";
                        pos += 8;
                      } else {
                        var result42 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"DISTINCT\"");
                        }
                      }
                      if (result42 !== null) {
                        var result40 = result42;
                      } else {
                        if (input.substr(pos, 8) === "distinct") {
                          var result41 = "distinct";
                          pos += 8;
                        } else {
                          var result41 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"distinct\"");
                          }
                        }
                        if (result41 !== null) {
                          var result40 = result41;
                        } else {
                          var result40 = null;;
                        };
                      }
                      var result31 = result40 !== null ? result40 : '';
                      if (result31 !== null) {
                        var result32 = [];
                        var result39 = parse_WS();
                        while (result39 !== null) {
                          result32.push(result39);
                          var result39 = parse_WS();
                        }
                        if (result32 !== null) {
                          var result33 = parse_ConditionalOrExpression();
                          if (result33 !== null) {
                            var result34 = [];
                            var result38 = parse_WS();
                            while (result38 !== null) {
                              result34.push(result38);
                              var result38 = parse_WS();
                            }
                            if (result34 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result35 = ")";
                                pos += 1;
                              } else {
                                var result35 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result35 !== null) {
                                var result36 = [];
                                var result37 = parse_WS();
                                while (result37 !== null) {
                                  result36.push(result37);
                                  var result37 = parse_WS();
                                }
                                if (result36 !== null) {
                                  var result25 = [result27, result28, result29, result30, result31, result32, result33, result34, result35, result36];
                                } else {
                                  var result25 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result25 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result25 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result25 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result25 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result25 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result25 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos3;
                }
              } else {
                var result25 = null;
                pos = savedPos3;
              }
              var result26 = result25 !== null
                ? (function(d, e) {
                      exp = {};
                      exp.token = 'expression'
                      exp.expressionType = 'aggregate'
                      exp.aggregateType = 'max'
                      exp.distinct = (d != "" ? 'DISTINCT' : d);
                      exp.expression = e
                
                      return exp
                
                  })(result25[4], result25[6])
                : null;
              if (result26 !== null) {
                var result24 = result26;
              } else {
                var result24 = null;
                pos = savedPos2;
              }
              if (result24 !== null) {
                var result0 = result24;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                if (input.substr(pos, 3) === "AVG") {
                  var result23 = "AVG";
                  pos += 3;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"AVG\"");
                  }
                }
                if (result23 !== null) {
                  var result4 = result23;
                } else {
                  if (input.substr(pos, 3) === "avg") {
                    var result22 = "avg";
                    pos += 3;
                  } else {
                    var result22 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"avg\"");
                    }
                  }
                  if (result22 !== null) {
                    var result4 = result22;
                  } else {
                    var result4 = null;;
                  };
                }
                if (result4 !== null) {
                  var result5 = [];
                  var result21 = parse_WS();
                  while (result21 !== null) {
                    result5.push(result21);
                    var result21 = parse_WS();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result6 = "(";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result6 !== null) {
                      var result7 = [];
                      var result20 = parse_WS();
                      while (result20 !== null) {
                        result7.push(result20);
                        var result20 = parse_WS();
                      }
                      if (result7 !== null) {
                        if (input.substr(pos, 8) === "DISTINCT") {
                          var result19 = "DISTINCT";
                          pos += 8;
                        } else {
                          var result19 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"DISTINCT\"");
                          }
                        }
                        if (result19 !== null) {
                          var result17 = result19;
                        } else {
                          if (input.substr(pos, 8) === "distinct") {
                            var result18 = "distinct";
                            pos += 8;
                          } else {
                            var result18 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"distinct\"");
                            }
                          }
                          if (result18 !== null) {
                            var result17 = result18;
                          } else {
                            var result17 = null;;
                          };
                        }
                        var result8 = result17 !== null ? result17 : '';
                        if (result8 !== null) {
                          var result9 = [];
                          var result16 = parse_WS();
                          while (result16 !== null) {
                            result9.push(result16);
                            var result16 = parse_WS();
                          }
                          if (result9 !== null) {
                            var result10 = parse_ConditionalOrExpression();
                            if (result10 !== null) {
                              var result11 = [];
                              var result15 = parse_WS();
                              while (result15 !== null) {
                                result11.push(result15);
                                var result15 = parse_WS();
                              }
                              if (result11 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result12 = ")";
                                  pos += 1;
                                } else {
                                  var result12 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result12 !== null) {
                                  var result13 = [];
                                  var result14 = parse_WS();
                                  while (result14 !== null) {
                                    result13.push(result14);
                                    var result14 = parse_WS();
                                  }
                                  if (result13 !== null) {
                                    var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function(d, e) {
                        exp = {};
                        exp.token = 'expression'
                        exp.expressionType = 'aggregate'
                        exp.aggregateType = 'avg'
                        exp.distinct = (d != "" ? 'DISTINCT' : d);
                        exp.expression = e
                  
                        return exp
                  
                    })(result2[4], result2[6])
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[110] Aggregate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRIrefOrFunction() {
        var cacheKey = 'IRIrefOrFunction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IRIref();
        if (result3 !== null) {
          var result5 = parse_ArgList();
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(i, args) {
                var fcall = {};
                fcall.token = "expression";
                fcall.expressionType = 'irireforfunction';
                fcall.iriref = i;
                fcall.args = args.value;
          
                return fcall;
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[117] IRIrefOrFunction");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RDFLiteral() {
        var cacheKey = 'RDFLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_String();
        if (result3 !== null) {
          var result9 = parse_LANGTAG();
          if (result9 !== null) {
            var result5 = result9;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 2) === "^^") {
              var result7 = "^^";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"^^\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_IRIref();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          var result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(s, e) {
                if(typeof(e) === "string" && e.length > 0) {
                    return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                } else {
                    if(typeof(e) === "object") {
                        e.shift(); // remove the '^^' char
                        return {token:'literal', value:s.value, lang:null, type:e[0] }
                    } else {
                        return { token:'literal', value:s.value, lang:null, type:null }
                    }
                }
          })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[112] RDFLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteral() {
        var cacheKey = 'NumericLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_NumericLiteralUnsigned();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NumericLiteralPositive();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteralNegative();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[113] NumericLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralUnsigned() {
        var cacheKey = 'NumericLiteralUnsigned@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[114] NumericLiteralUnsigned");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralPositive() {
        var cacheKey = 'NumericLiteralPositive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_POSITIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[115] NumericLiteralPositive");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralNegative() {
        var cacheKey = 'NumericLiteralNegative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_NEGATIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[116] NumericLiteralNegative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanLiteral() {
        var cacheKey = 'BooleanLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "TRUE") {
          var result10 = "TRUE";
          pos += 4;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"TRUE\"");
          }
        }
        if (result10 !== null) {
          var result7 = result10;
        } else {
          if (input.substr(pos, 4) === "true") {
            var result9 = "true";
            pos += 4;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"true\"");
            }
          }
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;;
          };
        }
        var result8 = result7 !== null
          ? (function() {
                var lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                lit.value = true;
                return lit;
           })()
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 5) === "FALSE") {
            var result5 = "FALSE";
            pos += 5;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"FALSE\"");
            }
          }
          if (result5 !== null) {
            var result2 = result5;
          } else {
            if (input.substr(pos, 5) === "false") {
              var result4 = "false";
              pos += 5;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"false\"");
              }
            }
            if (result4 !== null) {
              var result2 = result4;
            } else {
              var result2 = null;;
            };
          }
          var result3 = result2 !== null
            ? (function() {
                  var lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                  lit.value = false;
                  return lit;
            })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[117] BooleanLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_String() {
        var cacheKey = 'String@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        var result11 = parse_STRING_LITERAL_LONG1();
        var result12 = result11 !== null
          ? (function(s) { return {token:'string', value:s} })(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos3;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos2 = pos;
          var result8 = parse_STRING_LITERAL_LONG2();
          var result9 = result8 !== null
            ? (function(s) { return {token:'string', value:s} })(result8)
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_STRING_LITERAL1();
            var result6 = result5 !== null
              ? (function(s) { return {token:'string', value:s} })(result5)
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse_STRING_LITERAL2();
              var result3 = result2 !== null
                ? (function(s) { return {token:'string', value:s} })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[118] String");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRIref() {
        var cacheKey = 'IRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result5 = parse_IRI_REF();
        var result6 = result5 !== null
          ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_PrefixedName();
          var result3 = result2 !== null
            ? (function(p) { return p })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[119] IRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixedName() {
        var cacheKey = 'PrefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result5 = parse_PNAME_LN();
        var result6 = result5 !== null
          ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_PNAME_NS();
          var result3 = result2 !== null
            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[120] PrefixedName");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNode() {
        var cacheKey = 'BlankNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result5 = parse_BLANK_NODE_LABEL();
        var result6 = result5 !== null
          ? (function(l) { return {token:'blank', value:l}})(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_ANON();
          var result3 = result2 !== null
            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', value:'_:'+GlobalBlankNodeCounter} })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[121] BlankNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRI_REF() {
        var cacheKey = 'IRI_REF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "<") {
          var result3 = "<";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^<>"{}|^`\\]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^<>\"{}|^`\\\\]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^<>"{}|^`\\]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^<>\"{}|^`\\\\]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result5 = ">";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[122] IRI_REF");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_NS() {
        var cacheKey = 'PNAME_NS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_PN_PREFIX();
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p) { return p })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[123] PNAME_NS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_LN() {
        var cacheKey = 'PNAME_LN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PNAME_NS();
        if (result3 !== null) {
          var result4 = parse_PN_LOCAL();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(p, s) { return [p, s] })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[124] PNAME_LN");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BLANK_NODE_LABEL() {
        var cacheKey = 'BLANK_NODE_LABEL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result3 = "_:";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"_:\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_PN_LOCAL();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) { return l })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[125] BLANK_NODE_LABEL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR1() {
        var cacheKey = 'VAR1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "?") {
          var result3 = "?";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"?\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_VARNAME();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[126] VAR1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR2() {
        var cacheKey = 'VAR2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "$") {
          var result3 = "$";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_VARNAME();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[127] VAR2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANGTAG() {
        var cacheKey = 'LANGTAG@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "@") {
          var result3 = "@";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result10 !== null) {
            var result4 = [];
            while (result10 !== null) {
              result4.push(result10);
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result10 = input.charAt(pos);
                pos++;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            var result4 = null;
          }
          if (result4 !== null) {
            var result5 = [];
            var savedPos2 = pos;
            if (input.substr(pos, 1) === "-") {
              var result7 = "-";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result7 !== null) {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result9 !== null) {
                var result8 = [];
                while (result9 !== null) {
                  result8.push(result9);
                  if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                var result8 = null;
              }
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
            while (result6 !== null) {
              result5.push(result6);
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "-") {
                var result7 = "-";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result7 !== null) {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result9 !== null) {
                  var result8 = [];
                  while (result9 !== null) {
                    result8.push(result9);
                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                      var result9 = input.charAt(pos);
                      pos++;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  var result8 = null;
                }
                if (result8 !== null) {
                  var result6 = [result7, result8];
                } else {
                  var result6 = null;
                  pos = savedPos2;
                }
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a, b) {
          
                if(b.length===0) {
                    return ("@"+a.join('')).toLowerCase();
                } else {
                    return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
                }
          })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[128] LANGTAG");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER() {
        var cacheKey = 'INTEGER@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(d) {
                var lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                lit.value = flattenString(d);
                return lit;
          })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[129] INTEGER");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL() {
        var cacheKey = 'DECIMAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result14 !== null) {
          var result10 = [];
          while (result14 !== null) {
            result10.push(result14);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result10 = null;
        }
        if (result10 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result11 = ".";
            pos += 1;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result11 !== null) {
            var result12 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result13 = input.charAt(pos);
              pos++;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result13 !== null) {
              result12.push(result13);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result13 = input.charAt(pos);
                pos++;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result12 !== null) {
              var result8 = [result10, result11, result12];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(a, b, c) {
          
                var lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                lit.value = flattenString([a,b,c]);
                return lit;
          })(result8[0], result8[1], result8[2])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result4 = ".";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(a, b) {
                  var lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                  lit.value = flattenString([a,b]);
                  return lit;
             })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[130] DECIMAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE() {
        var cacheKey = 'DOUBLE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var savedPos5 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result22 = input.charAt(pos);
          pos++;
        } else {
          var result22 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result22 !== null) {
          var result17 = [];
          while (result22 !== null) {
            result17.push(result22);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result22 = input.charAt(pos);
              pos++;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result17 = null;
        }
        if (result17 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result18 = ".";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result18 !== null) {
            var result19 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result21 = input.charAt(pos);
              pos++;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result21 !== null) {
              result19.push(result21);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result21 = input.charAt(pos);
                pos++;
              } else {
                var result21 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result19 !== null) {
              var result20 = parse_EXPONENT();
              if (result20 !== null) {
                var result15 = [result17, result18, result19, result20];
              } else {
                var result15 = null;
                pos = savedPos5;
              }
            } else {
              var result15 = null;
              pos = savedPos5;
            }
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(a, b, c, e) {
                var lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                lit.value = flattenString([a,b,c,e]);
                return lit;
          })(result15[0], result15[1], result15[2], result15[3])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === ".") {
            var result10 = ".";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result10 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result13 = input.charAt(pos);
              pos++;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result13 !== null) {
              var result11 = [];
              while (result13 !== null) {
                result11.push(result13);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result13 = input.charAt(pos);
                  pos++;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result11 = null;
            }
            if (result11 !== null) {
              var result12 = parse_EXPONENT();
              if (result12 !== null) {
                var result8 = [result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(a, b, c) {
                  var lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#double";
                  lit.value = flattenString([a,b,c]);
                  return lit;
            })(result8[0], result8[1], result8[2])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result6 !== null) {
              var result4 = [];
              while (result6 !== null) {
                result4.push(result6);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result5 = parse_EXPONENT();
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(a, b) {
                    var lit = {};
                    lit.token = "literal";
                    lit.lang = null;
                    lit.type = "http://www.w3.org/2001/XMLSchema#double";
                    lit.value = flattenString([a,b]);
                    return lit;
              })(result2[0], result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[131] DOUBLE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_POSITIVE() {
        var cacheKey = 'INTEGER_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          var result3 = "+";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_INTEGER();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[132] INTEGER_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_POSITIVE() {
        var cacheKey = 'DECIMAL_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          var result3 = "+";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_DECIMAL();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[133] DECIMAL_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_POSITIVE() {
        var cacheKey = 'DOUBLE_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          var result3 = "+";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_DOUBLE();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[134] DOUBLE_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_NEGATIVE() {
        var cacheKey = 'INTEGER_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result3 = "-";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_INTEGER();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[135] INTEGER_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_NEGATIVE() {
        var cacheKey = 'DECIMAL_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result3 = "-";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_DECIMAL();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[136] DECIMAL_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_NEGATIVE() {
        var cacheKey = 'DOUBLE_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result3 = "-";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_DOUBLE();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[137] DOUBLE_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXPONENT() {
        var cacheKey = 'EXPONENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[138] EXPONENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL1() {
        var cacheKey = 'STRING_LITERAL1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          var result3 = "'";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_ECHAR();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_ECHAR();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result5 = "'";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[139] STRING_LITERAL1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL2() {
        var cacheKey = 'STRING_LITERAL2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_ECHAR();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_ECHAR();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[140] STRING_LITERAL2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG1() {
        var cacheKey = 'STRING_LITERAL_LONG1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "'''") {
          var result3 = "'''";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"'''\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^'\\]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\]");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_ECHAR();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^'\\]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_ECHAR();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 3) === "'''") {
              var result5 = "'''";
              pos += 3;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"'''\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[141] STRING_LITERAL_LONG1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG2() {
        var cacheKey = 'STRING_LITERAL_LONG2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "\"\"\"") {
          var result3 = "\"\"\"";
          pos += 3;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\\\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_ECHAR();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_ECHAR();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result5 = "\"\"\"";
              pos += 3;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\\\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[142] STRING_LITERAL_LONG2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ECHAR() {
        var cacheKey = 'ECHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("[tbnrf\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[143] ECHAR");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NIL() {
        var cacheKey = 'NIL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result6 = parse_WS();
          while (result6 !== null) {
            result4.push(result6);
            var result6 = parse_WS();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
          
                return  {token: "triplesnodecollection", 
                         triplesContext:[], 
                         chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
          })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[144] NIL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WS() {
        var cacheKey = 'WS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos).match(/^[\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[\\r]");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result2 = input.charAt(pos);
                pos++;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_COMMENT();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[145] WS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMENT() {
        var cacheKey = 'COMMENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result3 !== null) {
            result2.push(result3);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed(" COMMENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANON() {
        var cacheKey = 'ANON@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS();
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS();
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[146] ANON");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_BASE() {
        var cacheKey = 'PN_CHARS_BASE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos).match(/^[a-z]/) !== null) {
            var result13 = input.charAt(pos);
            pos++;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("[a-z]");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xF8-\\u02FF]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0370-\\u037D]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u037F-\\u1FFF]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\u200C-\\u200D]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\u2070-\\u218F]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\u2C00-\\u2FEF]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\u3001-\\uD7FF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                  matchFailed("[\\uF900-\\uFDCF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("[\\uFDF0-\\uFFFD]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("[\\u1000-\\uEFFF]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[147] PN_CHARS_BASE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_U() {
        var cacheKey = 'PN_CHARS_U@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_PN_CHARS_BASE();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[148] PN_CHARS_U");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VARNAME() {
        var cacheKey = 'VARNAME@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result12 = parse_PN_CHARS_U();
        if (result12 !== null) {
          var result3 = result12;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result11 = input.charAt(pos);
            pos++;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result11 !== null) {
            var result3 = result11;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result10 = parse_PN_CHARS_U();
          if (result10 !== null) {
            var result5 = result10;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result9 !== null) {
              var result5 = result9;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result8 !== null) {
                var result5 = result8;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result7 !== null) {
                  var result5 = result7;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result6 !== null) {
                    var result5 = result6;
                  } else {
                    var result5 = null;;
                  };
                };
              };
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            var result10 = parse_PN_CHARS_U();
            if (result10 !== null) {
              var result5 = result10;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result9 !== null) {
                var result5 = result9;
              } else {
                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xB7]");
                  }
                }
                if (result8 !== null) {
                  var result5 = result8;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                    var result7 = input.charAt(pos);
                    pos++;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result7 !== null) {
                    var result5 = result7;
                  } else {
                    if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                      var result6 = input.charAt(pos);
                      pos++;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                    if (result6 !== null) {
                      var result5 = result6;
                    } else {
                      var result5 = null;;
                    };
                  };
                };
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(init, rpart) { return init+rpart.join('') })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[149] VARNAME");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS() {
        var cacheKey = 'PN_CHARS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_PN_CHARS_U();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result5 = "-";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[150] PN_CHARS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_PREFIX() {
        var cacheKey = 'PN_PREFIX@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PN_CHARS_BASE();
        if (result3 !== null) {
          var result4 = [];
          var result7 = parse_PN_CHARS();
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result4.push(result5);
            var result7 = parse_PN_CHARS();
            if (result7 !== null) {
              var result5 = result7;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result6 = ".";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                        	throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
          					      } else {
          						  return base + rest.join('');
          					      }})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[151] PN_PREFIX");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_LOCAL() {
        var cacheKey = 'PN_LOCAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result7 = parse_PN_CHARS_U();
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_PN_CHARS();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_PN_CHARS();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(base, rest) { 
                                                                 return base + rest.join('');
                                                               })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[152] PN_LOCAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var flattenString = function(arrs) {
      
            var acum ="";
      
            for(var i=0; i< arrs.length; i++) {
      
              if(typeof(arrs[i])==='string') {
      
                acum = acum + arrs[i];
      
              } else {
      
                acum = acum + arrs[i].join('');
      
              }
      
            }
      
    
      
            return acum;
      
        }
      
    
      
    
      
        var GlobalBlankNodeCounter = 0;
      
    
      
        var prefixes = {};
      
    
      
        var registerPrefix = function(prefix, uri) {
      
            prefixes[prefix] = uri;
      
        }
      
    
      
        var registerDefaultPrefix = function(uri) {
      
            prefixes[null] = uri;
      
        }
      
    
      
        var arrayToString = function(array) {
      
            var tmp = "";
      
            for(var i=0; i<array.length; i++) {
      
                tmp = tmp + array[i];            
      
            }
      
    
      
            return tmp.toUpperCase();
      
        }
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
// end of ./src/js-sparql-parser/src/sparql_parser.js 
// exports
var TurtleParser = {};

var statementCounter = 0;
var timer = new Date().getTime();
var printTime = function() {
    var newTimer = new Date().getTime();
    console.log("ellapsed: "+((newTimer-timer)/1000)+" secs");
    timer = newTimer;
};

// imports

TurtleParser.combined_parser = SparqlParser.parser;

TurtleParser.parser = {};
TurtleParser.parser.parse = function(data, graph) {
    var quads = [];

    var result = TurtleParser.combined_parser.parse(data);
    var namespaces = {};
    var env = {namespaces: namespaces, base:'', blankCounter: 0};

    statementCounter = 0;

    for(var i=0; i<result.length; i++) {
        var unit = result[i];
        if(unit.token === 'base') {
            env.base = unit.value;
        } else if(unit.token === 'prefix') {
            namespaces[unit.prefix] = unit.local;
        } else if(unit.token === 'triples' || unit.token === 'triplespattern') {
            for(var j=0; j<unit.triplesContext.length; j++) {
                var triple = unit.triplesContext[j];
                var quad = { subject: Utils.lexicalFormTerm(triple.subject, env),
                             predicate: Utils.lexicalFormTerm(triple.predicate, env),
                             object: Utils.lexicalFormTerm(triple.object, env),
                             graph: graph };
     
                quads.push(quad);
            }
        }
    }

    return quads;
};


// end of ./src/js-communication/src/turtle_parser.js 
// exports
var RDFJSInterface = {};

// imports

/**
 * Implementation of <http://www.w3.org/TR/rdf-interfaces/>
 */

// Uris map

RDFJSInterface.defaultContext = { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                                  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                                  "owl": "http://www.w3.org/2002/07/owl#",
                                  "xsd": "http://www.w3.org/2001/XMLSchema#",
                                  "dcterms": "http://purl.org/dc/terms/",
                                  "foaf": "http://xmlns.com/foaf/0.1/",
                                  "cal": "http://www.w3.org/2002/12/cal/ical#",
                                  "vcard": "http://www.w3.org/2006/vcard/ns# ",
                                  "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#",
                                  "cc": "http://creativecommons.org/ns#",
                                  "sioc": "http://rdfs.org/sioc/ns#",
                                  "doap": "http://usefulinc.com/ns/doap#",
                                  "com": "http://purl.org/commerce#",
                                  "ps": "http://purl.org/payswarm#",
                                  "gr": "http://purl.org/goodrelations/v1#",
                                  "sig": "http://purl.org/signature#",
                                  "ccard": "http://purl.org/commerce/creditcard#"
                                };

RDFJSInterface.UrisMap = function() {
    this.defaultNs = "";
    this.interfaceProperties = ['get', 'remove', 'set', 'setDefault',
                                'addAll', 'resolve', 'shrink'];
};

RDFJSInterface.UrisMap.prototype.values = function() {
    var collected = {};
    for(var p in this) {
        if(!Utils.include(this.interfaceProperties,p) && 
           typeof(this[p])!=='function' &&
           p!=='defaultNs' &&
           p!=='interfaceProperties') {
            collected[p] = this[p];
        }
    }

    return collected;
};

RDFJSInterface.UrisMap.prototype.get = function(prefix) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }
    return this[prefix];
};

RDFJSInterface.UrisMap.prototype.remove = function(prefix) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }

    delete this[prefix];

    return null;
};

RDFJSInterface.UrisMap.prototype.set = function(prefix, iri) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }

    this[prefix] = iri;
};


RDFJSInterface.UrisMap.prototype.setDefault = function(iri) {
    this.defaultNs =iri;
};

RDFJSInterface.UrisMap.prototype.addAll = function(prefixMap, override) {
    for(var prefix in prefixMap) {
        if(!Utils.include(this.interfaceProperties, prefix)) {
            if(this[prefix] != null) {
                if(override === true) {
                    this[prefix] = prefixMap[prefix];
                }
            } else {
                this[prefix] = prefixMap[prefix];
            }
        }
    }

    return this;
};

RDFJSInterface.UrisMap.prototype.resolve = function(curie) {
    var parts = curie.split(":");
    var ns = parts[0];
    var suffix = parts[1];
    if(ns === '') {
        if(this.defaultNs == null) {
            return null;
        } else {
            return this.defaultNs + suffix;
        }
    } else if(this[ns] != null) {
        return this[ns] + suffix;
    } else {
        return null;
    }
};

RDFJSInterface.UrisMap.prototype.shrink = function(iri) {
    for(var ns in this) {
        var prefix = this[ns];
        if(iri.indexOf(prefix) === 0) {
            if(prefix !== '' && ns != 'defaultNs') {
                var suffix = iri.split(prefix)[1];
                return ns + ":" + suffix;
            }
        }
    }

    return iri;
};

// Profile

RDFJSInterface.Profile = function() {
    this.prefixes = new RDFJSInterface.UrisMap();
    this.terms = new RDFJSInterface.UrisMap();
};

RDFJSInterface.Profile.prototype.importProfile = function(profile, override) {    
    this.prefixes.addAll(profile.prefixes, override);
    this.terms.addAll(profile.terms, override);
};


RDFJSInterface.Profile.prototype.resolve = function(toResolve) {
    if(toResolve.indexOf(":") != -1) {
        return this.prefixes.resolve(toResolve);
    } else if(this.terms[toResolve] != null) {
        return this.terms.resolve(toResolve);
    } else {
        return null;
    }
};

RDFJSInterface.Profile.prototype.setDefaultPrefix = function(iri) {
    this.prefixes.setDefault(iri);
};

RDFJSInterface.Profile.prototype.setDefaultVocabulary = function(iri) {
    this.terms.setDefault(iri);
};

RDFJSInterface.Profile.prototype.setPrefix = function(prefix, iri) {
    this.prefixes.set(prefix, iri);
};

RDFJSInterface.Profile.prototype.setTerm = function(term, iri) {
    this.terms.set(term, iri);
};

// RDF environemnt
RDFJSInterface.RDFEnvironment  = function(){
    this.blankNodeCounter = 0;
    var that = this;
    this.filters = {
        s: function(s) { return function(t) { return t.subject.equals(s); }; },
        p: function(p) { return function(t) { return t.predicate.equals(p); }; },
        o: function(o) { return function(t) { return t.object.equals(o); }; },
        sp: function(s,p) { return function(t) { return t.subject.equals(s) && t.predicate.equals(p); }; },
        so: function(s,o) { return function(t) { return t.subject.equals(s) && t.object.equals(o); }; },
        po: function(p,o) { return function(t) { return t.predicate.equals(p) && t.object.equals(o); }; },
        spo: function(s,p,o) { return function(t) { return t.subject.equals(s) && t.predicate.equals(p) && t.object.equals(o); }; },
        describes: function(v) { return function(t) { return t.subject.equals(v) || t.object.equals(v); }; },
        type: function(o) {
            var type = that.resolve("rdf:type"); 
            return function(t) { return t.predicate.equals(type) && t.object.equals(o); };
        }
    };

    for(var p in RDFJSInterface.defaultContext) {
        this.prefixes.set(p, RDFJSInterface.defaultContext[p]);
    }
}
Utils['extends'](RDFJSInterface.Profile,RDFJSInterface.RDFEnvironment);

RDFJSInterface.RDFEnvironment.prototype.createBlankNode = function() {
     var bnode =  new RDFJSInterface.BlankNode(this.blankNodeCounter);
    this.blankNodeCounter++;
    return bnode;
};

RDFJSInterface.RDFEnvironment.prototype.createNamedNode = function(value) {
    var resolvedValue = this.resolve(value);
    if(resolvedValue != null) {
        return new RDFJSInterface.NamedNode(resolvedValue);
    } else {
        return new RDFJSInterface.NamedNode(value);
    }
};

RDFJSInterface.RDFEnvironment.prototype.createLiteral = function(value, language, datatype) {
    if(datatype != null) {
        return new RDFJSInterface.Literal(value, language, datatype.toString());
    } else {
        return new RDFJSInterface.Literal(value, language, datatype);
    }
};

RDFJSInterface.RDFEnvironment.prototype.createTriple = function(subject, predicate, object) {
    return new RDFJSInterface.Triple(subject, predicate, object);
};

RDFJSInterface.RDFEnvironment.prototype.createGraph = function(triples) {
    var graph = new RDFJSInterface.Graph();
    if(triples != null) {
        for(var i=0; i<triples.length; i++) {
            graph.add(triples[i]);
        }
    }
    return graph;
};

RDFJSInterface.RDFEnvironment.prototype.createAction = function(test, action) {
    return function(triple) {
        if(test(triple)) {
            return action(triple);
        } else {
            return triple;
        }
    }
};

RDFJSInterface.RDFEnvironment.prototype.createProfile = function(empty) {
    // empty (opt);
    if(empty === true) {
        return new RDFJSInterface.RDFEnvironment.Profile();
    } else {
        var profile = new RDFJSInterface.RDFEnvironment.Profile();
        profile.importProfile(this);

        return profile;
    }
};

RDFJSInterface.RDFEnvironment.prototype.createTermMap = function(empty) {
    if(empty === true) {
        return new RDFJSInterface.UrisMap();
    } else {
      var cloned = this.terms.values();
      var termMap = new RDFJSInterface.UrisMap();
   
      for(var p in cloned) {
          termMap[p] = cloned[p];
      }
   
      return termMap;
    }
};

RDFJSInterface.RDFEnvironment.prototype.createPrefixMap = function(empty) {
    if(empty === true) {
        return new RDFJSInterface.UrisMap();
    } else {
      var cloned = this.prefixes.values();
      var prefixMap = new RDFJSInterface.UrisMap();
   
      for(var p in cloned) {
          prefixMap[p] = cloned[p];
      }
   
      return prefixMap;
    }    
};

// Common RDFNode interface

RDFJSInterface.RDFNode = function(interfaceName){
    this.interfaceName = interfaceName;
    this.attributes  = ["interfaceName", "nominalValue"]
};

RDFJSInterface.RDFNode.prototype.equals = function(otherNode) {
    if(otherNode.interfaceName == null) {
        return this.valueOf() == otherNode;

    } else {
        for(var i in this.attributes) {
            var attribute = this.attributes[i];
            if(this[attribute] != otherNode[attribute]) {
                return false;
            }
        }
      
        return true;
    }
};


// Blank node

RDFJSInterface.BlankNode = function(bnodeId) {
    RDFJSInterface.RDFNode.call(this, "BlankNode");
    this.nominalValue = "_:"+bnodeId;
    this.bnodeId = bnodeId;
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.BlankNode);

RDFJSInterface.BlankNode.prototype.toString = function(){
    return this.nominalValue;
};

RDFJSInterface.BlankNode.prototype.toNT = function() {
    return this.nominalValue;
};

RDFJSInterface.BlankNode.prototype.valueOf = function() {
    return this.nominalValue;
};

// Literal node

RDFJSInterface.Literal = function(value, language, datatype) {
    RDFJSInterface.RDFNode.call(this, "Literal");
    this.nominalValue = value;
    if(language != null) {
        this.language = language;
    } else if(datatype != null) {
        this.datatype = datatype;
    }
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.Literal);

RDFJSInterface.Literal.prototype.toString = function(){
    var tmp = "\""+this.nominalValue+"\"";
    if(this.language != null) {
        tmp = tmp + "@" + this.language;
    } else if(this.datatype != null || this.type) {
        tmp = tmp + "^^<" + (this.datatype||this.type) + ">";
    }

    return tmp;
};

RDFJSInterface.Literal.prototype.toNT = function() {
    return this.toString();
};

RDFJSInterface.Literal.prototype.valueOf = function() {
    return QueryFilters.effectiveTypeValue({token: 'literal', 
                                            type: this.type, 
                                            value: this.nominalValue, 
                                            language: this.language});
};

// NamedNode node

RDFJSInterface.NamedNode = function(val) {
    RDFJSInterface.RDFNode.call(this, "NamedNode");
    if(val.value != null) {
        this.nominalValue = val.value;
    } else {
        this.nominalValue = val;
    }
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.NamedNode);

RDFJSInterface.NamedNode.prototype.toString = function(){
    return this.nominalValue;
};

RDFJSInterface.NamedNode.prototype.toNT = function() {
    return "<"+this.toString()+">";
};

RDFJSInterface.NamedNode.prototype.valueOf = function() {
    return this.nominalValue;
};

// Triple interface
RDFJSInterface.Triple = function(subject, predicate, object){
    this.subject = subject;
    this.predicate = predicate;
    this.object = object;
};

RDFJSInterface.Triple.prototype.equals = function(otherTriple) {
    return this.subject.equals(otherTriple.subject) &&
           this.predicate.equals(otherTriple.predicate) &&
           this.object.equals(otherTriple.object);
};

RDFJSInterface.Triple.prototype.toString = function() {
    return this.subject.toNT()+" "+this.predicate.toNT()+" "+this.object.toNT()+" . \r\n";
};

// Graph interface

RDFJSInterface.Graph = function() {
    this.triples = [];
    this.duplicates = {};
    this.actions = [];
};

RDFJSInterface.Graph.prototype.add = function(triple) {
    for(var i=0; i<this.actions.length; i++) {
        triple = this.actions[i](triple);
    }
    
    var id = triple.subject.toString()+triple.predicate.toString()+triple.object.toString();
    if(!this.duplicates[id]) {
        this.duplicates[id] = true;
        this.triples.push(triple);
    }

    return this;
};

RDFJSInterface.Graph.prototype.addAction = function(tripleAction, run) {
    this.actions.push(tripleAction);
    if(run == true) {
        for(var i=0; i<this.triples.length; i++) {
            this.triples[i] = tripleAction(this.triples[i]);
        }
    }

    return this;
}

RDFJSInterface.Graph.prototype.addAll = function(graph) {
    var newTriples = graph.toArray();
    for(var i=0; i<newTriples.length; i++) {
        this.add(newTriples[i]);
    }


    return this;
}

RDFJSInterface.Graph.prototype.remove = function(triple) {
    var toRemove = null;
    for(var i=0; i<this.triples.length; i++) {
        if(this.triples[i].equals(triple)) {
            var id = triple.subject.toString()+triple.predicate.toString()+triple.object.toString();
            delete this.duplicates[id];
            toRemove = i;
            break;
        }
    }

    if(toRemove!=null) {
        this.triples.splice(toRemove,1);
    }

    return this;
};

RDFJSInterface.Graph.prototype.toArray = function() {
    return this.triples;
};

RDFJSInterface.Graph.prototype.some = function(p) {
    for(var i=0; i<this.triples.length; i++) {
        if(p(this.triples[i],this) === true) {
            return true;
        }
    }

    return false;
};

RDFJSInterface.Graph.prototype.every = function(p) {
    for(var i=0; i<this.triples.length; i++) {
        if(p(this.triples[i],this) === false) {
            return false;
        }
    }

    return true;
};

RDFJSInterface.Graph.prototype.filter = function(f) {
    var tmp = new RDFJSInterface.Graph();

    for(var i=0; i<this.triples.length; i++) {
        if(f(this.triples[i],this) === true) {
            tmp.add(this.triples[i]);
        }
    }

    return tmp;
};

RDFJSInterface.Graph.prototype.forEach = function(f) {
    for(var i=0; i<this.triples.length; i++) {
        f(this.triples[i],this);
    }
};

RDFJSInterface.Graph.prototype.merge = function(g) {
    var newGraph = new RDFJSInterface.Graph();
    for(var i=0; i<this.triples; i++) {
        var triple = this.triples[i];
        newGraph.add(triple);
    }

    for(var i=0; i<triples.length; i++) {
        var triple = triples[i];
        this.add(triple);
    }

    return newGraph;
};

RDFJSInterface.Graph.prototype.match = function(subject, predicate, object, limit) {
    var graph = new RDFJSInterface.Graph();

    var matched = 0;
    for(var i=0; i<this.triples.length; i++) {
        var triple = this.triples[i];
        if(subject == null || (triple.subject.equals(subject))) {
            if(predicate == null || (triple.predicate.equals(predicate))) {
                if(object == null || (triple.object.equals(object))) {
                    if(limit==null || matched < limit) {
                        matched++;
                        graph.add(triple);
                    } else {
                        return graph;
                    }
                }
            }
        }
    }

    return graph;
};

RDFJSInterface.Graph.prototype.removeMatches = function(subject, predicate, object) {
    var matched = [];
    var toRemove = [];
    for(var i=0; i<this.triples.length; i++) {
        var triple = this.triples[i];
        if(subject == null || (triple.subject.equals(subject))) {
            if(predicate == null || (triple.predicate.equals(predicate))) {
                if(object == null || (triple.object.equals(object))) {
                    toRemove.push(triple);
                }
            }
        }
    }

    for(var i=0; i<toRemove.length; i++) {
        this.remove(toRemove[i]);
    }

    return this;
};

RDFJSInterface.Graph.prototype.toNT = function() {
    var n3 = "";

    this.forEach(function(triple) {
        n3 = n3 + triple.toString();
    });

    return n3;
};

// Builders for the query engine

RDFJSInterface.buildRDFResource = function(value, bindings, engine, env) {
    if(value.token === 'blank') {
        return RDFJSInterface.buildBlankNode(value, bindings, engine, env);
    } else if(value.token === 'literal') {
        return RDFJSInterface.buildLiteral(value, bindings, engine, env);
    } else if(value.token === 'uri') {
        return RDFJSInterface.buildNamedNode(value, bindings, engine, env);
    } else if(value.token === 'var') {
        var result = bindings[value.value];
        if(result != null) {
            return RDFJSInterface.buildRDFResource(result, bindings, engine, env);
        } else {
            return null;
        }
    } else {
        return null;
    }
};

RDFJSInterface.buildBlankNode = function(value, bindings, engine, env) {
    if(value.valuetmp != null) {
        value.value = value.valuetmp;
    }
    if(value.value.indexOf("_:") === 0) {
        value.value = value.value.split("_:")[1];
    }
    return new RDFJSInterface.BlankNode(value.value);
};

RDFJSInterface.buildLiteral = function(value, bindings, engine, env) {
    return new RDFJSInterface.Literal(value.value, value.lang, value.type);
};

RDFJSInterface.buildNamedNode = function(value, bindings, engine, env) {
    if(value.value != null) {
        return new RDFJSInterface.NamedNode(value);
    } else {
        if(value.prefix != null) {
            var prefix = engine.resolveNsInEnvironment(value.prefix, env);
            value.value = prefix+value.suffix;
            return new RDFJSInterface.NamedNode(value);
        } else {
            return new RDFJSInterface.NamedNode(value);
        }
    }
};

RDFJSInterface.rdf = new RDFJSInterface.RDFEnvironment();

// end of ./src/js-query-engine/src/rdf_js_interface.js 
// exports
var QueryFilters = {};

// imports

QueryFilters.checkFilters = function(pattern, bindings, nullifyErrors, dataset, queryEnv, queryEngine) {

    var filters = pattern.filter;
    var nullified = [];
    if(filters==null || pattern.length != null) {
        return bindings;
    }

    for(var i=0; i<filters.length; i++) {
        var filter = filters[i];

        var filteredBindings = QueryFilters.run(filter.value, bindings, nullifyErrors, dataset, queryEnv, queryEngine);
        var acum = [];
        for(var j=0; j<filteredBindings.length; j++) {
            if(filteredBindings[j]["__nullify__"]!=null) {
                nullified.push(filteredBindings[j]);
            } else {
                acum.push(filteredBindings[j]);
            }
        }

        bindings = acum;
    }

    return bindings.concat(nullified);
};

QueryFilters.boundVars = function(filterExpr) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            var op1 = filterExpr.op1;
            var op2 = filterExpr.op2;
            return QueryFilters.boundVars(op1)+QueryFilters.boundVars(op2);
        } else if(expressionType == 'conditionalor' || expressionType == 'conditionaland') {
            var vars = [];
            for(var i=0; i< filterExpr.operands; i++) {
                vars = vars.concat(QueryFilters.boundVars(filterExpr.operands[i]));
            }
            return vars;
        } else if(expressionType == 'builtincall') {
            if(filterExpr.args == null) {
                return [];
            } else {
                var acum = [];
                for(var i=0; i< filterExpr.args.length; i++) {
                    acum = acum.concat(QueryFilters.boundVars(filterExpr.args[i]));
                }
                return acum;
            }
        } else if(expressionType == 'multiplicativeexpression') {
            var acum = QueryFilters.boundVars(filterExpr.factor);
            for(var i=0; i<filterExpr.factors.length; i++) {
                acum = acum.concat(QueryFilters.boundVars(filterExpr.factors[i].expression))
            }
            return acum;
        } else if(expressionType == 'additiveexpression') {
            var acum = QueryFilters.boundVars(filterExpr.summand);
            for(var i=0; i<filterExpr.summands.length; i++) {
                acum = acum.concat(QueryFilters.boundVars(filterExpr.summands[i].expression));
            }

            return acum;
        } else if(expressionType == 'regex') {
            var acum = QueryFilters.boundVars(filterExpr.expression1);
            return acum.concat(QueryFilters.boundVars(filterExpr.expression2));
        } else if(expressionType == 'unaryexpression') {
            return QueryFilters.boundVars(filterExpr.expression);
        } else if(expressionType == 'atomic') {           
            if(filterExpr.primaryexpression == 'var') {
                return [filterExpr.value];
            } else {
                // numeric, literal, etc...
                return [];
            }
        }
    } else {
        console.log("ERROR");
        console.log(filterExpr);
        throw("Cannot find bound expressions in a no expression token");
    }
};

QueryFilters.run = function(filterExpr, bindings, nullifyFilters, dataset, env, queryEngine) {    
    var denormBindings = queryEngine.copyDenormalizedBindings(bindings, env.outCache);
    var filteredBindings = [];
    for(var i=0; i<bindings.length; i++) {
        var thisDenormBindings = denormBindings[i];
        var ebv = QueryFilters.runFilter(filterExpr, thisDenormBindings, queryEngine, dataset, env);
        // ebv can be directly a RDFTerm (e.g. atomic expression in filter)
        // this additional call to ebv will return -> true/false/error
        var ebv = QueryFilters.ebv(ebv);
        //console.log("EBV:")
        //console.log(ebv)
        //console.log("FOR:")
        //console.log(thisDenormBindings)
        if(QueryFilters.isEbvError(ebv)) {
            // error
            if(nullifyFilters) {
                var thisBindings = {"__nullify__": true, "bindings": bindings[i]};
                filteredBindings.push(thisBindings);
            }
        } else if(ebv === true) {
            // true
            filteredBindings.push(bindings[i]);
        } else {
            // false
            if(nullifyFilters) {
                var thisBindings = {"__nullify__": true, "bindings": bindings[i]};
                filteredBindings.push(thisBindings);
            }
        }
    }
    return filteredBindings;
};

QueryFilters.collect = function(filterExpr, bindings, dataset, env, queryEngine, callback) {
    var denormBindings = queryEngine.copyDenormalizedBindings(bindings, env.outCache);
    var filteredBindings = [];
    for(var i=0; i<denormBindings.length; i++) {
        var thisDenormBindings = denormBindings[i];
        var ebv = QueryFilters.runFilter(filterExpr, thisDenormBindings, queryEngine, dataset, env);
        filteredBindings.push({binding:bindings[i], value:ebv});
    }
    return(filteredBindings);
};

QueryFilters.runDistinct = function(projectedBindings, projectionVariables) {
};

// @todo add more aggregation functions here
QueryFilters.runAggregator = function(aggregator, bindingsGroup, queryEngine, dataset, env) {
    if(bindingsGroup == null || bindingsGroup.length === 0) {
        return QueryFilters.ebvError();
    } else if(aggregator.token === 'variable' && aggregator.kind == 'var') {
        return bindingsGroup[0][aggregator.value.value];
    } else if(aggregator.token === 'variable' && aggregator.kind === 'aliased') {
        if(aggregator.expression.expressionType === 'atomic' && aggregator.expression.primaryexpression === 'var') {
            return bindingsGroup[0][aggregator.expression.value.value];
        } else if(aggregator.expression.expressionType === 'aggregate') {
            if(aggregator.expression.aggregateType === 'max') {
                var max = null;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, dataset, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(max === null) {
                            max = ebv;
                        } else {
                            if(QueryFilters.runLtFunction(max, ebv).value === true) {
                                max = ebv;
                            }
                        }
                    }
                }

                if(max===null) {
                    return QueryFilters.ebvError();
                } else {
                    return max;
                }
            } else if(aggregator.expression.aggregateType === 'min') {
                var min = null;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, dataset, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(min === null) {
                            min = ebv;
                        } else {
                            if(QueryFilters.runGtFunction(min, ebv).value === true) {
                                min = ebv;
                            }
                        }
                    }
                }

                if(min===null) {
                    return QueryFilters.ebvError();
                } else {
                    return min;
                }
            } else if(aggregator.expression.aggregateType === 'count') {
                var distinct = {}
                var count = 0;
                if(aggregator.expression.expression === '*') {
                    if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                        for(var i=0; i< bindingsGroup.length; i++) {
                            var bindings = bindingsGroup[i];
                            var key = Utils.hashTerm(bindings);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                count++;
                            }
                        } 
                    } else {
                        count = bindingsGroup.length;
                    }                   
                } else {
                  for(var i=0; i< bindingsGroup.length; i++) {
                      var bindings = bindingsGroup[i];
                      var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, dataset, env);                    
                      if(!QueryFilters.isEbvError(ebv)) {
                          if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                              var key = Utils.hashTerm(ebv);
                              if(distinct[key] == null) {
                                  distinct[key] = true;
                                  count++;
                              }
                          } else {
                              count++;
                          }
                      }
                  }
                }

                return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:''+count};
            } else if(aggregator.expression.aggregateType === 'avg') {
                var distinct = {}
                var aggregated = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:'0'};
                var count = 0;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, dataset, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                            var key = Utils.hashTerm(ebv);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                if(QueryFilters.isNumeric(ebv)) {
                                    aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                    count++;
                                }
                            }
                        } else {
                            if(QueryFilters.isNumeric(ebv)) {
                                aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                count++;
                            }
                        }
                    }
                }

                var result = QueryFilters.runDivFunction(aggregated, {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:''+count});
                result.value = ''+result.value;
                return result;
            } else if(aggregator.expression.aggregateType === 'sum') {
                var distinct = {}
                var aggregated = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:'0'};
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, dataset, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                            var key = Utils.hashTerm(ebv);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                if(QueryFilters.isNumeric(ebv)) {
                                    aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                }
                            }
                        } else {
                            if(QueryFilters.isNumeric(ebv)) {
                                aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                            }
                        }
                    }
                }
                
                aggregated.value =''+aggregated.value;
                return aggregated;
            } else {
                var ebv = QueryFilters.runFilter(aggregate.expression, bindingsGroup[0], dataset, {blanks:{}, outCache:{}});
                return ebv;
            }
        }
    }
};

QueryFilters.runFilter = function(filterExpr, bindings, queryEngine, dataset, env) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            var op1 = QueryFilters.runFilter(filterExpr.op1, bindings,queryEngine, dataset, env);
            var op2 = QueryFilters.runFilter(filterExpr.op2, bindings,queryEngine, dataset, env);
            return QueryFilters.runRelationalFilter(filterExpr, op1, op2, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'conditionalor') {
            return QueryFilters.runOrFunction(filterExpr, bindings, queryEngine, dataset, env);
        } else if (expressionType == 'conditionaland') {
            return QueryFilters.runAndFunction(filterExpr, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'additiveexpression') {
            return QueryFilters.runAddition(filterExpr.summand, filterExpr.summands, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'builtincall') {
            return QueryFilters.runBuiltInCall(filterExpr.builtincall, filterExpr.args, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'multiplicativeexpression') {
            return QueryFilters.runMultiplication(filterExpr.factor, filterExpr.factors, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'unaryexpression') {
            return QueryFilters.runUnaryExpression(filterExpr.unaryexpression, filterExpr.expression, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'irireforfunction') {
            return QueryFilters.runIriRefOrFunction(filterExpr.iriref, filterExpr.args, bindings, queryEngine, dataset, env);
        } else if(expressionType == 'regex') {
            return QueryFilters.runRegex(filterExpr.text, filterExpr.pattern, filterExpr.flags, bindings, queryEngine, dataset, env)
        } else if(expressionType == 'atomic') {        
            if(filterExpr.primaryexpression == 'var') {
                // lookup the var in the bindings
                var val = bindings[filterExpr.value.value];
                return val;
            } else {
                // numeric, literal, etc...
                //return queryEngine.filterExpr.value;
                if(typeof(filterExpr.value) != 'object') {
                    return filterExpr.value
                } else {
                    if(filterExpr.value.type == null || typeof(filterExpr.value.type) != 'object') {
                        return filterExpr.value
                    } else {
                        // type can be parsed as a hash using namespaces

                        filterExpr.value.type =  Utils.lexicalFormBaseUri(filterExpr.value.type, env);
                        return filterExpr.value
                    }
                }
            }
        } else {
            throw("Unknown filter expression type");
        }
    } else {
        throw("Cannot find bound expressions in a no expression token");
    }
};

QueryFilters.isRDFTerm = function(val) {
    if(val==null) {
        return false;
    } if((val.token && val.token == 'literal') ||
       (val.token && val.token == 'uri') ||
       (val.token && val.token == 'blank')) {
        return true;
    } else {
        return false;
    }
};


/*
17.4.1.7 RDFterm-equal

 xsd:boolean   RDF term term1 = RDF term term2

Returns TRUE if term1 and term2 are the same RDF term as defined in Resource Description Framework (RDF): 
Concepts and Abstract Syntax [CONCEPTS]; produces a type error if the arguments are both literal but are not 
the same RDF term *; returns FALSE otherwise. term1 and term2 are the same if any of the following is true:

    term1 and term2 are equivalent IRIs as defined in 6.4 RDF URI References of [CONCEPTS].
    term1 and term2 are equivalent literals as defined in 6.5.1 Literal Equality of [CONCEPTS].
    term1 and term2 are the same blank node as described in 6.6 Blank Nodes of [CONCEPTS].
*/
QueryFilters.RDFTermEquality = function(v1, v2, queryEngine, env) {
    if(v1.token === 'literal' && v2.token === 'literal') {
        if(v1.lang == v2.lang && v1.type == v2.type && v1.value == v2.value) {

            return true;
        } else {


            if(v1.type != null && v2.type != null) {
                return  QueryFilters.ebvError();
            } else if(QueryFilters.isSimpleLiteral(v1) && v2.type!=null){
                return QueryFilters.ebvError();
            } else if(QueryFilters.isSimpleLiteral(v2) && v1.type!=null){
                return QueryFilters.ebvError();
            } else {
                return false;
            }

//            if(v1.value != v2.value) {
//                return QueryFilters.ebvError();                                
//            } else if(v1.type && v2.type && v1.type!=v2.type) {
//                return QueryFilters.ebvError();                
//            } else if(QueryFilters.isSimpleLiteral(v1) && v2.type!=null){
//                return QueryFilters.ebvError();
//            } else if(QueryFilters.isSimpleLiteral(v2) && v1.type!=null){
//                return QueryFilters.ebvError();
//            } else {
//                return false;
//            }

        }
    } else if(v1.token === 'uri' && v2.token === 'uri') {
        return Utils.lexicalFormBaseUri(v1, env) == Utils.lexicalFormBaseUri(v2, env);
    } else if(v1.token === 'blank' && v2.token === 'blank') {
        return v1.value == v2.value;
    } else {
        return false;
    }
};


QueryFilters.isInteger = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer" ||
           val.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
           val.type == "http://www.w3.org/2001/XMLSchema#double" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#long" ||
           val.type == "http://www.w3.org/2001/XMLSchema#int" ||
           val.type == "http://www.w3.org/2001/XMLSchema#short" ||
           val.type == "http://www.w3.org/2001/XMLSchema#byte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isFloat = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#float") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isDecimal = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#decimal") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isDouble = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#double") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};


QueryFilters.isNumeric = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer" ||
           val.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
           val.type == "http://www.w3.org/2001/XMLSchema#float" ||
           val.type == "http://www.w3.org/2001/XMLSchema#double" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#long" ||
           val.type == "http://www.w3.org/2001/XMLSchema#int" ||
           val.type == "http://www.w3.org/2001/XMLSchema#short" ||
           val.type == "http://www.w3.org/2001/XMLSchema#byte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isSimpleLiteral = function(val) {
    if(val && val.token == 'literal') {
        if(val.type == null && val.lang == null) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isXsdType = function(type, val) {
    if(val && val.token == 'literal') {
        return val.type == "http://www.w3.org/2001/XMLSchema#"+type;
    } else {
        return false;
    }
};

QueryFilters.ebv = function(term) {
    if(term == null || QueryFilters.isEbvError(term)) {
        return QueryFilters.ebvError();
    } else {
        if(term.token && term.token === 'literal') {
          if(term.type == "http://www.w3.org/2001/XMLSchema#integer" ||
             term.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
             term.type == "http://www.w3.org/2001/XMLSchema#double" ||
             term.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#long" ||
             term.type == "http://www.w3.org/2001/XMLSchema#int" ||
             term.type == "http://www.w3.org/2001/XMLSchema#short" ||
             term.type == "http://www.w3.org/2001/XMLSchema#byte" ||
             term.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
             term.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
              var tmp = parseFloat(term.value);
              if(isNaN(tmp)) {
                  return false;
              } else {
                  return parseFloat(term.value) != 0;
              }
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#boolean"){
              return (term.value === 'true' || term.value === true || term.value === 'True');
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#string"){
              return term.value != "";
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#dateTime"){
              return (new Date(term.value)) != null;
          } else if(QueryFilters.isEbvError(term)) {
              return term;
          } else if(term.type == null) {
              if( term.value != "") {
                  return true;
              } else {
                  return false;
              }
          } else {
              return QueryFilters.ebvError();
          }
        } else {
            return term.value === true;
        }
    }
}


QueryFilters.ebvTrue = function() {
    val = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#boolean", value:true};
    return val;
};

QueryFilters.ebvFalse = function() {
    val = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#boolean", value:false};
    return val;
};

QueryFilters.ebvError = function() {
    val = {token: 'literal', type:"https://github.com/antoniogarrote/js-tools/types#error", value:null};
    return val;
};

QueryFilters.isEbvError = function(term) {
    if(typeof(term) == 'object' && term != null) {
        return term.type === "https://github.com/antoniogarrote/js-tools/types#error";
//    } else if(term == null) {
//        return true;
    } else {
        return false;
    }
};

QueryFilters.ebvBoolean = function(bool) {    
    if(QueryFilters.isEbvError(bool)) {
        return bool;
    } else {
      if(bool === true) {
          return QueryFilters.ebvTrue();
      } else {
          return QueryFilters.ebvFalse();
      }
    }
}


QueryFilters.runRelationalFilter = function(filterExpr, op1, op2, bindings, queryEngine, dataset, env) {
    var operator = filterExpr.operator;
    if(operator === '=') {
        return QueryFilters.runEqualityFunction(op1, op2, bindings, queryEngine, dataset, env);
    } else if(operator === '!=') {
        var res = QueryFilters.runEqualityFunction(op1, op2, bindings, queryEngine, dataset, env);
        if(QueryFilters.isEbvError(res)) {
            return res;
        } else {
            res.value = !res.value;
            return res;
        }
    } else if(operator === '<') {
        return QueryFilters.runLtFunction(op1, op2, bindings);
    } else if(operator === '>') {
        return QueryFilters.runGtFunction(op1, op2, bindings);
    } else if(operator === '<=') {
        return QueryFilters.runLtEqFunction(op1, op2, bindings);
    } else if(operator === '>=') {
        return QueryFilters.runGtEqFunction(op1, op2, bindings);
    } else {
        throw("Error applying relational filter, unknown operator");
    }
};

/**
 * Transforms a JS object representing a [typed] literal in a javascript
 * value that can be used in javascript operations and functions
 */
QueryFilters.effectiveTypeValue = function(val){
    if(val.token == 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
              return tmp;
            //}
        } else if(val.type == "http://www.w3.org/2001/XMLSchema#decimal") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#float") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#double") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#long") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#int") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#short") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#byte") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#date" || 
                   val.type == "http://www.w3.org/2001/XMLSchema#dateTime" ) {
            try {
                var d = Utils.parseISO8601(val.value);            
                return(d);
            } catch(e) {
                return null;
            }
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#boolean" ) {
            return val.value === true || val.value === 'true' || val.value === '1' || val.value === 1 || val.value === true ? true :
                val.value === false || val.value === 'false' || val.value === '0' || val.value === 0 || val.value === false ? false :
                undefined;
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#string" ) {
            return val.value === null || val.value === undefined ? undefined : ''+val.value;
        } else if (val.type == null) {
            // plain literal -> just manipulate the string
            return val.value;
        } else {
            return val.value
        }
    } else {
        // @todo
        console.log("not implemented yet");
        throw("value not supported in operations yet");
    }
};

/*
  A logical-or that encounters an error on only one branch will return TRUE if the other branch is TRUE and an error if the other branch is FALSE.
  A logical-or or logical-and that encounters errors on both branches will produce either of the errors.
*/
QueryFilters.runOrFunction = function(filterExpr, bindings, queryEngine, dataset, env) {

    var acum = null;

    for(var i=0; i< filterExpr.operands.length; i++) {
        var ebv = QueryFilters.runFilter(filterExpr.operands[i], bindings, queryEngine, dataset, env);
        if(QueryFilters.isEbvError(ebv) == false) {
            ebv = QueryFilters.ebv(ebv);
        }

        if(acum == null) {
            acum = ebv;
        } else if(QueryFilters.isEbvError(ebv)) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            } else if(acum === true) {
                acum = true;
            } else {
                acum = QueryFilters.ebvError();
            }
        } else if(ebv === true) {
            acum = true;
        } else {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            }
        }
    }

    return QueryFilters.ebvBoolean(acum);
};

/*
  A logical-and that encounters an error on only one branch will return an error if the other branch is TRUE and FALSE if the other branch is FALSE.
  A logical-or or logical-and that encounters errors on both branches will produce either of the errors.
*/
QueryFilters.runAndFunction = function(filterExpr, bindings, queryEngine, dataset, env) {

    var acum = null;

    for(var i=0; i< filterExpr.operands.length; i++) {

        var ebv = QueryFilters.runFilter(filterExpr.operands[i], bindings, queryEngine, dataset, env);

        if(QueryFilters.isEbvError(ebv) == false) {
            ebv = QueryFilters.ebv(ebv);
        }

        if(acum == null) {
            acum = ebv;
        } else if(QueryFilters.isEbvError(ebv)) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            } else if(acum === true) {
                acum = QueryFilters.ebvError();
            } else {
                acum = false;
            }
        } else if(ebv === true) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            }
        } else {
            acum = false;
        }
    }

    return QueryFilters.ebvBoolean(acum);
};


QueryFilters.runEqualityFunction = function(op1, op2, bindings, queryEngine, dataset, env) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }
    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        var eop1 = QueryFilters.effectiveTypeValue(op1);
        var eop2 = QueryFilters.effectiveTypeValue(op2);
        if(isNaN(eop1) || isNaN(eop2)) {
            return QueryFilters.ebvBoolean(QueryFilters.RDFTermEquality(op1, op2, queryEngine, env));
        } else {
            return QueryFilters.ebvBoolean(eop1 == eop2);
        }
    } else if((QueryFilters.isSimpleLiteral(op1) || QueryFilters.isXsdType("string", op1)) && 
              (QueryFilters.isSimpleLiteral(op2) || QueryFilters.isXsdType("string", op2))) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) == QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) == QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1)||QueryFilters.isXsdType("date", op1)) && (QueryFilters.isXsdType("dateTime", op2)||QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == 0) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else if(QueryFilters.isRDFTerm(op1) && QueryFilters.isRDFTerm(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.RDFTermEquality(op1, op2, queryEngine, env));
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runGtFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == 1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};

/**
 * Total gt function used when sorting bindings in the SORT BY clause.
 *
 * @todo
 * Some criteria are not clear
 */
QueryFilters.runTotalGtFunction = function(op1,op2) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if((QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) ||
       (QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) ||
       (QueryFilters.isXsdType("string",op1) && QueryFilters.isSimpleLiteral("string",op2)) ||
       (QueryFilters.isXsdType("boolean",op1) && QueryFilters.isSimpleLiteral("boolean",op2)) ||
       (QueryFilters.isXsdType("dateTime",op1) && QueryFilters.isSimpleLiteral("dateTime",op2))) {
        return QueryFilters.runGtFunction(op1, op2, []);
    } else if(op1.token && op1.token === 'uri' && op2.token && op2.token === 'uri') {
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else if(op1.token && op1.token === 'literal' && op2.token && op2.token === 'literal') {
        // one of the literals must have type/lang and the othe may not have them
        return QueryFilters.ebvBoolean(""+op1.value+op1.type+op1.lang > ""+op2.value+op2.type+op2.lang);
    } else if(op1.token && op1.token === 'blank' && op2.token && op2.token === 'blank') {    
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else if(op1.value && op2.value) {
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else {
        return QueryFilters.ebvTrue();
    }
};


QueryFilters.runLtFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == -1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};


QueryFilters.runGtEqFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp != -1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }

    } else {
        return QueryFilters.ebvFalse();
    }
};


QueryFilters.runLtEqFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp != 1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runAddition = function(summand, summands, bindings, queryEngine, dataset, env) {
    var summandOp = QueryFilters.runFilter(summand,bindings,queryEngine, dataset, env);
    if(QueryFilters.isEbvError(summandOp)) {
        return QueryFilters.ebvError();
    }

    var acum = summandOp;
    if(QueryFilters.isNumeric(summandOp)) {
        for(var i=0; i<summands.length; i++) {
            var nextSummandOp = QueryFilters.runFilter(summands[i].expression, bindings,queryEngine, dataset, env);
            if(QueryFilters.isNumeric(nextSummandOp)) {
                if(summands[i].operator === '+') {
                    acum = QueryFilters.runSumFunction(acum, nextSummandOp);
                } else if(summands[i].operator === '-') {
                    acum = QueryFilters.runSubFunction(acum, nextSummandOp);
                }
            } else {
                return QueryFilters.ebvFalse();
            }
        }
        return acum;
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runSumFunction = function(suma, sumb) {
    if(QueryFilters.isEbvError(suma) || QueryFilters.isEbvError(sumb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(suma) + QueryFilters.effectiveTypeValue(sumb);
    
    if(QueryFilters.isDouble(suma) || QueryFilters.isDouble(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(suma) || QueryFilters.isFloat(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(suma) || QueryFilters.isDecimal(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runSubFunction = function(suma, sumb) {
    if(QueryFilters.isEbvError(suma) || QueryFilters.isEbvError(sumb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(suma) - QueryFilters.effectiveTypeValue(sumb);

    if(QueryFilters.isDouble(suma) || QueryFilters.isDouble(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(suma) || QueryFilters.isFloat(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(suma) || QueryFilters.isDecimal(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runMultiplication = function(factor, factors, bindings, queryEngine, dataset, env) {
    var factorOp = QueryFilters.runFilter(factor,bindings,queryEngine, dataset, env);
    if(QueryFilters.isEbvError(factorOp)) {
        return factorOp;
    }

    var acum = factorOp;
    if(QueryFilters.isNumeric(factorOp)) {
        for(var i=0; i<factors.length; i++) {
            var nextFactorOp = QueryFilters.runFilter(factors[i].expression, bindings,queryEngine, dataset, env);
            if(QueryFilters.isEbvError(nextFactorOp)) {
                return factorOp;
            }
            if(QueryFilters.isNumeric(nextFactorOp)) {
                if(factors[i].operator === '*') {
                    acum = QueryFilters.runMulFunction(acum, nextFactorOp);
                } else if(factors[i].operator === '/') {
                    acum = QueryFilters.runDivFunction(acum, nextFactorOp);
                }
            } else {
                return QueryFilters.ebvFalse();
            }
        }
        return acum;
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runMulFunction = function(faca, facb) {
    if(QueryFilters.isEbvError(faca) || QueryFilters.isEbvError(facb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(faca) * QueryFilters.effectiveTypeValue(facb);

    if(QueryFilters.isDouble(faca) || QueryFilters.isDouble(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(faca) || QueryFilters.isFloat(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(faca) || QueryFilters.isDecimal(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runDivFunction = function(faca, facb) {
    if(QueryFilters.isEbvError(faca) || QueryFilters.isEbvError(facb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(faca) / QueryFilters.effectiveTypeValue(facb);

    if(QueryFilters.isDouble(faca) || QueryFilters.isDouble(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(faca) || QueryFilters.isFloat(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(faca) || QueryFilters.isDecimal(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runBuiltInCall = function(builtincall, args, bindings, queryEngine, dataset, env) {
    if(builtincall === 'notexists' || builtincall === 'exists') {
        // Run the query in the filter applying bindings

        var cloned = JSON.parse(JSON.stringify(args[0])); // @todo CHANGE THIS!!
        var ast = queryEngine.abstractQueryTree.parseSelect({pattern:cloned}, bindings);
        ast = queryEngine.abstractQueryTree.bind(ast.pattern, bindings);

        var result = queryEngine.executeSelectUnit([ {kind:'*'} ], 
                                                   dataset,
                                                   ast,
                                                   env);

        if(builtincall === 'exists') {
            return QueryFilters.ebvBoolean(result.length!==0);            
        } else {
            return QueryFilters.ebvBoolean(result.length===0);            
        }

    }  else {

        var ops = [];
        for(var i=0; i<args.length; i++) {
            if(args[i].token === 'var') {
                ops.push(args[i]);
            } else {
                var op = QueryFilters.runFilter(args[i], bindings, queryEngine, dataset, env);
                if(QueryFilters.isEbvError(op)) {
                    return op;
                }
                ops.push(op);
            }
        }

        if(builtincall === 'str') {
            if(ops[0].token === 'literal') {
                // lexical form literals
                return {token: 'literal', type:null, value:""+ops[0].value}; // type null? or "http://www.w3.org/2001/XMLSchema#string"
            } else if(ops[0].token === 'uri'){
                // codepoint URIs
                return {token: 'literal', type:null, value:ops[0].value}; // idem
            } else {
                return QueryFilters.ebvFalse();
            }
        } else if(builtincall === 'lang') {
            if(ops[0].token === 'literal'){
                if(ops[0].lang != null) {
                    return {token: 'literal', value:""+ops[0].lang};
                } else {
                    return {token: 'literal', value:""};
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(builtincall === 'datatype') {
            if(ops[0].token === 'literal'){
                var lit = ops[0];
                if(lit.type != null) {
                    if(typeof(lit.type) === 'string') {
                        return {token: 'uri', value:lit.type, prefix:null, suffix:null};
                    } else {
                        return lit.type;
                    }
                } else if(lit.lang == null) {
                    return {token: 'uri', value:'http://www.w3.org/2001/XMLSchema#string', prefix:null, suffix:null};
                } else {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(builtincall === 'isliteral') {
            if(ops[0].token === 'literal'){
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }        
        } else if(builtincall === 'isblank') {
            if(ops[0].token === 'blank'){
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }        
        } else if(builtincall === 'isuri' || builtincall === 'isiri') {
            if(ops[0].token === 'uri'){
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }        
        } else if(builtincall === 'sameterm') {
            var op1 = ops[0];
            var op2 = ops[1];
            var res = QueryFilters.RDFTermEquality(op1, op2, queryEngine, env);
            if(QueryFilters.isEbvError(res)) {
                res = false;
            }
            return QueryFilters.ebvBoolean(res);
        } else if(builtincall === 'langmatches') {
            var lang = ops[0];
            var langRange = ops[1];

            if(lang.token === 'literal' && langRange.token === 'literal'){
                if(langRange.value === '*' && lang.value != '') {
                    return QueryFilters.ebvTrue();
                } else {
                    return QueryFilters.ebvBoolean(lang.value.toLowerCase().indexOf(langRange.value.toLowerCase()) === 0)
                }
            } else {
                return QueryFilters.ebvError();
            }        
        } else if(builtincall === 'bound') {
            var boundVar = ops[0].value;
            var acum = [];
            if(boundVar == null) {
                return QueryFilters.ebvError();
            } else  if(bindings[boundVar] != null) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
            throw ("Builtin call "+builtincall+" not implemented yet");
        }
    }
};

QueryFilters.runUnaryExpression = function(unaryexpression, expression, bindings, queryEngine, dataset, env) {
    var op = QueryFilters.runFilter(expression, bindings,queryEngine, dataset, env);
    if(QueryFilters.isEbvError(op)) {
        return op;
    }

    if(unaryexpression === '!') {
        var res = QueryFilters.ebv(op);
        //console.log("** Unary ! ");
        //console.log(op)
        if(QueryFilters.isEbvError(res)) {
            //console.log("--- ERROR")
            //console.log(QueryFilters.ebvFalse())
            //console.log("\r\n")

            // ??
            return QueryFilters.ebvFalse();
        } else {
            res = !res;
            //console.log("--- BOOL")
            //console.log(QueryFilters.ebvBoolean(res))
            //console.log("\r\n")

            return QueryFilters.ebvBoolean(res);
        }
    } else if(unaryexpression === '+') {
        if(QueryFilters.isNumeric(op)) {
            return op;
        } else {
            return QueryFilters.ebvError();
        }
    } else if(unaryexpression === '-') {
        if(QueryFilters.isNumeric(op)) {
            var clone = {};
            for(var p in op) {
                clone[p] = op[p];
            }
            clone.value = -clone.value;
            return clone;
        } else {
            return QueryFilters.ebvError();
        }
    }
};

QueryFilters.runRegex = function(text, pattern, flags, bindings, queryEngine, dataset, env) {

    if(text != null) {
        text = QueryFilters.runFilter(text, bindings, queryEngine, dataset, env);
    } else {
        return QueryFilters.ebvError();
    }

    if(pattern != null) {
        pattern = QueryFilters.runFilter(pattern, bindings, queryEngine, dataset, env);
    } else {
        return QueryFilters.ebvError();
    }

    if(flags != null) {
        flags = QueryFilters.runFilter(flags, bindings, queryEngine, dataset, env);
    }


    if(pattern != null && pattern.token === 'literal' && (flags == null || flags.token === 'literal')) {
        pattern = pattern.value;
        flags = (flags == null) ? null : flags.value;
    } else {
        return QueryFilters.ebvError();
    }

    if(text!= null && text.token == 'var') {
        if(bindings[text.value] != null) {
            text = bindings[text.value];
        } else {
            return QueryFilters.ebvError();
        }
    } else if(text!=null && text.token === 'literal') {
        if(text.type == null || QueryFilters.isXsdType("string",text)) {
            text = text.value
        } else {
            return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvError();
    }

    var regex;
    if(flags == null) {
        regex = new RegExp(pattern);                    
    } else {
        regex = new RegExp(pattern,flags.toLowerCase());
    }
    if(regex.exec(text)) {
        return QueryFilters.ebvTrue();
    } else {
        return QueryFilters.ebvFalse();
    }    
};

QueryFilters.normalizeLiteralDatatype = function(literal, queryEngine, env) {
    if(literal.value.type == null || typeof(literal.value.type) != 'object') {
        return literal;
    } else {
        // type can be parsed as a hash using namespaces
        literal.value.type =  Utils.lexicalFormBaseUri(literal.value.type, env);
        return literal;
    }
};

QueryFilters.runIriRefOrFunction = function(iriref, args, bindings,queryEngine, dataset, env) {
    if(args == null) {
        return iriref;
    } else {
        var ops = [];
        for(var i=0; i<args.length; i++) {
            ops.push(QueryFilters.runFilter(args[i], bindings, queryEngine, dataset, env))
        }

        var fun = Utils.lexicalFormBaseUri(iriref, env);

        if(fun == "http://www.w3.org/2001/XMLSchema#integer" ||
           fun == "http://www.w3.org/2001/XMLSchema#decimal" ||
           fun == "http://www.w3.org/2001/XMLSchema#double" ||
           fun == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#long" ||
           fun == "http://www.w3.org/2001/XMLSchema#int" ||
           fun == "http://www.w3.org/2001/XMLSchema#short" ||
           fun == "http://www.w3.org/2001/XMLSchema#byte" ||
           fun == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           fun == "http://www.w3.org/2001/XMLSchema#positiveInteger") {
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == "http://www.w3.org/2001/XMLSchema#integer" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#double" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#long" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#int" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#short" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#byte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#positiveInteger") {
                    from.type = fun;
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#boolean') {
                    if(QueryFilters.ebv(from) == true) {
                        from.type = fun;
                        from.value = 1;
                    } else {
                        from.type = fun;
                        from.value = 0;
                    }
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#float' || 
                          from.type == 'http://www.w3.org/2001/XMLSchema#double') {
                    from.type = fun;
                    from.value = parseInt(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#string' || from.type == null) {
                    if(from.value.split(".").length > 2) {
                        return QueryFilters.ebvError();
                    } else if (from.value.split("-").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("/").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("+").length > 2) {
                        return QueryFilters.ebvError();                            
                    }

                    // @todo improve this with regular expressions for each lexical representation
                    if(fun == "http://www.w3.org/2001/XMLSchema#decimal") {
                        if(from.value.indexOf("e") != -1 || from.value.indexOf("E") != -1) {
                            return QueryFilters.ebvError();
                        }
                    }

                    // @todo improve this with regular expressions for each lexical representation
                    if(fun == "http://www.w3.org/2001/XMLSchema#int" || fun == "http://www.w3.org/2001/XMLSchema#integer") {
                        if(from.value.indexOf("e") != -1 || from.value.indexOf("E") != -1 || from.value.indexOf(".") != -1) {
                            return QueryFilters.ebvError();
                        }
                    }

                    try {
                        from.value = parseInt(parseFloat(from.value));
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#boolean") { 
            var from = ops[0];
            if(from.token === "literal" && from.type == null) {
                if(from.value === "true" || from.value === "1") {
                    return QueryFilters.ebvTrue();
                } else if(from.value === "false" || from.value === "0" ) {
                    return QueryFilters.ebvFalse();
                } else {
                    return QueryFilters.ebvError();
                }
            } else if(from.token === "literal") {
              if(QueryFilters.isEbvError(from)) {
                  return from;
              } else {
                  return QueryFilters.ebvBoolean(from);
              }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#string") { 
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == "http://www.w3.org/2001/XMLSchema#integer" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#double" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#long" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#int" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#short" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#byte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#float") {
                    from.type = fun;
                    from.value = ""+from.value;
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#string") {
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#boolean") {
                    if(QueryFilters.ebv(from)) {
                        from.type = fun;
                        from.value = 'true';
                    } else {
                        from.type = fun;
                        from.value = 'false';
                    }
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#dateTime" ||
                          from.type == "http://www.w3.org/2001/XMLSchema#date") {
                    from.type = fun;
                    if(typeof(from.value) != 'string') {
                        from.value = Utils.iso8601(from.value);
                    }
                    return from;
                } else if(from.type == null) {
                    from.value = ""+from.value;
                    from.type = fun;
                    return from;
                } else {
                    return QueryFilters.ebvError();
                }
            } else if(from.token === 'uri') {
                return {token: 'literal',
                        value: Utils.lexicalFormBaseUri(from, env),
                        type: fun,
                        lang: null};
            } else {
                return QueryFilters.ebvError();
            }            
        } else if(fun == "http://www.w3.org/2001/XMLSchema#dateTime" || fun == "http://www.w3.org/2001/XMLSchema#date") { 
            from = ops[0];
            if(from.type == "http://www.w3.org/2001/XMLSchema#dateTime" || from.type == "http://www.w3.org/2001/XMLSchema#date") {
                return from;
            } else if(from.type == "http://www.w3.org/2001/XMLSchema#string" || from.type == null) {
                try {
                    from.value = Utils.iso8601(Utils.parseStrictISO8601(from.value));
                    from.type = fun;
                    return from;
                } catch(e) {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#float") { 
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == 'http://www.w3.org/2001/XMLSchema#decimal' || 
                   from.type == 'http://www.w3.org/2001/XMLSchema#int') {
                    from.type = fun;
                    from.value = parseFloat(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#boolean') {
                    if(QueryFilters.ebv(from) == true) {
                        from.type = fun;
                        from.value = 1.0;
                    } else {
                        from.type = fun;
                        from.value = 0.0;
                    }
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#float' || 
                          from.type == 'http://www.w3.org/2001/XMLSchema#double') {
                    from.type = fun;
                    from.value = parseFloat(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#string') {
                    try {
                        from.value = parseFloat(from.value);
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else if(from.type == null) {
                    // checking some exceptions that are parsed as Floats by JS
                    if(from.value.split(".").length > 2) {
                        return QueryFilters.ebvError();
                    } else if (from.value.split("-").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("/").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("+").length > 2) {
                        return QueryFilters.ebvError();                            
                    }

                    try {
                        from.value = parseFloat(from.value);
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else {
            // unknown function
            return QueryFilters.ebvError();
        }
    }
};

// end of ./src/js-query-engine/src/query_filters.js 
// exports
var QueryPlanDPSize = {};

QueryPlanDPSize.variablesInBGP = function(bgp) {
    // may be cached in the pattern
    var variables = bgp.variables;
    if(variables) {
        return variables;
    }

    var components =  bgp.value || bgp;
    variables  = [];
    for(comp in components) {
        if(components[comp] && components[comp].token === "var") {
            variables.push(components[comp].value);
        } else if(components[comp] && components[comp].token === "blank") {
            variables.push("blank:"+components[comp].value);
        }
    }
    bgp.variables = variables;

    return variables;
};

QueryPlanDPSize.connected = function(leftPlan, rightPlan) {
    var varsLeft ="/"+leftPlan.vars.join("/")+"/";
    for(var i=0; i<rightPlan.vars.length; i++) {
        if(varsLeft.indexOf("/"+rightPlan.vars[i]+"/") != -1) {
            return true;
        }
    }

    return false;
};

// @modified dp
QueryPlanDPSize.variablesIntersectionBGP = function(bgpa, bgpb) {
    var varsa = QueryPlanDPSize.variablesInBGP(bgpa).sort();
    var varsb = QueryPlanDPSize.variablesInBGP(bgpb).sort();
    var ia = 0;
    var ib = 0;

    var intersection = [];

    while(ia<varsa.length && ib<varsb.length) {
        if(varsa[ia] === varsb[ib]) {
            intersection.push(varsa[ia]);
            ia++;
            ib++;
        } else if(varsa[ia] < varsb[ib]) {
            ia++;
        } else {
            ib++;
        }
    }

    return intersection;
};

//@modified dp
/**
 * All BGPs sharing variables are grouped together.
 */
QueryPlanDPSize.executeAndBGPsGroups = function(bgps) {
    var groups = {};
    var groupVars = {};
    var groupId = 0;
    for(var i=0; i<bgps.length; i++) {
        var bgp = bgps[i];

        var vars = [];
        for(var comp in bgp) {
            if(comp != '_cost') {
                if(bgp[comp].token === 'var') {
                    vars.push(bgp[comp].value)
                } else if(bgp[comp].token === 'blank') {
                    vars.push(bgp[comp].value);
                }
            }
        }

        var foundGroup = false;
        for(var nextGroupId in groupVars) {
            groupVar = groupVars[nextGroupId];
            for(var j=0; j<vars.length; j++) {
                var thisVar = "/"+vars[j]+"/";
                if(groupVar.indexOf(thisVar) != -1) {
                    groups[nextGroupId].push(bgp);
                    groupVars[nextGroupId] = groupVar+(vars.join("/"))+"/"
                    foundGroup = true;
                    break;
                }
            }
            if(foundGroup)
                break;
        }
        if(!foundGroup) {
            groups[groupId] = [bgp];
            groupVars[groupId] = "/"+(vars.join("/"))+"/";
            groupId++;
        }
    }

    var acum = [];
    for(var groupId in groups) {
        acum.push(groups[groupId]);
    }

    return acum;
};

// @modified dp
QueryPlanDPSize.intersectionSize = function(leftPlan, rightPlan) {
    var idsRight = rightPlan.i.split("_");
    for(var i=0; i<idsRight.length; i++) {
        if(idsRight[i]=="")
            continue;
        if(leftPlan.i.indexOf('_'+idsRight[i]+'_') != -1) {
            return 1; // we just need to know if this value is >0
        }
    }
    return 0;
};

// @modified dp
QueryPlanDPSize.createJoinTree = function(leftPlan, rightPlan) {
    var varsLeft ="/"+leftPlan.vars.join("/")+"/";
    var acumVars = leftPlan.vars.concat([]);
    var join = [];

    for(var i=0; i<rightPlan.vars.length; i++) {
        if(varsLeft.indexOf("/"+rightPlan.vars[i]+"/") != -1) {
            if(rightPlan.vars[i].indexOf("_:") == 0) {
                join.push("blank:"+rightPlan.vars[i]);
            } else {
                join.push(rightPlan.vars[i]);
            }
        } else {
            acumVars.push(rightPlan.vars[i]);
        }
    }

    var rightIds = rightPlan.i.split("_");
    var leftIds = leftPlan.i.split("_");
    var distinct = {};
    for(var i=0; i<rightIds.length; i++) {
        if(rightIds[i] != "") {
            distinct[rightIds[i]] = true;
        }
    }
    for(var i=0; i<leftIds.length; i++) {
        if(leftIds[i] != "") {
            distinct[leftIds[i]] = true;
        }
    }
    var ids = [];
    for(var id in distinct) {
        ids.push(id);
    }

    // new join tree
    return {
        left: leftPlan,
        right: rightPlan,
        cost: leftPlan.cost+rightPlan.cost,
        i: "_"+(ids.sort().join("_"))+"_",
        vars: acumVars,
        join: join
    };
};

// @modified dp
QueryPlanDPSize.executeBushyTree = function(treeNode, dataset, queryEngine, env) {
    if(treeNode.left == null ) {
        //console.log("*** join empty left"+treeNode.i);
        //console.log(treeNode);
        return QueryPlanDPSize.executeEmptyJoinBGP(treeNode.right, dataset, queryEngine, env);
    } else if(treeNode.right == null) {
        //console.log("*** executing left empty join "+treeNode.i);
        //console.log(treeNode);
        return QueryPlanDPSize.executeEmptyJoinBGP(treeNode.left, dataset, queryEngine, env);
    } else {
        //console.log("*** executing left:"+treeNode.i);
        //console.log(treeNode.left);
        var resultsLeft = QueryPlanDPSize.executeBushyTree(treeNode.left, dataset, queryEngine, env);
        //console.log("-left:");
        //console.log(success);
        //console.log(resultsLeft);

        if(resultsLeft!=null) {
            //console.log("*** executing right:"+treeNode.i);
            //console.log(treeNode.right);
            var resultsRight = QueryPlanDPSize.executeBushyTree(treeNode.right, dataset, queryEngine, env);
            //console.log("-right:");
            //console.log(success);
            //console.log(resultsRight);
            if(resultsRight!=null) {
                //var joinVars = QueryPlanDPSize.variablesIntersectionBGP(treeNode.left,treeNode.right);
                //console.log("*** BACK executing right -> "+treeNode.i);
                //console.log("**  left:");
                //console.log(resultsLeft);
                //console.log("**  right:");
                //console.log(resultsRight);
                //console.log("JOINING...");
                //console.log(resultsLeft);
                //console.log(resultsRight);
                //console.log("--------------");
                var bindings = QueryPlanDPSize.joinBindings2(treeNode.join, resultsLeft, resultsRight);
                //var bindings = QueryPlanDPSize.joinBindings(resultsLeft, resultsRight);
                //console.log(bindings);
                return bindings;
            } else {
                return null;
            }
        }
    }
};


//@modified dp
QueryPlanDPSize.executeAndBGPsDPSize = function(allBgps, dataset, queryEngine, env) {
    var groups = QueryPlanDPSize.executeAndBGPsGroups(allBgps);
    var groupResults = [];
    for(var g=0; g<groups.length; g++) {

        // Build bushy tree for this group
        var bgps = groups[g];
        //console.log("NEW GROUP!!");
        //console.log(bgps);
        var costFactor = 1;
	var bgpas = queryEngine.computeCosts(bgps,env);

        //console.log("COMPUTED COSTS:");
        //console.log(bgps);

        var bestPlans = {};
        var plans = {};
        var sizes = {};

        var maxSize = 1;
        var maxPlan = null;

        var cache = {};
        
        sizes['1'] = [];

        // Building plans of size 1
        for(var i=0; i<bgps.length; i++) {
            var vars = [];
            for(var comp in bgps[i]) {
                if(comp != '_cost') {
                    if(bgps[i][comp].token === 'var') {
                        vars.push(bgps[i][comp].value);
                    } else if(bgps[i][comp].token === 'blank') {
                        vars.push(bgps[i][comp].value);
                    }
                }
            }
            //console.log("VARS:");
            //console.log(vars);
            plans["_"+i+"_"] = {left: bgps[i], right:null, cost:bgps[i]._cost, i:('_'+i+'_'), vars:vars};
            var plan = {left: bgps[i], right:null, cost:bgps[i]._cost, i:('_'+i+'_'), vars:vars};
            bestPlans["_"+i+"_"] = plan;
            delete bgps[i]['_cost'];
            cache["_"+i+"_"] = true;
            sizes['1'].push("_"+i+"_");
            if(maxPlan == null || maxPlan.cost>plan.cost) {
                maxPlan = plan;
            }
        }

        //console.log("BEST PLANS");
        //console.log(bestPlans);
        
        // dynamic programming -> build plans of increasing size
        for(var s=2; s<=bgps.length; s++) { // size
            //console.log("\n\n\n*********************ITERATION");
            //console.log(s);
            for(var sl=1; sl<s; sl++) { // size left plan
                var sr = s - sl; // size right plan
                //console.log("SL:"+sl);
                //console.log("SR:"+sr);
                var leftPlans = sizes[''+sl] || [];
                var rightPlans = sizes[''+sr] || [];
                //console.log("LEFT PLANS");
                //console.log(leftPlans);
                //console.log("RIGHT PLANS");
                //console.log(rightPlans);
                for(var i=0; i<leftPlans.length; i++) {
                    for(var j=0; j<rightPlans.length; j++) {
                        if(leftPlans[i]===rightPlans[j])
                            continue;
                        var leftPlan = plans[leftPlans[i]];
                        var rightPlan = plans[rightPlans[j]];
                        //console.log("LEFT PLAN");
                        //console.log(leftPlan);
                        //console.log("RIGHT PLAN");
                        //console.log(rightPlan);
                        //console.log("INTERSECTION");
                        //console.log(QueryPlanDPSize.intersectionSize(leftPlan, rightPlan));

                        // condition (1)
                        if(QueryPlanDPSize.intersectionSize(leftPlan, rightPlan) == 0) {
                            // condition (2)

                            //console.log("CONNECTED");
                            //console.log(QueryPlanDPSize.connected(leftPlan,rightPlan));
                            if(QueryPlanDPSize.connected(leftPlan,rightPlan)) {
                                maxSize = s;
                                var p1 = bestPlans[leftPlan.i];  //QueryPlanDPSize.bestPlan(leftPlan, bestPlans);
                                var p2 = bestPlans[rightPlan.i]; //QueryPlanDPSize.bestPlan(rightPlan, bestPlans);

                                //console.log("P1");
                                //console.log(p1);
                                //console.log("P2");
                                //console.log(p2);
                                var currPlan = QueryPlanDPSize.createJoinTree(p1,p2);
                                if(!cache[currPlan.i]) {
                                    cache[currPlan.i] = true;
                                    //console.log("CURR PLAN");
                                    //console.log(currPlan);
                                    var costUnion = currPlan.cost+1;
                                    if(bestPlans[currPlan.i] != null) {
                                        costUnion = bestPlans[currPlan.i].cost;
                                    }
                                    
                                    var acum = sizes[s] || [];
                                    acum.push(currPlan.i);
                                    plans[currPlan.i] = currPlan;
                                    sizes[s] = acum;
                                    
                                    //console.log("COST UNION");
                                    //console.log(costUnion);
                                    if(costUnion > currPlan.cost) {
                                        if(maxSize === s) {
                                            maxPlan = currPlan;
                                        }
                                        bestPlans[currPlan.i] = currPlan;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //console.log(sizes);
        
        //console.log("==== FOUND ===");
        //console.log(maxPlan);
        groupResults.push(maxPlan);
    }


    // now execute the Bushy trees and perform
    // cross products between groups
    var acum = null;

    for(var g=0; g<groupResults.length; g++) {
        var tree = groupResults[g];
	//console.log("\n\n\nEXECUTING:");
	//console.log(tree);
        var result = QueryPlanDPSize.executeBushyTree(tree, dataset, queryEngine, env);
        if(acum == null) {
            acum = result;
        } else {
            acum = QueryPlanDPSize.crossProductBindings(acum, result);
        }
    };

    return acum;
};

// @modified dp
QueryPlanDPSize.executeEmptyJoinBGP = function(bgp, dataset, queryEngine, queryEnv) {
    return QueryPlanDPSize.executeBGPDatasets(bgp, dataset, queryEngine, queryEnv);
};


// @mofidified dp
QueryPlanDPSize.executeBGPDatasets = function(bgp, dataset, queryEngine, queryEnv) {
    // avoid duplicate queries in the same graph
    // merge of graphs is not guaranted here.
    var duplicates = {};

    if(bgp.graph == null) {
        //union through all default graph(s)
        var acum = [];
        for(var i=0; i<dataset['default'].length; i++) {
            if(duplicates[dataset['default'][i].oid] == null) {
                duplicates[dataset['default'][i].oid] = true;
                bgp.graph = dataset['default'][i];//.oid
                var results = queryEngine.rangeQuery(bgp, queryEnv);
                results = QueryPlanDPSize.buildBindingsFromRange(results, bgp);
                acum.push(results);
            }
        }
        var acumBindings = QueryPlanDPSize.unionManyBindings(acum);
        return acumBindings;
    } else if(bgp.graph.token === 'var') {
        // union through all named datasets
        var graphVar = bgp.graph.value;        
        var acum = [];

        for(var i=0; i<dataset.named.length; i++) {
            if(duplicates[dataset.named[i].oid] == null) {
                duplicates[dataset.named[i].oid] = true;
                bgp.graph = dataset.named[i];//.oid
                
                var results = queryEngine.rangeQuery(bgp, queryEnv);
                if(results != null) {
                    results = QueryPlanDPSize.buildBindingsFromRange(results, bgp);
                    // add the graph bound variable to the result 
                    for(var j=0; j< results.length; j++) {
                        results[j][graphVar] = dataset.named[i].oid;
                    }
                    acum.push(results);
                } else {
                    return null;
                }
            }
        }
        
        var acumBindings = QueryPlanDPSize.unionManyBindings(acum||[]);
        return acumBindings;

    } else {
        // graph already has an active value, just match.
        // Filtering the results will still be necessary
        var results = queryEngine.rangeQuery(bgp, queryEnv);
        if(results!=null) {
            results = QueryPlanDPSize.buildBindingsFromRange(results, bgp);
            return results;
        } else {
            return null;
        }
    }
};

// @used
QueryPlanDPSize.buildBindingsFromRange = function(results, bgp) {
    var variables = QueryPlanDPSize.variablesInBGP(bgp);
    var bindings = {};

    var components =  bgp.value||bgp;
    var bindings = {};
    for(comp in components) {
        if(components[comp] && components[comp].token === "var") {
            bindings[comp] = components[comp].value;
        } else if(components[comp] && components[comp].token === "blank") {
            bindings[comp] = "blank:"+components[comp].value;
        }
    }

    var resultsBindings =[];

    if(results!=null) {
      for(var i=0; i<results.length; i++) {
          var binding = {};
          var result  = results[i];
          for(var comp in bindings) {
              var value = result[comp];
              binding[bindings[comp]] = value;
          }
          resultsBindings.push(binding);
      }
    }

    return resultsBindings;
};


// @used
QueryPlanDPSize.areCompatibleBindings = function(bindingsa, bindingsb) {
    for(var variable in bindingsa) {
        if(bindingsb[variable]!=null && (bindingsb[variable] != bindingsa[variable])) {
            return false;
        }
    }

    return true;
};

//QueryPlanDPSize.areCompatibleBindingsStrict = function(bindingsa, bindingsb) {
//    var foundSome = false;
//    for(var variable in bindingsa) {
// 	if(bindingsb[variable]!=null && (bindingsb[variable] != bindingsa[variable])) {
// 	    return false;
// 	} else if(bindingsb[variable] == bindingsa[variable]){
// 	    foundSome = true;
// 	}
//    }
//     
//    return foundSome;
//};



// @used
QueryPlanDPSize.mergeBindings = function(bindingsa, bindingsb) {
    var merged = {};
    for(var variable in bindingsa) {
        merged[variable] = bindingsa[variable];
    }

    for(var variable in bindingsb) {
        merged[variable] = bindingsb[variable];
    }

    return merged;
};

QueryPlanDPSize.joinBindings2 = function(bindingVars, bindingsa, bindingsb) {
    var acum = {};
    var bindings, variable, variableValue, values, tmp;
    var joined = [];

    for(var i=0; i<bindingsa.length; i++) {
        bindings = bindingsa[i];
        tmp = acum;
        for(var j=0; j<bindingVars.length; j++) {
            variable = bindingVars[j];
            variableValue = bindings[variable];
            if(j == bindingVars.length-1) {
                values = tmp[variableValue] || [];
                values.push(bindings);
                tmp[variableValue] = values;
            } else {
                values = tmp[variableValue] || {};
                tmp[variableValue] = values;
                tmp = values;
            }
        }
    }

    for(var i=0; i<bindingsb.length; i++) {
        bindings = bindingsb[i];
        tmp = acum;
        for(var j=0; j<bindingVars.length; j++) {
            variable = bindingVars[j];
            variableValue = bindings[variable];

            if(tmp[variableValue] != null) {
                if(j == bindingVars.length-1) {
                    for(var k=0; k<tmp[variableValue].length; k++) {
                        joined.push(QueryPlanDPSize.mergeBindings(tmp[variableValue][k],bindings));
                    }
                } else {
                    tmp = tmp[variableValue];
                }
            } else {
                continue;
            }
        }
    }

    return joined;
};

// @used
QueryPlanDPSize.joinBindings = function(bindingsa, bindingsb) {
    var result = [];

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            if(QueryPlanDPSize.areCompatibleBindings(bindinga, bindingb)){
                result.push(QueryPlanDPSize.mergeBindings(bindinga, bindingb));
            }
        }
    }
    return result;
};

// @used
QueryPlanDPSize.augmentMissingBindings = function(bindinga, bindingb) {
    for(var pb in bindingb) {
        if(bindinga[pb] == null) {
            bindinga[pb] = null;
        }
    }
    return bindinga;
};

/*
  QueryPlanDPSize.diff = function(bindingsa, biundingsb) {
  var result = [];

  for(var i=0; i< bindingsa.length; i++) {
  var bindinga = bindingsa[i];
  var matched = false;
  for(var j=0; j<bindingsb.length; j++) {
  var bindingb = bindingsb[j];
  if(QueryPlanDPSize.areCompatibleBindings(bindinga, bindingb)){
  matched = true;
  result.push(QueryPlanDPSize.mergeBindings(bindinga, bindingb));
  }
  }
  if(matched === false) {
  // missing bindings must be present for further processing
  // e.g. filtering by not present value (see DAWG tests
  // bev-6)
  QueryPlanDPSize.augmentMissingBindings(bindinga, bindingb);
  result.push(bindinga);
  }
  }

  return result;    
  };
*/

// @used
QueryPlanDPSize.leftOuterJoinBindings = function(bindingsa, bindingsb) {
    var result = [];
    // strict was being passes ad an argument
    //var compatibleFunction = QueryPlanDPSize.areCompatibleBindings;
    //if(strict === true)
    // 	compatibleFunction = QueryPlanDPSize.areCompatibleBindingsStrict;

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        var matched = false;
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            if(QueryPlanDPSize.areCompatibleBindings(bindinga, bindingb)){
                matched = true;
                result.push(QueryPlanDPSize.mergeBindings(bindinga, bindingb));
            }
        }
        if(matched === false) {
            // missing bindings must be present for further processing
            // e.g. filtering by not present value (see DAWG tests
            // bev-6)
            // augmentMissingBindings set their value to null.
            QueryPlanDPSize.augmentMissingBindings(bindinga, bindingb);
            result.push(bindinga);
        }
    }
    return result;
};

// @modified dp
QueryPlanDPSize.crossProductBindings = function(bindingsa, bindingsb) {
    var result = [];

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            result.push(QueryPlanDPSize.mergeBindings(bindinga, bindingb));
        }
    }

    return result;
};

// @used
QueryPlanDPSize.unionBindings = function(bindingsa, bindingsb) {
    return bindingsa.concat(bindingsb);
};

// @used
QueryPlanDPSize.unionManyBindings = function(bindingLists) {
    var acum = [];
    for(var i=0; i<bindingLists.length; i++) {
        var bindings = bindingLists[i];
        acum = QueryPlanDPSize.unionBindings(acum, bindings);
    }

    return acum;
};

// end of ./src/js-query-engine/src/query_plan_sync_dpsize.js 
// exports
var QueryEngine = {};

//imports
var QueryPlan = QueryPlanDPSize;
QueryEngine.QueryEngine = function(params) {
    if(arguments.length != 0) {
        this.backend = params.backend;
        this.lexicon = params.lexicon;
        // batch loads should generate events?
        this.eventsOnBatchLoad = (params.eventsOnBatchLoad || false);
        // list of namespaces that will be automatically added to every query
        this.defaultPrefixes = {};
        this.abstractQueryTree = new AbstractQueryTree.AbstractQueryTree();
        this.rdfLoader = new RDFLoader.RDFLoader(params['communication']);
        this.callbacksBackend = new Callbacks.CallbacksBackend(this);
    }
};

// Utils
QueryEngine.QueryEngine.prototype.registerNsInEnvironment = function(prologue, env) {
    var prefixes = [];
    if(prologue != null && prologue.prefixes != null) {
	prefixes =prologue.prefixes;
    }
    var toSave = {};

    // adding default prefixes;
    for(var p in this.defaultPrefixes) {
        toSave[p] = this.defaultPrefixes[p];
    }

    for(var i=0; i<prefixes.length; i++) {
        var prefix = prefixes[i];
        if(prefix.token === "prefix") {
            toSave[prefix.prefix] = prefix.local;
        }
    }

    env.namespaces = toSave;
    if(prologue!=null && prologue.base && typeof(prologue.base) === 'object') {
        env.base = prologue.base.value;
    } else {
        env.base = null;
    }
};

QueryEngine.QueryEngine.prototype.applyModifier = function(modifier, projectedBindings) {
    if(modifier == "DISTINCT") {
        var map = {};
        var result = [];
        for(var i=0; i<projectedBindings.length; i++) {
            var bindings = projectedBindings[i];
            var key = "";
         
            // if no projection variables hash is passed, all the bound
            // variable in the current bindings will be used.
            for(var p in (bindings)) {
                // hashing the object
                var obj = bindings[p];
                if(obj == null) {
                    key = key+p+'null';
                } else if(obj.token == 'literal') {
                    if(obj.value != null) {
                        key = key + obj.value;
                    }
                    if(obj.lang != null) {
                        key = key + obj.lang;
                    }
                    if(obj.type != null) {
                        key = key + obj.type;
                    }
                } else if(obj.value) {
                    key  = key + p + obj.value;
                } else {
                    key = key + p + obj;
                }
            }
         
            if(map[key] == null) {
                // this will preserve the order in projectedBindings
                result.push(bindings);
                map[key] = true;
            }
        }
        return result; 
    } else {
        return projectedBindings;
    }
};

QueryEngine.QueryEngine.prototype.applyLimitOffset = function(offset, limit, bindings) {
    if(limit == null && offset == null) {
        return bindings;
    }

    if (offset == null) {
        offset = 0;
    }

    if(limit == null) {
        limit = bindings.length;
    } else {
        limit = offset + limit;
    }

    return bindings.slice(offset, limit);
};


QueryEngine.QueryEngine.prototype.applySingleOrderBy = function(orderFilters, modifiedBindings, dataset, outEnv) {
    var acum = [];
    for(var i=0; i<orderFilters.length; i++) {
        var orderFilter = orderFilters[i];
        var results = QueryFilters.collect(orderFilter.expression, [modifiedBindings], dataset, outEnv, this);
        acum.push(results[0].value);
    }
    return {binding:modifiedBindings, value:acum};
};

QueryEngine.QueryEngine.prototype.applyOrderBy = function(order, modifiedBindings, dataset, outEnv) {
    var that = this;
    var acum = [];
    if(order != null && order.length > 0) {
        for(var i=0; i<modifiedBindings.length; i++) {
            var bindings = modifiedBindings[i];
            var results = that.applySingleOrderBy(order, bindings, dataset, outEnv);
            acum.push(results);
        }

        acum.sort(function(a,b){
            return that.compareFilteredBindings(a, b, order, outEnv);
        });

        var toReturn = [];
        for(var i=0; i<acum.length; i++) {
            toReturn.push(acum[i].binding);
        }

        return toReturn;
    } else {
        return modifiedBindings;
    }
};

QueryEngine.QueryEngine.prototype.compareFilteredBindings = function(a, b, order, env) {
    var found = false;
    var i = 0;
    while(!found) {
        if(i==a.value.length) {
            return 0;
        }
        var direction = order[i].direction;
        var filterResult;

        // unbound first
        if(a.value[i] == null && b.value[i] == null) {
            i++;
            continue;
        }else if(a.value[i] == null) {
            filterResult = {value: false};
        } else if(b.value[i] == null) {
            filterResult = {value: true};
        } else 

        // blanks
        if(a.value[i].token === 'blank' && b.value[i].token === 'blank') {
            i++;
            continue;
        } else if(a.value[i].token === 'blank') { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'blank') {
            filterResult = {value: true};        
        } else 

        // uris
        if(a.value[i].token === 'uri' && b.value[i].token === 'uri') {
            if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
                i++;
                continue;
            } else {
                filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
            }
        } else if(a.value[i].token === 'uri') { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'uri') {
            filterResult = {value: true};        
        } else 

        // simple literals
        if(a.value[i].token === 'literal' && b.value[i].token === 'literal' && a.value[i].type == null && b.value[i].type == null) {
            if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
                i++;
                continue;
            } else {
                filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
            }
        } else if(a.value[i].token === 'literal' && a.value[i].type == null) { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'literal' && b.value[i].type == null) {
            filterResult = {value: true};        
        } else 

        // literals
        if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
            i++;
            continue;
        } else {
            filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
        }     


        // choose value for comparison based on the direction
        if(filterResult.value == true) {
            if(direction === "ASC") {
                return 1;
            } else {
                return -1;
            }
        } else {
            if(direction === "ASC") {
                return -1;
            } else {
                return 1;
            }
        }       
    }
};

QueryEngine.QueryEngine.prototype.removeDefaultGraphBindings = function(bindingsList, dataset) {
    var onlyDefaultDatasets = [];
    var namedDatasetsMap = {};
    for(var i=0; i<dataset.named.length; i++) {
        namedDatasetsMap[dataset.named[i].oid] = true;
    }
    for(i=0; i<dataset['default'].length; i++) {
        if(namedDatasetsMap[dataset['default'][i].oid] == null) {
            onlyDefaultDatasets.push(dataset['default'][i].oid);
        }
    }
    var acum = [];
    for(i=0; i<bindingsList.length; i++) {
        var bindings = bindingsList[i];
        var foundDefaultGraph = false;
        for(var p in bindings) {
            for(var j=0; j<namedDatasetsMap.length; j++) {
                if(bindings[p] === namedDatasetsMap[j]) {
                    foundDefaultGraph = true;
                    break;
                }
            }
            if(foundDefaultGraph) {
                break;
            }
        }
        if(!foundDefaultGraph) {
            acum.push(bindings);
        }
    }

    return acum;
};


QueryEngine.QueryEngine.prototype.aggregateBindings = function(projection, bindingsGroup, dataset, env) {
    var denormBindings = this.copyDenormalizedBindings(bindingsGroup, env.outCache);
    var aggregatedBindings = {};
    for(var i=0; i<projection.length; i++) {
        var aggregatedValue = QueryFilters.runAggregator(projection[i], denormBindings, this, dataset, env);
        if(projection[i].alias) {
            aggregatedBindings[projection[i].alias.value] = aggregatedValue; 
        } else {
            aggregatedBindings[projection[i].value.value] = aggregatedValue; 
        }
    }
    return(aggregatedBindings);
};


QueryEngine.QueryEngine.prototype.projectBindings = function(projection, results, dataset) {
    if(projection[0].kind === '*') {
        return results;
    } else {
        var toProject = [];
        var projectedResults = [];

        for(var i=0; i<results.length; i++) {
            var currentResult = results[i];
            var currentProjected = {};
            var shouldAdd = true;

            for(var j=0; j< projection.length; j++) {
                if(projection[j].token == 'variable' && projection[j].kind != 'aliased') {
                    currentProjected[projection[j].value.value] = currentResult[projection[j].value.value];
                } else if(projection[j].token == 'variable' && projection[j].kind == 'aliased') {
                    var ebv = QueryFilters.runFilter(projection[j].expression, currentResult, this, dataset, {blanks:{}, outCache:{}});
                    if(QueryFilters.isEbvError(ebv)) {
                        shouldAdd = false;
                        break;
                    } else {
                        currentProjected[projection[j].alias.value] = ebv;
                    }
                }
            }

            if(shouldAdd === true) {
                projectedResults.push(currentProjected);
            }
            
        }

        return projectedResults;
    }
};

QueryEngine.QueryEngine.prototype.resolveNsInEnvironment = function(prefix, env) {
    var namespaces = env.namespaces;
    return namespaces[prefix];
};

QueryEngine.QueryEngine.prototype.termCost = function(term, env) {
    if(term.token === 'uri') {
        var uri = Utils.lexicalFormBaseUri(term, env);
        if(uri == null) {
            return(0);
        } else {
            return(this.lexicon.resolveUriCost(uri));
        }

    } else if(term.token === 'literal') {
        var lexicalFormLiteral = Utils.lexicalFormLiteral(term, env);
        return(this.lexicon.resolveLiteralCost(lexicalFormLiteral));
    } else if(term.token === 'blank') {
        var label = term.value;
        return this.lexicon.resolveBlankCost(label);
    } else if(term.token === 'var') {
        return (this.lexicon.oidCounter/3)
    } else {
          return(null);
    }
    
};

QueryEngine.QueryEngine.prototype.normalizeTerm = function(term, env, shouldIndex) {
    if(term.token === 'uri') {
        var uri = Utils.lexicalFormBaseUri(term, env);
        if(uri == null) {
            return(null);
        } else {
            if(shouldIndex) {
                return(this.lexicon.registerUri(uri));
            } else {
                return(this.lexicon.resolveUri(uri));
            }
        }

    } else if(term.token === 'literal') {
        var lexicalFormLiteral = Utils.lexicalFormLiteral(term, env);
        if(shouldIndex) {
           var oid = this.lexicon.registerLiteral(lexicalFormLiteral);
            return(oid);
        } else {
            var oid = this.lexicon.resolveLiteral(lexicalFormLiteral);
            return(oid);
        }
    } else if(term.token === 'blank') {
        var label = term.value;
        var oid = env.blanks[label];
        if( oid != null) {
            return(oid);
        } else {
            if(shouldIndex) {
                var oid = this.lexicon.registerBlank(label);
                env.blanks[label] = oid;
                return(oid);
            } else {
                var oid = this.lexicon.resolveBlank(label);
                env.blanks[label] = oid;
                return(oid);
            }
        }
    } else if(term.token === 'var') {
        return(term.value);
    } else {
          return(null);
    }
};

QueryEngine.QueryEngine.prototype.normalizeDatasets = function(datasets, outerEnv, callback) {
    var that = this;
    for(var i=0; i<datasets.length; i++) {
        var dataset = datasets[i];
        if(dataset.value === that.lexicon.defaultGraphUri) {
            dataset.oid = that.lexicon.defaultGraphOid;
        } else {
            var oid = that.normalizeTerm(dataset, outerEnv, false);      
            if(oid != null) {
                dataset.oid = oid;
            } else {
                return(null);
            }
        }  
    }

    return true
};

QueryEngine.QueryEngine.prototype.normalizeQuad = function(quad, queryEnv, shouldIndex) {
    var subject    = null;
    var predicate  = null;
    var object     = null;
    var graph      = null;
    var oid;

    if(quad.graph == null) {
        graph = 0; // default graph
    } else {
        oid = this.normalizeTerm(quad.graph, queryEnv, shouldIndex)
        if(oid!=null) {
            graph = oid;
            if(shouldIndex === true && quad.graph.token!='var')
                this.lexicon.registerGraph(oid);
        } else {
            return null;
        }
    }

    oid = this.normalizeTerm(quad.subject, queryEnv, shouldIndex);
    if(oid!=null) {
        subject = oid;
    } else {
        return null
    }

    oid = this.normalizeTerm(quad.predicate, queryEnv, shouldIndex);
    if(oid!=null) {
        predicate = oid;
    } else {
        return null
    }

    oid = this.normalizeTerm(quad.object, queryEnv, shouldIndex);
    if(oid!=null) {
        object = oid;
    } else {
        return null
    }

    return({subject:subject, 
            predicate:predicate, 
            object:object, 
            graph:graph});
};

QueryEngine.QueryEngine.prototype.quadCost = function(quad, queryEnv, shouldIndex) {
    var subject    = null;
    var predicate  = null;
    var object     = null;
    var graph      = null;
    var oid;

    if(quad.graph == null) {
        graph = (this.lexicon.oidCounter/4)
    } else {
        graph = this.termCost(quad.graph, queryEnv)
    }

    subject = this.termCost(quad.subject, queryEnv);
    predicate = this.termCost(quad.predicate, queryEnv);
    object = this.termCost(quad.object, queryEnv);

    return(graph+subject+predicate+object);
};

QueryEngine.QueryEngine.prototype.denormalizeBindingsList = function(bindingsList, env) {
    var results = [];

    for(var i=0; i<bindingsList.length; i++) {
        var result = this.denormalizeBindings(bindingsList[i], env)
        results.push(result);
    }
    return(results);
};

/**
 * Receives a bindings map (var -> oid) and an out cache (oid -> value)
 * returns a bindings map (var -> value) storing in cache all the missing values for oids
 *
 * This is required just to save lookups when final results are generated.
 */
QueryEngine.QueryEngine.prototype.copyDenormalizedBindings = function(bindingsList, out, callback) {
    var denormList = [];
    for(var i=0; i<bindingsList.length; i++) {
        var denorm = {};
        var bindings = bindingsList[i];
        var variables = Utils.keys(bindings);
        for(var j=0; j<variables.length; j++) {
            var oid = bindings[variables[j]];
            if(oid == null) {
                // this can be null, e.g. union different variables (check SPARQL recommendation examples UNION)
                denorm[variables[j]] = null;
            } else if(typeof(oid) === 'object') {
                // the binding is already denormalized, this can happen for example because the value of the
                // binding is the result of the aggregation of other bindings in a GROUP clause
                denorm[variables[j]] = oid;
            } else {
                var inOut = out[oid];
                if(inOut!= null) {
                    denorm[variables[j]] = inOut;
                } else {                    
                    var val = this.lexicon.retrieve(oid);
                    out[oid] = val;
                    denorm[variables[j]] = val;
                }
            }
        }
        denormList.push(denorm);
    }
    return denormList;
};

QueryEngine.QueryEngine.prototype.denormalizeBindings = function(bindings, env, callback) {
    var variables = Utils.keys(bindings);
    var envOut = env.outCache;
    for(var i=0; i<variables.length; i++) {
        var oid = bindings[variables[i]];
        if(oid == null) {
            // this can be null, e.g. union different variables (check SPARQL recommendation examples UNION)
            bindings[variables[i]] = null;
        } else {
            if(envOut[oid] != null) {
                bindings[variables[i]] = envOut[oid];
            } else {
                var val = this.lexicon.retrieve(oid);
                bindings[variables[i]] = val;
		if(val.token === 'blank') {
		    env.blanks[val.value] = oid;
		}
            }
        }
    }
    return bindings;
};

// Queries execution

QueryEngine.QueryEngine.prototype.execute = function(queryString, callback, defaultDataset, namedDataset){
    //try{
        queryString = Utils.normalizeUnicodeLiterals(queryString);

        var syntaxTree = this.abstractQueryTree.parseQueryString(queryString);
        if(syntaxTree == null) {
            callback(false,"Error parsing query string");
        } else {
            if(syntaxTree.token === 'query' && syntaxTree.kind == 'update')  {
                this.callbacksBackend.startGraphModification();
                var that = this;
                this.executeUpdate(syntaxTree, function(success, result){
		    if(that.lexicon.updateAfterWrite)
			that.lexicon.updateAfterWrite();

                    if(success) {
                        that.callbacksBackend.endGraphModification(function(){
                            callback(success, result);
                        });
                    } else {
                        that.callbacksBackend.cancelGraphModification();
                        callback(success, result);
                    }
                });
            } else if(syntaxTree.token === 'query' && syntaxTree.kind == 'query') {
                this.executeQuery(syntaxTree, callback, defaultDataset, namedDataset);
            }
        }
    //} catch(e) {
    //    if(e.name && e.name==='SyntaxError') {
    //        callback(false, "Syntax error: \nmessage:"+e.message+"\nline "+e.line+", column:"+e.column);
    //    } else {
    //        callback(false, "Query execution error");
    //    }
    //}
};

// Retrieval queries

QueryEngine.QueryEngine.prototype.executeQuery = function(syntaxTree, callback, defaultDataset, namedDataset) {
    var prologue = syntaxTree.prologue;
    var units = syntaxTree.units;
    var that = this;

    // environment for the operation -> base ns, declared ns, etc.
    var queryEnv = {blanks:{}, outCache:{}};
    this.registerNsInEnvironment(prologue, queryEnv);

    // retrieval queries can only have 1 executable unit
    var aqt = that.abstractQueryTree.parseExecutableUnit(units[0]);

    // can be anything else but a select???
    if(aqt.kind === 'select') {
      this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
          if(success) {
              if(typeof(result) === 'object' && result.denorm === true) {
                  callback(true, result['bindings']);
              } else {
                  var result = that.denormalizeBindingsList(result, queryEnv);
                  if(result != null) {                        
                      callback(true, result);
                  } else {
                      callback(false, result);
                  }
              }
          } else {
              callback(false, result);
          }
      });
    } else if(aqt.kind === 'ask') {
        aqt.projection = [{"token": "variable", "kind": "*"}];
        this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
            if(success) {
                if(success) {              
                    if(result.length>0) {
                        callback(true, true);
                    } else {
                        callback(true, false);
                    }
                } else {
                    callback(false, result);
                }
            } else {
                callback(false, result);
            }
        });
    } else if(aqt.kind === 'construct') {
        aqt.projection = [{"token": "variable", "kind": "*"}];
        that = this;
        this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
            if(success) {
                if(success) {              
                    var result = that.denormalizeBindingsList(result, queryEnv);
                    if(result != null) { 
                        var graph = new RDFJSInterface.Graph();
                            
                        // CONSTRUCT WHERE {} case
                        if(aqt.template == null) {
                            aqt.template = {triplesContext: aqt.pattern};
                        }
                        var blankIdCounter = 1;
			var toClear = [];
                        for(var i=0; i<result.length; i++) {
                            var bindings = result[i];
			    for(var j=0; j<toClear.length; j++)
				delete toClear[j].valuetmp;

                            for(var j=0; j<aqt.template.triplesContext.length; j++) {
                                // fresh IDs for blank nodes in the construct template
                                var components = ['subject', 'predicate', 'object'];
                                var tripleTemplate = aqt.template.triplesContext[j];                                    
                                for(var p=0; p<components.length; p++) {
                                    var component = components[p];
                                    if(tripleTemplate[component].token === 'blank') {
					if(tripleTemplate[component].valuetmp && tripleTemplate[component].valuetmp != null) {
					} else {
					    var blankId = "_:b"+blankIdCounter;
					    blankIdCounter++;
					    tripleTemplate[component].valuetmp = blankId;
					    toClear.push(tripleTemplate[component]);
					}
				    }
                                }
                                var s = RDFJSInterface.buildRDFResource(tripleTemplate.subject,bindings,that,queryEnv);
                                var p = RDFJSInterface.buildRDFResource(tripleTemplate.predicate,bindings,that,queryEnv);
                                var o = RDFJSInterface.buildRDFResource(tripleTemplate.object,bindings,that,queryEnv);
                                if(s!=null && p!=null && o!=null) {
                                    var triple = new RDFJSInterface.Triple(s,p,o);
                                    graph.add(triple);
                                    //} else {
                                    //    return callback(false, "Error creating output graph")
                                }
                            }
                        }
                        callback(true,graph);
                    } else {
                        callback(false, result);
                    }
                } else {
                    callback(false, result);
                }
            } else {
                callback(false, result);
            }
        });
    }
};


// Select queries

QueryEngine.QueryEngine.prototype.executeSelect = function(unit, env, defaultDataset, namedDataset, callback) {
    if(unit.kind === "select" || unit.kind === "ask" || unit.kind === "construct" || unit.kind === "modify") {
        var projection = unit.projection;
        var dataset    = unit.dataset;
        var modifier   = unit.modifier;
        var limit      = unit.limit;
        var offset     = unit.offset;
        var order      = unit.order;
        var that = this;

        if(defaultDataset != null || namedDataset != null) {
            dataset['default'] = defaultDataset || [];
            dataset.named   = namedDataset || [];
        } 

        if(dataset['default'] != null && dataset['default'].length === 0 && dataset.named !=null && dataset.named.length === 0) {
            // We add the default graph to the default merged graph
            dataset['default'].push(this.lexicon.defaultGraphUriTerm);
        }

        if (that.normalizeDatasets(dataset['default'].concat(dataset.named), env) != null) {
            var result = that.executeSelectUnit(projection, dataset, unit.pattern, env);
            if(result != null) {
                // detect single group
                if(unit.group!=null && unit.group === "") {
                    var foundUniqueGroup = false;
                    for(var i=0; i<unit.projection.length; i++) {
                        if(unit.projection[i].expression!=null && unit.projection[i].expression.expressionType === 'aggregate') {
                            foundUniqueGroup = true;
                            break;
                        }
                    }
                    if(foundUniqueGroup === true) {
                        unit.group = 'singleGroup';
                    }
                }
                if(unit.group && unit.group != "") {
                    if(that.checkGroupSemantics(unit.group,projection)) {
                        var groupedBindings = that.groupSolution(result, unit.group, dataset, env);
                             
                        var aggregatedBindings = [];
                        var foundError = false;
                            
                        for(var i=0; i<groupedBindings.length; i++) {
                            var resultingBindings = that.aggregateBindings(projection, groupedBindings[i], dataset, env)
                            aggregatedBindings.push(resultingBindings);
                        }
                        callback(true, {'bindings': aggregatedBindings, 'denorm':true});
                    } else {
                        callback(false, "Incompatible Group and Projection variables");
                    }
                } else {
                    var orderedBindings = that.applyOrderBy(order, result, dataset, env)
                    var projectedBindings = that.projectBindings(projection, orderedBindings, dataset);
                    modifiedBindings = that.applyModifier(modifier, projectedBindings);
                    var limitedBindings  = that.applyLimitOffset(offset, limit, modifiedBindings);
                    filteredBindings = that.removeDefaultGraphBindings(limitedBindings, dataset);
                    
                    callback(true, filteredBindings);
                }
                
            } else { // fail selectUnit
                callback(false, result);
            }
        } else { // fail  normalizaing datasets
            callback(false,"Error normalizing datasets");
        }
    } else {
        callback(false,"Cannot execute " + unit.kind + " query as a select query");
    }
};


QueryEngine.QueryEngine.prototype.groupSolution = function(bindings, group, dataset, queryEnv){
    var order = [];
    var filteredBindings = [];
    var initialized = false;
    var that = this;
    if(group === 'singleGroup') {
        return [bindings];
    } else {
        for(var i=0; i<bindings.length; i++) {
            var outFloop = arguments.callee;
            var currentBindings = bindings[i];
            var mustAddBindings = true;

            /**
             * In this loop, we iterate through all the group clauses and tranform the current bindings
             * according to the group by clauses.
             * If it is the first iteration we also save in a different array the order for the 
             * grouped variables that will be used later to build the final groups
             */
            for(var j=0; j<group.length; j++) {
                var floop = arguments.callee;
                var currentOrderClause = group[j];
                var orderVariable = null;

                if(currentOrderClause.token === 'var') {
                    orderVariable = currentOrderClause.value;

                    if(initialized == false) {
                        order.push(orderVariable);
                    }

                } else if(currentOrderClause.token === 'aliased_expression') {
                    orderVariable = currentOrderClause.alias.value;
                    if(initialized == false) {
                        order.push(orderVariable);
                    }

                    if(currentOrderClause.expression.primaryexpression === 'var') {
                        currentBindings[currentOrderClause.alias.value] = currentBindings[currentOrderClause.expression.value.value];
                    } else {
                        var denormBindings = this.copyDenormalizedBindings([currentBindings], queryEnv.outCache);
                        var filterResultEbv = QueryFilters.runFilter(currentOrderClause.expression, denormBindings[0], that, dataset, queryEnv);
                        if(!QueryFilters.isEbvError(filterResultEbv)) {
                            if(filterResultEbv.value != null) {
                                filterResultEbv.value = ""+filterResultEbv.value;
                            }
                            currentBindings[currentOrderClause.alias.value]= filterResultEbv;
                        } else {
                            mustAddBindings = false;
                        }
                    }
                } else {
                    // In this case, we create an additional variable in the binding to hold the group variable value
                    var denormBindings = that.copyDenormalizedBindings([currentBindings], queryEnv.outCache);
                    var filterResultEbv = QueryFilters.runFilter(currentOrderClause, denormBindings[0], that, queryEnv);
                    if(!QueryFilters.isEbvError(filterResultEbv)) {
                        currentBindings["groupCondition"+env._i] = filterResultEbv;
                        orderVariable = "groupCondition"+env._i;
                        if(initialized == false) {
                            order.push(orderVariable);
                        }
                        
                    } else {
                        mustAddBindings = false;
                    }
                         
                }
                
            }
            if(initialized == false) {
                initialized = true;
            } 
            if(mustAddBindings === true) {
                filteredBindings.push(currentBindings);
            }
        }
        /**
         * After processing all the bindings, we build the group using the
         * information stored about the order of the group variables.
         */
        var dups = {};
        var groupMap = {};
        var groupCounter = 0;
        for(var i=0; i<filteredBindings.length; i++) {
            var currentTransformedBinding = filteredBindings[i];
            var key = "";
            for(var j=0; j<order.length; j++) {
                var maybeObject = currentTransformedBinding[order[j]];
                if(typeof(maybeObject) === 'object') {
                    key = key + maybeObject.value;
                } else {
                    key = key + maybeObject;
                }
            }

            if(dups[key] == null) {
                //currentTransformedBinding["__group__"] = groupCounter; 
                groupMap[key] = groupCounter;
                dups[key] = [currentTransformedBinding];
                //groupCounter++
            } else {
                //currentTransformedBinding["__group__"] = dups[key][0]["__group__"]; 
                dups[key].push(currentTransformedBinding);
            }
        }

        // The final result is an array of arrays with all the groups
        var groups = [];
            
        for(var k in dups) {
            groups.push(dups[k]);
        }

        return groups;
    };
};


/**
 * Here, all the constructions of the SPARQL algebra are handled
 */
QueryEngine.QueryEngine.prototype.executeSelectUnit = function(projection, dataset, pattern, env) {
    if(pattern.kind === "BGP") {
        return this.executeAndBGP(projection, dataset, pattern, env);
    } else if(pattern.kind === "UNION") {
        return this.executeUNION(projection, dataset, pattern.value, env);            
    } else if(pattern.kind === "JOIN") {
        return this.executeJOIN(projection, dataset, pattern, env);            
    } else if(pattern.kind === "LEFT_JOIN") {
        return this.executeLEFT_JOIN(projection, dataset, pattern, env);            
    } else if(pattern.kind === "FILTER") {
        // Some components may have the filter inside the unit
        var results = this.executeSelectUnit(projection, dataset, pattern.value, env);
        if(results != null) {
            results = QueryFilters.checkFilters(pattern, results, false, dataset, env, this);
            return results;
        } else {
            return [];
        }
    } else if(pattern.kind === "EMPTY_PATTERN") {
        // as an example of this case  check DAWG test case: algebra/filter-nested-2
        return [];
    } else if(pattern.kind === "ZERO_OR_MORE_PATH" || pattern.kind === 'ONE_OR_MORE_PATH') {
	return this.executeZeroOrMorePath(pattern, dataset, env);
    } else {
        console.log("Cannot execute query pattern " + pattern.kind + ". Not implemented yet.");
        return null;
    }
};

QueryEngine.QueryEngine.prototype.executeZeroOrMorePath = function(pattern, dataset, env) {
    //console.log("EXECUTING ZERO OR MORE PATH");
    //console.log("X");
    //console.log(pattern.x);
    //console.log("Y");
    //console.log(pattern.y);
    var projection = [];
    var starProjection = false;
    if(pattern.x.token === 'var') {
	projection.push({token: 'variable',
			 kind: 'var',
			 value: pattern.x.value});
    }
    if(pattern.y.token === 'var') {
	projection.push({token: 'variable',
			 kind: 'var',
			 value: pattern.y.value});
    }

    if(projection.length === 0) {
	projection.push({"token": "variable", "kind": "*"});
	starProjection = true;
    }

    //console.log("COMPUTED PROJECTION");
    //console.log(projection);


    if(pattern.x.token === 'var' && pattern.y.token === 'var') {
	var bindings = this.executeAndBGP(projection, dataset, pattern.path, env);
	//console.log("BINDINGS "+bindings.length);
	//console.log(bindings);
	var acum = {};
	var results = [];
	var vx, intermediate, nextBinding, vxDenorm;
	var origVXName = pattern.x.value;
	var last = pattern.x;
	var nextPath = pattern.path;
	//console.log("VAR - VAR PATTERN");
	//console.log(nextPath.value);
	for(var i=0; i<bindings.length; i++) {
	    vx = bindings[i][origVXName];
	    if(acum[vx] == null) {
		vxDenorm = this.lexicon.retrieve(vx);
		pattern.x = vxDenorm;
		//console.log("REPLACING");
		//console.log(last);
		//console.log("BY");
		//console.log(vxDenorm);
		//console.log(nextPath.value);
		pattern.path = this.abstractQueryTree.replace(nextPath, last, vxDenorm, env);
		nextPath = Utils.clone(pattern.path);
		intermediate = this.executeZeroOrMorePath(pattern, dataset, env);
		for(var j=0; j<intermediate.length; j++) {
		    nextBinding = intermediate[j];
		    nextBinding[origVXName] = vx;
		    results.push(nextBinding)
		}
		last = vxDenorm;
	    }
	}

	//console.log("RETURNING VAR - VAR");
	return results;
    } else if(pattern.x.token !== 'var' && pattern.y.token === 'var') {
	var finished;
	var acum = {};
	var initial = true;
	var pending = [];
	var bindings,nextBinding;
	var collected = [];
	var origVx = pattern.x;
	var last;

	while(initial == true || pending.length !== 0) {
	    //console.log("-- Iteration");
	    //console.log(pattern.path.value[0]);
	    if(initial === true) {
		bindings = this.executeAndBGP(projection, dataset, pattern.path, env);
		//console.log("SAVING LAST");
		//console.log(pattern.x);
		last = pattern.x;
		initial = false;
	    } else {
		var nextOid = pending.pop();
		//console.log("POPPING:"+nextOid);
		var value = this.lexicon.retrieve(nextOid);
		var path = pattern.path; //Utils.clone(pattern.path);
		//console.log(path.value[0]);
		//console.log("REPLACING");
		//console.log(last);
		//console.log("BY");
		//console.log(value);
		path = this.abstractQueryTree.replace(path, last, value, env);
		//console.log(path.value[0]);
		bindings = this.executeAndBGP(projection, dataset, path, env);
		last = value;
	    }


	    //console.log("BINDINGS!");
	    //console.log(bindings);

	    for(var i=0; i<bindings.length; i++) {
		//console.log(bindings[i][pattern.y.value])
		var value = bindings[i][pattern.y.value];
		//console.log("VALUE:"+value);
		if(acum[value] !== true) {
		    nextBinding = {};
		    nextBinding[pattern.y.value] = value;
		    collected.push(nextBinding);
		    acum[value] = true;
		    pending.push(value);
		}
	    }
	}
	//console.log("RETURNING TERM - VAR");
	//console.log(collected);
	return collected;
    } else {
	throw "Kind of path not supported!";
    }
};

QueryEngine.QueryEngine.prototype.executeUNION = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns[0];
    var setQuery2 = patterns[1];
    var set1 = null;
    var set2 = null;

    if(patterns.length != 2) {
        throw("SPARQL algebra UNION with more than two components");
    }

    var that = this;
    var sets = [];

    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1==null) {
        return null;
    }

    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2==null) {
        return null;
    }

    var result = QueryPlan.unionBindings(set1, set2);
    result = QueryFilters.checkFilters(patterns, result, false, dataset, env, that);
    return result;
};

QueryEngine.QueryEngine.prototype.executeAndBGP = function(projection, dataset, patterns, env) {
    var that = this;
    var result = QueryPlan.executeAndBGPsDPSize(patterns.value, dataset, this, env);
    if(result!=null) {
        return QueryFilters.checkFilters(patterns, result, false, dataset, env, that);
    } else {
        return null;
    }
};

QueryEngine.QueryEngine.prototype.executeLEFT_JOIN = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns.lvalue;
    var setQuery2 = patterns.rvalue;

    var set1 = null;
    var set2 = null;

    var that = this;
    var sets = [];
    var acum, duplicates;

    //console.log("SET QUERY 1");
    //console.log(setQuery1.value);
    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1==null) {
        return null;
    }
     
    //console.log("SET QUERY 2");
    //console.log(setQuery2);
    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2==null) {
        return null;
    }


    //console.log("\nLEFT JOIN SETS:")
    //console.log(set1)
    //console.log(set2)
    var result = QueryPlan.leftOuterJoinBindings(set1, set2);
    //console.log("---")
    //console.log(result);

    var bindings = QueryFilters.checkFilters(patterns, result, true, dataset, env, that);
    //console.log("---")
    //console.log(bindings)
    //console.log("\r\n")
    
    if(set1.length>1 && set2.length>1) {
            var vars = [];
            var vars1 = {};
            for(var p in set1[0]) {
                vars1[p] = true;
            }
            for(p in set2[0]) {
                if(vars1[p] != true) {
                    vars.push(p);
                }
            }
            acum = [];
            duplicates = {};
            for(var i=0; i<bindings.length; i++) {
                if(bindings[i]["__nullify__"] === true) {
                    for(var j=0; j<vars.length; j++) {
                        bindings[i]["bindings"][vars[j]] = null;
                    }                            
                    var idx = [];
                    var idxColl = [];
                    for(var p in bindings[i]["bindings"]) {
                        if(bindings[i]["bindings"][p] != null) {
                            idx.push(p+bindings[i]["bindings"][p]);
                            idx.sort();
                            idxColl.push(idx.join(""));
                        }
                    }
                    // reject duplicates -> (set union)
                    if(duplicates[idx.join("")]==null) {
                        for(j=0; j<idxColl.length; j++) {
                            //console.log(" - "+idxColl[j])
                            duplicates[idxColl[j]] = true;
                        }
                        ////duplicates[idx.join("")]= true
                        acum.push(bindings[i]["bindings"]);
                    }
                } else {
                    acum.push(bindings[i]);
                    var idx = [];
                    var idxColl = [];
                    for(var p in bindings[i]) {
                        idx.push(p+bindings[i][p]);
                        idx.sort();
                        //console.log(idx.join("") + " -> ok");
                        duplicates[idx.join("")] = true;
                    }

                }
            }

        return acum;
    } else {
        return bindings;
    }
};

QueryEngine.QueryEngine.prototype.executeJOIN = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns.lvalue;
    var setQuery2 = patterns.rvalue;
    var set1 = null;
    var set2 = null;

    var that = this;
    var sets = [];

    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1 == null) {
        return null;
    }

    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2 == null) {
        return null;
    }
    
    
    var result = null;
    if(set1.length ===0 || set2.length===0) {
	result = [];
    } else {
	var commonVarsTmp = {};
	var commonVars = [];

	for(var p in set1[0])
	    commonVarsTmp[p] = false;
	for(var p  in set2[0]) {
	    if(commonVarsTmp[p] === false)
		commonVars.push(p);
	}

	if(commonVars.length == 0) {
	    result = QueryPlan.joinBindings(set1,set2);	    
	} else if(this.abstractQueryTree.treeWithUnion(setQuery1) || 
		  this.abstractQueryTree.treeWithUnion(setQuery2)) {
	    result = QueryPlan.joinBindings(set1,set2);	    	    
	} else {
	    result = QueryPlan.joinBindings2(commonVars, set1, set2);
	}
    }
    result = QueryFilters.checkFilters(patterns, result, false, dataset, env, that);
    return result;
};


QueryEngine.QueryEngine.prototype.rangeQuery = function(quad, queryEnv) {
    var that = this;
    //console.log("BEFORE:");
    //console.log("QUAD:");
    //console.log(quad);
    var key = that.normalizeQuad(quad, queryEnv, false);
    if(key != null) {
        //console.log("RANGE QUERY:")
        //console.log(key);
        //console.log(new QuadIndexCommon.Pattern(key));
        var quads = that.backend.range(new QuadIndexCommon.Pattern(key));
        //console.log("retrieved");
        //console.log(quads)
        if(quads == null || quads.length == 0) {
            return [];
        } else {
            return quads;
        }
    } else {
        console.log("ERROR normalizing quad");
        return null;
    }
};

// Update queries

QueryEngine.QueryEngine.prototype.executeUpdate = function(syntaxTree, callback) {
    var prologue = syntaxTree.prologue;
    var units = syntaxTree.units;
    var that = this;

    // environment for the operation -> base ns, declared ns, etc.
    var queryEnv = {blanks:{}, outCache:{}};
    this.registerNsInEnvironment(prologue, queryEnv);
    for(var i=0; i<units.length; i++) {

        var aqt = that.abstractQueryTree.parseExecutableUnit(units[i]);
        if(aqt.kind === 'insertdata') {
            for(var j=0; j<aqt.quads.length; j++) {
                var quad = aqt.quads[j];
                var result = that._executeQuadInsert(quad, queryEnv);
                if(result !== true) {
                    return callback(false, error);
                }
            }
            callback(true);
        } else if(aqt.kind === 'deletedata') {
            for(var j=0; j<aqt.quads.length; j++) {
                var quad = aqt.quads[j];
                this._executeQuadDelete(quad, queryEnv);
            }
            callback(true);
        } else if(aqt.kind === 'modify') {
            this._executeModifyQuery(aqt, queryEnv, callback);
        } else if(aqt.kind === 'create') {
            callback(true);
        } else if(aqt.kind === 'load') {
            var graph = {'uri': Utils.lexicalFormBaseUri(aqt.sourceGraph, queryEnv)};
            if(aqt.destinyGraph != null) {
                graph = {'uri': Utils.lexicalFormBaseUri(aqt.destinyGraph, queryEnv)};
            }
            var that = this;
            this.rdfLoader.load(aqt.sourceGraph.value, graph, function(success, result){
                if(success == false) {
                    console.log("Error loading graph");
                    console.log(result);
                    callback(false, "error batch loading quads");
                } else {
                    var result = that.batchLoad(result);
                    callback(result!=null, result||"error batch loading quads");
                }
            });
        } else if(aqt.kind === 'drop') {
            this._executeClearGraph(aqt.destinyGraph, queryEnv, callback);
        } else if(aqt.kind === 'clear') {
            this._executeClearGraph(aqt.destinyGraph, queryEnv, callback);
        } else {
            throw new Error("not supported execution unit");
        }
    }
};

QueryEngine.QueryEngine.prototype.batchLoad = function(quads, callback) {
    var subject    = null;
    var predicate  = null;
    var object     = null;
    var graph      = null;
    var oldLimit = Utils.stackCounterLimit;
    var counter = 0;
    var success = true;
    var blanks = {};
    var maybeBlankOid, oid, quad, key, originalQuad;

    if(this.eventsOnBatchLoad)
        this.callbacksBackend.startGraphModification();

    for(var i=0; i<quads.length; i++) {
        quad = quads[i];

        // subject
        if(quad.subject['uri'] || quad.subject.token === 'uri') {
            oid = this.lexicon.registerUri(quad.subject.uri || quad.subject.value);
            subject = oid;
        } else if(quad.subject['literal'] || quad.subject.token === 'literal') {
            oid = this.lexicon.registerLiteral(quad.subject.literal || quad.subject.value);
            subject = oid;                    
        } else {
            maybeBlankOid = blanks[quad.subject.blank || quad.subject.value];
            if(maybeBlankOid == null) {
                maybeBlankOid = this.lexicon.registerBlank(quad.subject.blank || quad.subject.value)
                blanks[(quad.subject.blank || quad.subject.value)] = maybeBlankOid;
            }
            subject = maybeBlankOid;
        }

        // predicate
        if(quad.predicate['uri'] || quad.predicate.token === 'uri') {
            oid = this.lexicon.registerUri(quad.predicate.uri || quad.predicate.value);
            predicate = oid;
        } else if(quad.predicate['literal'] || quad.predicate.token === 'literal') {
            oid = this.lexicon.registerLiteral(quad.predicate.literal || quad.predicate.value);
            predicate = oid;                    
        } else {
            maybeBlankOid = blanks[quad.predicate.blank || quad.predicate.value];
            if(maybeBlankOid == null) {
                maybeBlankOid = this.lexicon.registerBlank(quad.predicate.blank || quad.predicate.value)
                blanks[(quad.predicate.blank || quad.predicate.value)] = maybeBlankOid;
            }
            predicate = maybeBlankOid;
        }

        // object
        if(quad.object['uri'] || quad.object.token === 'uri') {
            oid = this.lexicon.registerUri(quad.object.uri || quad.object.value);
            object = oid;
        } else if(quad.object['literal'] || quad.object.token === 'literal') {
            oid = this.lexicon.registerLiteral(quad.object.literal || quad.object.value);
            object = oid;                    
        } else {
            maybeBlankOid = blanks[quad.object.blank || quad.object.value];
            if(maybeBlankOid == null) {
                maybeBlankOid = this.lexicon.registerBlank(quad.object.blank || quad.object.value)
                blanks[(quad.object.blank || quad.object.value)] = maybeBlankOid;
            }
            object = maybeBlankOid;
        }

        // graph
        if(quad.graph['uri'] || quad.graph.token === 'uri') {
            oid = this.lexicon.registerUri(quad.graph.uri || quad.graph.value);
            this.lexicon.registerGraph(oid);
            graph = oid;

        } else if(quad.graph['literal'] || quad.graph.token === 'literal') {
            oid = this.lexicon.registerLiteral(quad.graph.literal || quad.graph.value);
            graph = oid;                    
        } else {
            maybeBlankOid = blanks[quad.graph.blank || quad.graph.value];
            if(maybeBlankOid == null) {
                maybeBlankOid = this.lexicon.registerBlank(quad.graph.blank || quad.graph.value)
                blanks[(quad.graph.blank || quad.graph.value)] = maybeBlankOid;
            }
            graph = maybeBlankOid;
        }



        originalQuad = quad;
        quad = {subject: subject, predicate:predicate, object:object, graph: graph};
        key = new QuadIndexCommon.NodeKey(quad);

        var result = this.backend.search(key);
        if(!result) {
            result = this.backend.index(key)
            if(result == true){
                if(this.eventsOnBatchLoad)
                    this.callbacksBackend.nextGraphModification(Callbacks.added, [originalQuad,quad]);
                counter = counter + 1;
            } else {
                success = false;
                break;
            }
        }

    }

    if(this.lexicon.updateAfterWrite != null)
	this.lexicon.updateAfterWrite();

    var exitFn = function(){
        if(success) {
            if(callback)
                callback(true, counter);
        } else {
            if(callback)
                callback(false, null);
        }
    }

    if(this.eventsOnBatchLoad) {
        this.callbacksBackend.endGraphModification(function(){
            exitFn();
        });
    } else {
        exitFn();
    }
        
    if(success) {
        return counter
    } else {
        return null;
    }
};

// @modified dp
QueryEngine.QueryEngine.prototype.computeCosts = function(quads, env) {
    for(var i=0; i<quads.length; i++) {
        quads[i]['_cost'] = this.quadCost(quads[i],env);
    }

    return quads;
}

// Low level operations for update queries

QueryEngine.QueryEngine.prototype._executeModifyQuery = function(aqt, queryEnv, callback) {
    var that = this;
    var querySuccess = true;
    var error = null;
    var bindings = null;
    var components = ['subject', 'predicate', 'object', 'graph'];

    aqt.insert = aqt.insert == null ? [] : aqt.insert;
    aqt['delete'] = aqt['delete'] == null ? [] : aqt['delete'];

    Utils.seq(
        function(k) {
            // select query

            var defaultGraph = [];
            var namedGraph = [];

            if(aqt['with'] != null) {
                defaultGraph.push(aqt['with']);
            }

            if(aqt['using'] != null) {
                namedGraph = [];
                for(var i=0; i<aqt['using'].length; i++) {
                    var usingGraph = aqt['using'][i];
                    if(usingGraph.kind === 'named') {
                        namedGraph.push(usingGraph.uri);
                    } else {
                        defaultGraph.push(usingGraph.uri);
                    }
                }
            }

            aqt.dataset = {};
            aqt.projection = [{"token": "variable", "kind": "*"}];

            that.executeSelect(aqt, queryEnv, defaultGraph, namedGraph, function(success, result) {                
                if(success) {                    
                    var result = that.denormalizeBindingsList(result, queryEnv);
                    if(result!=null) {
                        bindings = result;
                    } else {
                        querySuccess = false;
                    }
                    return k();
                } else {
                    querySuccess = false;
                    return k();
                }
            });
        },function(k) {
            // delete query

            var defaultGraph = aqt['with'];
            if(querySuccess) {
                var quads = [];
                for(var i=0; i<aqt['delete'].length; i++) {
                    var src = aqt['delete'][i];

                    for(var j=0; j<bindings.length; j++) {
                        var quad = {};
                        var binding = bindings[j];

                        for(var c=0; c<components.length; c++) {
                            var component = components[c];
                            if(component == 'graph' && src[component] == null) {
                                quad['graph'] = defaultGraph;
                            } else if(src[component].token === 'var') {
                                quad[component] = binding[src[component].value];
                            } else {
                                quad[component] = src[component];
                            }
                        }

                        quads.push(quad);
                    }
                }

                var quad;
                for(var j=0; j<quads.length; j++) {
                    quad = quads[j];
                    that._executeQuadDelete(quad, queryEnv);
                }
                k();
            } else {
                k();
            }
        },function(k) {
            // insert query
            var defaultGraph = aqt['with'];

            if(querySuccess) {
                var quads = [];
                for(var i=0; i<aqt.insert.length; i++) {
                    var src = aqt.insert[i];

                    for(var j=0; j<bindings.length; j++) {
                        var quad = {};
                        var binding = bindings[j];

                        for(var c=0; c<components.length; c++) {
                            var component = components[c];
                            if(component == 'graph' && src[component] == null) {
                                quad['graph'] = defaultGraph;
                            } else if(src[component].token === 'var') {
                                quad[component] = binding[src[component].value];
                            } else {
                                quad[component] = src[component];
                            }
                        }

                        quads.push(quad);
                    }
                }

                for(var i=0; i<quads.length; i++) {
                    var quad = quads[i];
                    that._executeQuadInsert(quad, queryEnv);
                }

                k();
            } else {
                k();
            }
        }
    )(function(){
        callback(querySuccess);
    });
};

QueryEngine.QueryEngine.prototype._executeQuadInsert = function(quad, queryEnv) {
    var that = this;
    var normalized = this.normalizeQuad(quad, queryEnv, true);
    if(normalized != null) {
        var key = new QuadIndexCommon.NodeKey(normalized);
        var result = that.backend.search(key);
        if(result){
            return(result);
        } else {
            var result = that.backend.index(key);
            if(result == true){
                that.callbacksBackend.nextGraphModification(Callbacks.added, [quad, normalized]);
                return true;
            } else {
                console.log("ERROR inserting quad");
                return false;
            }
        }
    } else {
        console.log("ERROR normalizing quad");
        return false;
    }
};

QueryEngine.QueryEngine.prototype._executeQuadDelete = function(quad, queryEnv) {
    var that = this;
    var normalized = this.normalizeQuad(quad, queryEnv, false);
    if(normalized != null) {
        var key = new QuadIndexCommon.NodeKey(normalized);
        that.backend['delete'](key);
        var result = that.lexicon.unregister(quad, key);
        if(result == true){
            that.callbacksBackend.nextGraphModification(Callbacks['deleted'], [quad, normalized]);
            return true;
        } else {
            console.log("ERROR unregistering quad");
            return false;
        }
    } else {
        console.log("ERROR normalizing quad");
        return false;
    }
};

QueryEngine.QueryEngine.prototype._executeClearGraph = function(destinyGraph, queryEnv, callback) {
    if(destinyGraph === 'default') {
        this.execute("DELETE { ?s ?p ?o } WHERE { ?s ?p ?o }", callback);
    } else if(destinyGraph === 'named') {
        var that = this;
        var graphs = this.lexicon.registeredGraphs(true);
        if(graphs!=null) {
            var foundErrorDeleting = false;
            Utils.repeat(0, graphs.length,function(k,env) {
                var graph = graphs[env._i];
                var floop = arguments.callee;
                if(!foundErrorDeleting) {
                    that.execute("DELETE { GRAPH <"+graph+"> { ?s ?p ?o } } WHERE { GRAPH <"+graph+"> { ?s ?p ?o } }", function(success, results){
                        foundErrorDeleting = !success;
                        k(floop, env);
                    });
                } else {
                    k(floop, env);
                }
            }, function(env) {
                callback(!foundErrorDeleting);
            });
        } else {
            callback(false, "Error deleting named graphs");
        }
    } else if(destinyGraph === 'all') {
        var that = this;
        this.execute("CLEAR DEFAULT", function(success, result) {
            if(success) {
                that.execute("CLEAR NAMED", callback);
            } else {
                callback(false,result);
            }
        });
    } else {
        // destinyGraph is an URI
        if(destinyGraph.token == 'uri') {
            var graphUri = Utils.lexicalFormBaseUri(destinyGraph,queryEnv);
            if(graphUri != null) {
                this.execute("DELETE { GRAPH <"+graphUri+"> { ?s ?p ?o } } WHERE { GRAPH <"+graphUri+"> { ?s ?p ?o } }", callback);
            } else {
                callback(false, "wrong graph URI");
            }
        } else {
            callback(false, "wrong graph URI");
        }
    }
};

QueryEngine.QueryEngine.prototype.checkGroupSemantics = function(groupVars, projectionVars) {
    if(groupVars === 'singleGroup') {
        return true;        
    }

    var projection = {};

    for(var i=0; i<groupVars.length; i++) {
        var groupVar = groupVars[i];
        if(groupVar.token === 'var') {
            projection[groupVar.value] = true;
        } else if(groupVar.token === 'aliased_expression') {
            projection[groupVar.alias.value] = true;
        }
    }

    for(i=0; i<projectionVars.length; i++) {
        var projectionVar = projectionVars[i];
        if(projectionVar.kind === 'var') {
            if(projection[projectionVar.value.value] == null) {
                return false;
            }
        } else if(projectionVar.kind === 'aliased' && 
                  projectionVar.expression &&
                  projectionVar.expression.primaryexpression === 'var') {
            if(projection[projectionVar.expression.value.value] == null) {
                return false;
            }
        }
    }

    return true;
};

QueryEngine.QueryEngine.prototype.registerDefaultNamespace = function(ns, prefix) {
    this.defaultPrefixes[ns] = prefix;
};

// end of ./src/js-query-engine/src/query_engine.js 
// exports
var Callbacks = {};

//imports


Callbacks.ANYTHING = {'token': 'var', 
                      'value': '_'};

Callbacks.added = 'added';
Callbacks.deleted = 'deleted';
Callbacks.eventsFlushed = 'eventsFlushed';

Callbacks.CallbacksBackend = function() {
    this.aqt = new AbstractQueryTree.AbstractQueryTree();
    this.engine = arguments[0];
    this.indexMap = {};
    this.observersMap = {};
    this.queriesIndexMap = {};
    this.emptyNotificationsMap = {};
    this.queriesList = [];
    this.pendingQueries = [];
    this.matchedQueries = [];
    this.updateInProgress = null;
    this.indices = ['SPOG', 'GP', 'OGS', 'POG', 'GSP', 'OS'];
    this.componentOrders = {
        SPOG: ['subject', 'predicate', 'object', 'graph'],
        GP: ['graph', 'predicate', 'subject', 'object'],
        OGS: ['object', 'graph', 'subject', 'predicate'],
        POG: ['predicate', 'object', 'graph', 'subject'],
        GSP: ['graph', 'subject', 'predicate', 'object'],
        OS: ['object', 'subject', 'predicate', 'graph']
    };

    this.callbackCounter = 0;
    this.callbacksMap = {};
    this.callbacksInverseMap = {};

    this.queryCounter = 0;
    this.queriesMap = {};
    this.queriesCallbacksMap = {};
    this.queriesInverseMap = {};

    for(var i=0; i<this.indices.length; i++) {
        var indexKey = this.indices[i];
        this.indexMap[indexKey] = {};
        this.queriesIndexMap[indexKey] = {};
    };
};

Callbacks.CallbacksBackend.prototype.startGraphModification = function() {
    this.pendingQueries = [].concat(this.queriesList);
    this.matchedQueries = [];

    var added = Callbacks['added'];
    var deleted = Callbacks['deleted'];
    if(this.updateInProgress == null) {
        this.updateInProgress = {added: [], deleted: []};
    }
};

Callbacks.CallbacksBackend.prototype.nextGraphModification = function(event, quad) {
    this.updateInProgress[event].push(quad);
};

Callbacks.CallbacksBackend.prototype.endGraphModification = function(callback) {
    var that = this;
    if(this.updateInProgress != null) {
        var tmp = that.updateInProgress;
        that.updateInProgress = null;
        this.sendNotification(Callbacks['deleted'], tmp[Callbacks['deleted']],function(){
            that.sendNotification(Callbacks['added'], tmp[Callbacks['added']], function(){
                that.sendEmptyNotification(Callbacks['eventsFlushed'], null, function(){
                    that.dispatchQueries(function(){
                        callback(true);
                    });
                });
            });
        });
    } else {
        callback(true);
    }
};

Callbacks.CallbacksBackend.prototype.cancelGraphModification = function() {
    this.updateInProgress = null;
};

Callbacks.CallbacksBackend.prototype.sendNotification = function(event, quadsPairs, doneCallback) {
    var notificationsMap = {};
    for(var i=0; i<quadsPairs.length; i++) {
        var quadPair = quadsPairs[i];
        for(var indexKey in this.indexMap) {
            var index = this.indexMap[indexKey];
            var order = this.componentOrders[indexKey];
            this._searchCallbacksInIndex(index, order, event, quadPair, notificationsMap);
            if(this.pendingQueries.length != 0) {
                index = this.queriesIndexMap[indexKey];
                this._searchQueriesInIndex(index, order, quadPair);
            }
        }
    }

    this.dispatchNotifications(notificationsMap);

    if(doneCallback != null)
        doneCallback(true);
};

Callbacks.CallbacksBackend.prototype.sendEmptyNotification = function(event, value, doneCallback) {
    var callbacks = this.emptyNotificationsMap[event] || [];
    for(var i=0; i<callbacks.length; i++) {
        callbacks[i](event, value);
    }
    doneCallback();
};

Callbacks.CallbacksBackend.prototype.dispatchNotifications = function(notificationsMap) {
    for(var callbackId in notificationsMap) {
        var callback = this.callbacksMap[callbackId];
        var deleted = notificationsMap[callbackId][Callbacks['deleted']];
        if(deleted!=null) {
            callback(Callbacks['deleted'],deleted);
        }
        for(var event in notificationsMap[callbackId]) {
            if(event!=Callbacks['deleted']) {
                callback(event, notificationsMap[callbackId][event]);
            }
        }
    }
};

Callbacks.CallbacksBackend.prototype._searchCallbacksInIndex = function(index, order, event, quadPair, notificationsMap) {
    var quadPairNomalized = quadPair[1];
    var quadPair = quadPair[0];

    for(var i=0; i<(order.length+1); i++) {
        var matched = index['_'] || [];
        
        var filteredIds = [];
        for(var j=0; j<matched.length; j++) {
            var callbackId = matched[j];
            if(this.callbacksMap[callbackId] != null) {
                notificationsMap[callbackId] = notificationsMap[callbackId] || {};
                notificationsMap[callbackId][event] = notificationsMap[callbackId][event] || [];
                notificationsMap[callbackId][event].push(quadPair);
                filteredIds.push(callbackId);
            }
        }
        index['_'] = filteredIds;
        var component = order[i];
        if(index[''+quadPairNomalized[component]] != null) {
            index = index[''+quadPairNomalized[component]];
        } else {
            break;
        }
    }
};

Callbacks.CallbacksBackend.prototype.subscribeEmpty = function(event, callback) {
    var callbacks = this.emptyNotificationsMap[event] || [];
    callbacks.push(callback);
    this.emptyNotificationsMap[event] = callbacks;
};

Callbacks.CallbacksBackend.prototype.unsubscribeEmpty = function(event, callback) {
    var callbacks = this.emptyNotificationsMap[event];
    if(callbacks != null) {
        callbacks = Utils.remove(callbacks, callback);
    }
    this.emptyNotificationsMap[event] = callbacks;
};

Callbacks.CallbacksBackend.prototype.subscribe = function(s,p,o,g,callback, doneCallback) {
    var quad = this._tokenizeComponents(s,p,o,g);
    var queryEnv = {blanks:{}, outCache:{}};
    this.engine.registerNsInEnvironment(null, queryEnv);
    var that = this;
    var normalized = this.engine.normalizeQuad(quad, queryEnv, true);
    var pattern =  new QuadIndexCommon.Pattern(normalized);        
    var indexKey = that._indexForPattern(pattern);
    var indexOrder = that.componentOrders[indexKey];
    var index = that.indexMap[indexKey];
    for(var i=0; i<indexOrder.length; i++) {
        var component = indexOrder[i];
        var quadValue = normalized[component];
        if(quadValue === '_') {
            if(index['_'] == null) {
                index['_'] = [];
            }
            that.callbackCounter++;
            index['_'].push(that.callbackCounter);
            that.callbacksMap[that.callbackCounter] = callback;
            that.callbacksInverseMap[callback] = that.callbackCounter;
            break;
        } else {
            if(i===indexOrder.length-1) {
                index[quadValue] = index[quadValue] || {'_':[]};
                that.callbackCounter++;
                index[quadValue]['_'].push(that.callbackCounter);
                that.callbacksMap[that.callbackCounter] = callback;
                that.callbacksInverseMap[callback] = that.callbackCounter;
            } else {
                index[quadValue] = index[quadValue] || {};
                index = index[quadValue];
            }
        }
    }
    if(doneCallback != null)
        doneCallback(true);
};

Callbacks.CallbacksBackend.prototype.unsubscribe = function(callback) {
    var id = this.callbacksInverseMap[callback];
    if(id != null) {
        delete this.callbacksInverseMap[callback];
        delete this.callbacksMap[id];
    }
};

Callbacks.CallbacksBackend.prototype._tokenizeComponents = function(s, p, o, g) {
    var pattern = {};

    if(s == null) {
        pattern['subject'] = Callbacks.ANYTHING;
    } else {
        if(s.indexOf("_:") == 0) {
            pattern['subject'] = {'token': 'blank', 'value':s};
        } else {
            pattern['subject'] = {'token': 'uri', 'value':s};
        }
    }

    if(p == null) {
        pattern['predicate'] = Callbacks.ANYTHING;
    } else {
        pattern['predicate'] = {'token': 'uri', 'value':p};
    }

    if(o == null) {
        pattern['object'] = Callbacks.ANYTHING;
    } else {
        pattern['object'] = {'token': 'uri', 'value':o};
    }

    if(g == null) {
        pattern['graph'] = Callbacks.ANYTHING;
    } else {
        pattern['graph'] = {'token': 'uri', 'value':g};
    }

    return pattern;
};

Callbacks.CallbacksBackend.prototype._indexForPattern = function(pattern) {
    var indexKey = pattern.indexKey;
    var matchingIndices = this.indices;

    for(var i=0; i<matchingIndices.length; i++) {
        var index = matchingIndices[i];
        var indexComponents = this.componentOrders[index];
        for(var j=0; j<indexComponents.length; j++) {
            if(Utils.include(indexKey, indexComponents[j])===false) {
                break;
            }
            if(j==indexKey.length-1) {
                return index;
            }
        }
    }
    
    return 'SPOG' // If no other match, we return the most generic index
};

Callbacks.CallbacksBackend.prototype.observeNode = function() {
    var uri,graphUri,callback,doneCallback;

    if(arguments.length === 4) {
        uri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2];
        doneCallback = arguments[3];
    } else {
        uri = arguments[0];
        graphUri = this.engine.lexicon.defaultGraphUri;
        callback = arguments[1];
        doneCallback = arguments[2];
    }
    var query = "CONSTRUCT { <" + uri + "> ?p ?o } WHERE { GRAPH <" + graphUri + "> { <" + uri + "> ?p ?o } }";
    var that = this;
    var queryEnv = {blanks:{}, outCache:{}};
    this.engine.registerNsInEnvironment(null, queryEnv);
    var bindings = [];
    this.engine.execute(query,  function(success, graph){
        if(success) {
            var node = graph;
            var mustFlush = false;
            var observer = function(event, triples){
                if(event === 'eventsFlushed' && mustFlush ) {
                    mustFlush = false;
                    callback(node);
                } else if(event !== 'eventsFlushed') {
                    mustFlush = true;
                    for(var i = 0; i<triples.length; i++) {
                        var triple = triples[i];
                        var s = RDFJSInterface.buildRDFResource(triple.subject,bindings,that.engine,queryEnv);
                        var p = RDFJSInterface.buildRDFResource(triple.predicate,bindings,that.engine,queryEnv);
                        var o = RDFJSInterface.buildRDFResource(triple.object,bindings,that.engine,queryEnv);
                        if(s!=null && p!=null && o!=null) {
                            triple = new RDFJSInterface.Triple(s,p,o);
                            if(event === Callbacks['added']) {
                                node.add(triple);
                            } else if(event === Callbacks['deleted']) {
                                node.remove(triple);
                            }
                        }
                    }
                }
            };
            that.observersMap[callback] = observer;
            that.subscribeEmpty(Callbacks['eventsFlushed'], observer);
            that.subscribe(uri,null,null,null,observer,function(){
                callback(node);
                if(doneCallback)
                    doneCallback(true)
            });
        } else {
            if(doneCallback)
                doneCallback(false);
        }
    });
};

Callbacks.CallbacksBackend.prototype.stopObservingNode = function(callback) {
    var observer = this.observersMap[callback];
    if(observer) {
        this.unsubscribe(observer);
        this.unsubscribeEmpty(Callbacks['eventsFlushed'],observer);
        return true;
    } else {
        return false;
    }
};

// Queries

Callbacks.CallbacksBackend.prototype.observeQuery = function(query, callback, endCallback) {
    var queryParsed = this.aqt.parseQueryString(query);
    var parsedTree = this.aqt.parseSelect(queryParsed.units[0]);
    var patterns = this.aqt.collectBasicTriples(parsedTree);
    var that = this;
    var queryEnv = {blanks:{}, outCache:{}};
    this.engine.registerNsInEnvironment(null, queryEnv);
    var floop, pattern, quad, indexKey, indexOrder, index;

    var counter = this.queryCounter;
    this.queryCounter++;
    this.queriesMap[counter] = query;
    this.queriesInverseMap[query] = counter;
    this.queriesList.push(counter);
    this.queriesCallbacksMap[counter] = callback;

    for(var i=0; i<patterns.length; i++) {
        quad = patterns[i];
        if(quad.graph == null) {
            quad.graph = that.engine.lexicon.defaultGraphUriTerm;
        }

        var normalized = that.engine.normalizeQuad(quad, queryEnv, true);
        pattern =  new QuadIndexCommon.Pattern(normalized);        
        indexKey = that._indexForPattern(pattern);
        indexOrder = that.componentOrders[indexKey];
        index = that.queriesIndexMap[indexKey];

        for(var j=0; j<indexOrder.length; j++) {
            var component = indexOrder[j];
            var quadValue = normalized[component];
            if(typeof(quadValue) === 'string') {
                if(index['_'] == null) {
                    index['_'] = [];
                }
                index['_'].push(counter);
                break;
            } else {
                if(j===indexOrder.length-1) {
                    index[quadValue] = index[quadValue] || {'_':[]};
                    index[quadValue]['_'].push(counter);
                } else {
                    index[quadValue] = index[quadValue] || {};
                    index = index[quadValue];
                }
            }
        }

    }

    this.engine.execute(query, function(success, results){
        if(success){
            callback(results);
        } else {
            console.log("ERROR in query callback "+results);
        }                                             
    });

    if(endCallback != null)
        endCallback();
};

Callbacks.CallbacksBackend.prototype.stopObservingQuery = function(query) {
    var id = this.queriesInverseMap[query];
    if(id != null) {
        delete this.queriesInverseMap[query];
        delete this.queriesMap[id];
        this.queriesList = Utils.remove(this.queriesList, id);
    }
};

Callbacks.CallbacksBackend.prototype._searchQueriesInIndex = function(index, order, quadPair) {
    var quadPairNomalized = quadPair[1];
    var quadPair = quadPair[0];

    for(var i=0; i<(order.length+1); i++) {
        var matched = index['_'] || [];
        
        var filteredIds = [];
        for(var j=0; j<matched.length; j++) {
            var queryId = matched[j];
            if(Utils.include(this.pendingQueries,queryId)) {
                Utils.remove(this.pendingQueries,queryId);
                this.matchedQueries.push(queryId);
            }
            // removing IDs for queries no longer being observed
            if(this.queriesMap[queryId] != null) {
                filteredIds.push(queryId);
            }
        }
        index['_'] = filteredIds;

        var component = order[i];
        if(index[''+quadPairNomalized[component]] != null) {
            index = index[''+quadPairNomalized[component]];
        } else {
            break;
        }
    }
};

Callbacks.CallbacksBackend.prototype.dispatchQueries = function(callback) {
    var that = this;
    var floop, query, queryId, queryCallback;
    Utils.repeat(0, this.matchedQueries.length,
                 function(k, env){
                     floop = arguments.callee;
                     queryId = that.matchedQueries[env._i];
                     query = that.queriesMap[queryId];
                     queryCallback = that.queriesCallbacksMap[queryId];
                     Utils.recur(function(){
                         that.engine.execute(query, 
                                             function(success, results){
                                                 if(success) {
                                                     queryCallback(results);
                                                 } else {
                                                     console.log("ERROR executing query callback "+results);
                                                 }
                                                 k(floop,env);
                                             });
                     });
                 },
                 function(env) {
                     callback();
                 });
};

// end of ./src/js-query-engine/src/callbacks.js 
//imports

// exports
var RDFStoreClient = {};


try {
    if(typeof(Worker)=='undefined') {
        Worker = null;
    };
} catch(e) {
    Worker = null;
}

// Checks if this is a webworker
if(!!Worker) {

    RDFStoreClient.RDFStoreClient = function(path_to_store_script, args, cb) {
        console.log("trying to load "+path_to_store_script);
        if(Worker.Worker) {
            this.connection = new Worker.Worker(path_to_store_script);
        } else {
            this.connection = new Worker(path_to_store_script);
        }
        this.callbacksCounter = 1;
        var that = this;
        var creationCallback = function(success, result) {
            if(success === true) {
                cb(true, that);
            } else {
                cb(false, result);
            }
        };

        this.rdf = RDFJSInterface.rdf;

        console.log("The worker");
        console.log(this.connection);
        var that = this;
        this.connection.onmessage = function(event){
            that.receive(event);
        };
        this.observingCallbacks = {};
        this.callbacks = {'0': {'cb':creationCallback, 'fn':'create'}};
        this.connection.postMessage({'fn':'create', 'args':args, 'callback':'0'});
    };

    RDFStoreClient.RDFStoreClient.prototype.receive = function(packet) {
        event = packet.data || packet;
        //console.log("RECEIVED SOMETHING");
        if(event.fn === 'workerRequest:NetworkTransport:load') {
            var that = this;
            var workerCallback = event['callback'];
            var args = event['arguments'].concat(function(success, results){
                that.connection.postMessage({'fn':'workerRequestResponse', 'results':[success, results], 'callback':workerCallback});
            });
            NetworkTransport.load.apply(NetworkTransport,args);
        } else {
            var callbackData = this.callbacks[event.callback];
            //console.log(packet);
            //console.log(callbackData);
            if(callbackData) {
                if(callbackData.fn === 'create' || callbackData.fn === 'execute' || callbackData.fn === 'insert' || callbackData.fn == 'graph' ||
                   callbackData.fn === 'node' || callbackData.fn === 'insert' || callbackData.fn === 'delete' || callbackData.fn === 'clear' ||
                   callbackData.fn === 'load' || callbackData.fn === 'startObservingQueryEndCb' || callbackData.fn === 'registeredGraphs') {
                    delete this.callbacks[event.callback];
                    callbackData.cb(event.success, event.result);
                } else if(callbackData.fn === 'startObservingQuery') {
                    callbackData.cb(event.result);                
                } else if(callbackData.fn === 'startObservingNode') {
                    callbackData.cb(event.result);
                } else if(callbackData.fn === 'subscribe') {
                    callbackData.cb(event.event, event.result);
                }
            }
        }
    };

    RDFStoreClient.RDFStoreClient.prototype.registerCallback = function(fn, callback) {
        var id = ''+this.callbacksCounter;
        this.callbacks[id] = {'fn':fn, 'cb':callback};
        this.callbacksCounter++;

        return id;
    };

    RDFStoreClient.RDFStoreClient.prototype.execute = function() {
        if(arguments.length === 3) {
            this.executeWithEnvironment(arguments[0],
                                        arguments[1],
                                        arguments[2]);
        } else if(arguments.length === 4) {
            this.executeWithEnvironment(arguments[0],
                                        arguments[1],
                                        arguments[2],
                                        arguments[3]);
        } else {

            var queryString,callback;

            if(arguments.length === 1) {
                queryString = arguments[0];
                callback = function(){};

            } else if(arguments.length === 2) {
                queryString = arguments[0];
                callback = arguments [1];
            }

            var id = this.registerCallback('execute',callback);

            this.connection.postMessage({'fn':'execute', 'args':[queryString], 'callback':id});
        }

    };

    RDFStoreClient.RDFStoreClient.prototype.insert = function() {
        var graph;
        var triples;
        var callback;
        if(arguments.length === 1) {
            triples = arguments[0];
            this.connection.postMessage({'fn':'insert', 'args':[triples]})
        } else if(arguments.length === 2) {
            triples = arguments[0];
            callback= arguments[1] || function(){};
            var id = this.registerCallback('insert', callback);
            this.connection.postMessage({'fn':'insert', 'args':[triples], 'callback':id})
        } else if(arguments.length === 3) {
            triples = arguments[0];
            graph = arguments[1];
            callback= arguments[2] || function(){};
            var id = this.registerCallback('insert', callback);
            this.connection.postMessage({'fn':'insert', 'args':[triples,graph], 'callback':id})
        } else {
            throw("The triples to insert, an optional graph and callback must be provided");
        }
    };

    RDFStoreClient.RDFStoreClient.prototype.graph = function() {
        var graphUri = null;
        var callback = null;
        if(arguments.length === 1) {
            callback = arguments[0] || function(){};
        } else if(arguments.length === 2) {
            callback = arguments[1] || function(){};
            graphUri = arguments[0];
        } else {
            throw("An optional graph URI and a callback function must be provided");
        }

        var that = this;
        var wrapperCallback = function(success, toWrap) {
            //console.log("CALLBACK!\n\n");
            if(success) {
                var triple;
                for(var i=0; i<toWrap.triples.length; i++) {
                    triple = toWrap.triples[i];
                    toWrap.triples[i] = new RDFJSInterface.Triple(that.adaptJSInterface(triple.subject),
                                                                  that.adaptJSInterface(triple.predicate),
                                                                  that.adaptJSInterface(triple.object));
                }                
                callback(success, that.rdf.createGraph(toWrap.triples));
            } else {
                callback(success,toWrap);
            }
        };
        var id = this.registerCallback('insert', wrapperCallback);
        if(graphUri == null) {
            this.connection.postMessage({'fn':'graph', 'args':[], 'callback':id})
        } else {
            this.connection.postMessage({'fn':'graph', 'args':[graphUri], 'callback':id})
        }
    };

    RDFStoreClient.RDFStoreClient.prototype.node = function() {
        var graphUri = null;
        var callback = null;
        var nodeUri  = null;
        if(arguments.length === 2) {
            nodeUri = arguments[0];
            callback = arguments[1] || function(){};
        } else if(arguments.length === 3) {
            nodeUri = arguments[0];
            graphUri = arguments[1];
            callback = arguments[2] || function(){};
        } else {
            throw("An optional graph URI and a callback function must be provided");
        }

        var that = this;
        var wrapperCallback = function(success, toWrap) {
            //console.log("CALLBACK!\n\n");
            if(success) {
                var triple;
                for(var i=0; i<toWrap.triples.length; i++) {
                    triple = toWrap.triples[i];
                    toWrap.triples[i] = new RDFJSInterface.Triple(that.adaptJSInterface(triple.subject),
                                                                  that.adaptJSInterface(triple.predicate),
                                                                  that.adaptJSInterface(triple.object));
                }                
                callback(success, that.rdf.createGraph(toWrap.triples));
            } else {
                callback(success,toWrap);
            }
        };
        var id = this.registerCallback('insert', wrapperCallback);
        if(graphUri == null) {
            this.connection.postMessage({'fn':'node', 'args':[nodeUri], 'callback':id})
        } else {
            this.connection.postMessage({'fn':'node', 'args':[nodeUri, graphUri], 'callback':id})
        }

    };

    RDFStoreClient.RDFStoreClient.prototype.setPrefix = function(prefix, uri) {
        this.rdf.setPrefix(prefix, uri)
        this.connection.postMessage({'fn':'rdf/setPrefix', 'args':[prefix, uri], 'callback':null})
    };

    RDFStoreClient.RDFStoreClient.prototype.setDefaultPrefix = function(uri) {
        this.rdf.setDefaultPrefix(uri)
        this.connection.postMessage({'fn':'rdf/setDefaultPrefix', 'args':[uri], 'callback':null})
    };


    RDFStoreClient.RDFStoreClient.prototype['delete'] = function() {
        var graph;
        var triples;
        var callback;
        if(arguments.length === 1) {
            triples = arguments[0];
            this.connection.postMessage({'fn':'delete', 'args':[triples]})
        } else if(arguments.length === 2) {
            triples = arguments[0];
            callback= arguments[1] || function(){};
            var id = this.registerCallback('delete', callback);
            this.connection.postMessage({'fn':'delete', 'args':[triples], 'callback':id})
        } else if(arguments.length === 3) {
            triples = arguments[0];
            graph = arguments[1];
            callback= arguments[2] || function(){};
            var id = this.registerCallback('delete', callback);
            this.connection.postMessage({'fn':'delete', 'args':[triples,graph], 'callback':id})
        } else {
            throw("The triples to delete, an optional graph and callback must be provided");
        }
    };


    RDFStoreClient.RDFStoreClient.prototype.clear = function() {
        var graph;
        var callback;
     
        if(arguments.length === 1) {
            callback= arguments[0] || function(){};
            var id = this.registerCallback('clear', callback);
            this.connection.postMessage({'fn':'clear', 'args':[], 'callback':id})
        } else if(arguments.length === 2) {
            graph = arguments[0];
            callback= arguments[1] || function(){};
            var id = this.registerCallback('clear', callback);
            this.connection.postMessage({'fn':'clear', 'args':[graph], 'callback':id})
        } else {
            throw("The optional graph and a callback must be provided");
        }
    };


    /**
     * Boolean value determining if loading RDF must produce
     * triple add events and fire callbacks.
     * Default is false.
     */
    RDFStoreClient.RDFStoreClient.prototype.setBatchLoadEvents = function(mustFireEvents){
        this.connection.postMessage({'fn':'setBatchLoadEvents', 'args':[mustFireEvents]});
    };

    /**
     * Registers a namespace prefix that will be automatically declared
     * in all the queries
     */
    RDFStoreClient.RDFStoreClient.prototype.registerDefaultNamespace = function(ns, prefix) {
        this.connection.postMessage({'fn':'registerDefaultNamespace', 'args':[ns,prefix]});
    };
     
    /**
     * Registers the default namespaces declared in the RDF JS Interfaces
     * specification in the default Profile.
     */
    RDFStoreClient.RDFStoreClient.prototype.registerDefaultProfileNamespaces = function() {
        this.connection.postMessage({'fn':'registerDefaultProfileNamespaces', 'args':[]});
    };

    RDFStoreClient.RDFStoreClient.prototype.load = function(){
        var mediaType;
        var data;
        var graph;
        var callback;
     
        if(arguments.length === 3) {
            mediaType = arguments[0];
            data = arguments[1];
            callback= arguments[2] || function(){};
            var id = this.registerCallback('load', callback);
            this.connection.postMessage({'fn':'load', 'args':[mediaType, data], 'callback':id})
        } else if(arguments.length === 4) {
            mediaType = arguments[0];
            data = arguments[1];
            graph = arguments[2];
            callback= arguments[3] || function(){};
            var id = this.registerCallback('load', callback);
            this.connection.postMessage({'fn':'load', 'args':[mediaType, data, graph], 'callback':id})
        } else if(arguments.length === 2) {
            throw("The mediaType of the parser, the data a callback and an optional graph must be provided");
        }
     
    };

    RDFStoreClient.RDFStoreClient.prototype.startObservingQuery = function() {
        var query = arguments[0];
        var callback = arguments[1];
        var endCallback = arguments[2];
        if(endCallback!=null) {
            var id1 = this.registerCallback('startObservingQuery', callback);
            this.observingCallbacks[query] = id1;
            var id2 = this.registerCallback('startObservingQueryEndCb', endCallback);
            this.connection.postMessage({'fn':'startObservingQuery', 'args':[query], 'callback':[id1,id2]})
        } else {
            var id1 = this.registerCallback('startObservingQuery', callback);
            this.observingCallbacks[query] = id1;
            this.connection.postMessage({'fn':'startObservingQuery', 'args':[query], 'callback':[id1]})
        }
    };
     
    RDFStoreClient.RDFStoreClient.prototype.stopObservingQuery = function(query) {
        var id = this.observingCallbacks[query];
        delete this.observingCallbacks[query];
        delete this.callbacks[id];
        this.connection.postMessage({'fn':'stopObservingQuery', 'args':[query], 'callback':[]})
    };

    RDFStoreClient.RDFStoreClient.prototype.startObservingNode = function() {
        var uri, graphUri, callback;

        if(arguments.length === 2) {
            uri = arguments[0];
            callback = arguments[1];

            var that = this;
            var wrapperCallback = function(toWrap) {
                //console.log("CALLBACK!\n\n");
                var triple;
                for(var i=0; i<toWrap.triples.length; i++) {
                    triple = toWrap.triples[i];
                    toWrap.triples[i] = new RDFJSInterface.Triple(that.adaptJSInterface(triple.subject),
                                                                  that.adaptJSInterface(triple.predicate),
                                                                  that.adaptJSInterface(triple.object));
                }                
                callback(that.rdf.createGraph(toWrap.triples));
            };

            var id = this.registerCallback('startObservingNode', wrapperCallback);
            this.observingCallbacks[callback] = id;

            this.connection.postMessage({'fn':'startObservingNode', 'args':[uri], 'callback':id})
        } else if(arguments.length === 3) {
            uri = arguments[0];
            graphUri = arguments[1];
            callback = arguments[2];

            var that = this;
            var wrapperCallback = function(toWrap) {
                //console.log("CALLBACK!\n\n");
                var triple;
                for(var i=0; i<toWrap.triples.length; i++) {
                    triple = toWrap.triples[i];
                    toWrap.triples[i] = new RDFJSInterface.Triple(that.adaptJSInterface(triple.subject),
                                                                  that.adaptJSInterface(triple.predicate),
                                                                  that.adaptJSInterface(triple.object));
                }                
                callback(that.rdf.createGraph(toWrap.triples));
            };

            var id = this.registerCallback('startObservingNode', wrapperCallback);
            this.observingCallbacks[callback] = id;

            this.connection.postMessage({'fn':'startObservingNode', 'args':[uri,graphUri], 'callback':id})
        }
    };
     
    RDFStoreClient.RDFStoreClient.prototype.stopObservingNode = function(callback) {
        var id = this.observingCallbacks[callback];
        delete this.observingCallbacks[callback];
        delete this.callbacks[id];
        //console.log("STOP OBSERVING "+id);
        this.connection.postMessage({'fn':'stopObservingNode', 'args':[id], 'callback':[]})
    };

    RDFStoreClient.RDFStoreClient.prototype.subscribe = function(s, p, o, g, callback) {
        var that = this;
        var wrapperCallback = function(event,triples) {
            //console.log("CALLBACK!\n\n");
            var triple;
            for(var i=0; i<triples.length; i++) {
                triple = triples[i];
                triples[i] = new RDFJSInterface.Triple(that.adaptJSInterface(triple.subject),
                                                       that.adaptJSInterface(triple.predicate),
                                                       that.adaptJSInterface(triple.object));
            }                
            callback(event,triples);
        };
        var id = this.registerCallback('subscribe', wrapperCallback);
        this.observingCallbacks[callback] = id;

        this.connection.postMessage({'fn':'subscribe', 'args':[s,p,o,g], 'callback':id});
    };
     
    RDFStoreClient.RDFStoreClient.prototype.unsubscribe = function(callback) {
        var id = this.observingCallbacks[callback];
        delete this.observingCallbacks[callback];
        delete this.callbacks[id];
        //console.log("STOP OBSERVING "+id);
        this.connection.postMessage({'fn':'unsubscribe', 'args':[id], 'callback':[]})
    };
         
    RDFStoreClient.RDFStoreClient.prototype.registeredGraphs = function(callback) {
        var that = this;
        var wrapperCallback = function(success, graphs) {
            //console.log("CALLBACK!\n\n");
            if(success) {
                var triple;
                for(var i=0; i<graphs.length; i++) {
                    graph = graphs[i]
                    graphs[i] = that.adaptJSInterface(graph);
                }                
                callback(success, graphs);
            } else {
                callback(success,graphs);
            }
        };

        var id = this.registerCallback('registeredGraphs', wrapperCallback);
        this.connection.postMessage({'fn':'registeredGraphs', 'args':[], 'callback':id})
    };

    // helper functions
    RDFStoreClient.RDFStoreClient.prototype.adaptJSInterface = function(node) {
        if(node.interfaceName === 'BlankNode') {
            return new RDFJSInterface.BlankNode(node.bnodeId);
        } else if(node.interfaceName === 'Literal') {
            return new RDFJSInterface.Literal(node.nominalValue, node.language, node.datatype);
        } else if(node.interfaceName === 'NamedNode') {
            return new RDFJSInterface.NamedNode(node.nominalValue);
        }
    };

    // make possible for clients to test if this i being executed inside a connection
    RDFStoreClient.RDFStoreClient.prototype.isWebWorkerConnection = true;
}

// end of ./src/js-connection/src/rdfstore_client.js 
// exports
var Store = {};

/**
 * @namespace
 * 
 * The Store module defines the public interface to the RDF store.
 */

// imports
var MongodbQueryEngine = { MongodbQueryEngine: function(){ throw 'MongoDB backend not supported in the browser version' } };

/**
 * Version of the store
 */
Store.VERSION = "0.5.12";

/**
 * Create a new RDFStore instance that will be
 * executed in a web worker in the browser or a new process
 * in Node.js.
 * <br/>
 * <br/>
 * The first argument to this function is the URL/FS location 
 * of the store script.
 * <br/>
 * <br/>
 * This parameter is mandatory in the browser. It is safe to
 * ignore this parameter in Node.js.
 * <br/>
 * <br/>
 * If support for web workers is not present, a regular
 * store object will be initialized and returned.
 * <br/>
 * <br/>
 *
 * @param {String} [scriptPath] URL of the RDFStore script
 * @param {Object[]} [args] Arguments to be passed to the store that will be created
 * @param {Function} callback Callback function that will be invoked with an error flag and the connection/store object.
 */
Store.connect = function() {
    var path, args, callback;
    if(arguments.length == 1) {
        path = __dirname;
        args = {};
        callback = arguments[0];
    } if(arguments.length == 2) {
        if(typeof(arguments[0]) === 'string') {
            path = arguments[0];
            args = {};
        } else {
            path = __dirname+"/index.js";
            args = arguments[0];
        }
        callback = arguments[1];
    } else {
        path = arguments[0];
        args = arguments[1];
        callback = arguments[2];
    }
    try {
        if(!!Worker) {
            new RDFStoreClient.RDFStoreClient(path, args, function(success,connection) {
                callback(success, connection);
            });
        } else {
            Store.create(args,function(connection){
                callback(false, connection);
            });
        }
    } catch(e) {
        Store.create(args,function(connection){
            callback(false, connection);
        });        
    }
};

/**
 * Creates a new instance of the store.
 *
 * The function accepts two optional arguments.
 * <br/>
 * If only one argument is passed it must be a
 * callback function that will be invoked when the
 * store had been created.<br/>
 * <br/>
 * If two arguments are passed the first one must
 * be a map of configuration parameters for the
 * store, and the second one the callback function.<br/>
 * <br/>
 * Take a look at the Store constructor function for
 * a detailed list of possible configuration parameters.<br/>
 *
 * @param {Object[]} [args] Arguments to be passed to the store that will be created
 * @param {Function} [callback] Callback function that will be invoked with an error flag and the connection/store object.
 */
Store.create = function(){
    if(arguments.length == 1) {
        return new Store.Store(arguments[0]);
    } else if(arguments.length == 2) {
        return new Store.Store(arguments[0], arguments[1]);
    } else {
        return new Store.Store();
    };
};

/**
 * Creates a new store.<br/>
 * <br/>
 * It accepts two optional arguments, a map of configuration
 * options for the store and a callback function.<br/>
 *
 * @constructor 
 * @param {Function} [callback] Callback that will be invoked when the store has been created
 * @param {Object} [params]
 * <ul>
 *  <li> persistent:  should the store use persistence? </li>
 *  <li> treeOrder: in versions of the store backed by the native indexing system, the order of the BTree indices</li>
 *  <li> name: when using persistence, the name for this store. In the MongoDB backed version, name of the DB used by the store. By default <code>'rdfstore_js'</code> is used</li>
 *  <li> overwrite: clears the persistent storage </li>
 *  <li> maxCacheSize: if using persistence, maximum size of the index cache </li>
 *  <li> engine: the persistent storage to use, a value <code>mongodb</code> selects the MongoDB engine</li>
 *  <li> mongoDomain: when <code>engine=mongodb</code>, server domain name or IP address where the MongoDB server backing the store is running. By default <code>'127.0.0.1'</code> is used</li>
 *  <li> mongoPort: when <code>engine=mongodb</code>, port where the MongoDB server is running. By default <code>27017</code> is used</li>
 *  <li> mongoOptions: when <code>engine=mongodb</code>, additional options for the MongoDB driver. By default <code>{}</code> is used</li>
 * </ul>
 */
Store.Store = function(arg1, arg2) {
    var callback = null;
    var params   = null;

    if(arguments.length == 0) {
        params ={};
    } else if(arguments.length == 1) {
        params   = {};
        callback = arg1;
    } else if(arguments.length > 1) {
        params   = arg1;
        callback = arg2;
    } else {
        throw("An optional argument map and a callback must be provided");
    }

    if(params['treeOrder'] == null) {
        params['treeOrder'] = 15;
    }

    this.functionMap = {};

    var that = this;
    if(params['engine']==='mongodb') {
        this.isMongodb = true;
        this.engine = new MongodbQueryEngine.MongodbQueryEngine(params);
        this.engine.readConfiguration(function(){
            if(params['overwrite'] === true) {
                that.engine.clean(function(){
                    callback(that);
                });
            } else {
                callback(that);
            }
        });
    } else {
        new Lexicon.Lexicon(function(lexicon){
            if(params['overwrite'] === true) {
                // delete lexicon values
                lexicon.clear();
            }
            new QuadBackend.QuadBackend(params, function(backend){
                if(params['overwrite'] === true) {
                    // delete index values
                    backend.clear();
                }
                params.backend = backend;
                params.lexicon =lexicon;
                that.engine = new QueryEngine.QueryEngine(params);      
                if(callback) {
                    callback(that);
                }
            });
        },params['name']);
    }
};


/**
 * An instance of RDF JS Interface <code>RDFEnvironment</code>
 * associated to this graph instance.
 */
Store.Store.prototype.rdf = RDFJSInterface.rdf;

/**
 * Executes a query in the store.<br/>
 * <br/>
 * There are two possible ways of invoking this function,
 * providing a pair of arrays of namespaces that will be
 * used to compute the union of the default and named
 * dataset, or without them.
 * <br/>
 * <br/>
 * Both invocations receive as an optional last parameter
 * a callback function that will receive the return status
 * of the query and the results.
 * <br/>
 * <br/>
 * Results can have different formats:
 * <ul>
 *  <li> SELECT queries: array of binding maps </li>
 *  <li> CONSTRUCT queries: RDF JS Interface Graph object </li>
 *  <li> ASK queries: JS boolean value </li>
 *  <li> LOAD/INSERT... queries: Number of triples modified/inserted </li>
 * </ul>
 *  
 * @arguments: 
 * @param {String} query
 * @param {String} [defaultURIs] default namespaces
 * @param {String} [namespacesURIs] named namespaces
 * @param {Function} [callback]
 */
Store.Store.prototype.execute = function() {
    if(arguments.length === 3) {
        this.executeWithEnvironment(arguments[0],
                                    arguments[1],
                                    arguments[2]);
    } else if(arguments.length === 4) {
        this.executeWithEnvironment(arguments[0],
                                    arguments[1],
                                    arguments[2],
                                    arguments[3]);
    } else {

        var queryString;
        var callback;
     
        if(arguments.length === 1) {
            queryString = arguments[0];
            var callback = function(){};
        } else if(arguments.length === 2) {
            queryString = arguments[0];
            callback = arguments [1];
        }
        this.engine.execute(queryString, callback);
    }
};

/**
 * A variation of the execute function that expects 
 * arguments containing values for the default and named 
 * graphs that will be used in the query.
 *
 *
 * @arguments:
 * @param {String} query
 * @param {String} URIs default namespaces
 * @param {String} URIs named namespaces
 * @param {Function} [callback]
 */
Store.Store.prototype.executeWithEnvironment = function() {
    var queryString, defaultGraphs, namedGraphs;

    if(arguments.length === 3) {
        queryString   = arguments[0];
        // JSDoc fails if this is pushed outside 
        var callback  = function(){};
        defaultGraphs = arguments[1];
        namedGraphs   = arguments[2];
    } else if(arguments.length === 4) {
        queryString   = arguments[0];
        var callback      = arguments [3];
        defaultGraphs = arguments[1];
        namedGraphs   = arguments[2];
    }
    var defaultGraphsNorm = [];
    var namedGraphsNorm = [];
    for(var i=0; i<defaultGraphs.length; i++) {
        defaultGraphsNorm.push({'token':'uri','value':defaultGraphs[i]})
    }
    for(var i=0; i<namedGraphs.length; i++) {
        namedGraphsNorm.push({'token':'uri','value':namedGraphs[i]})
    }
    this.engine.execute(queryString, callback, defaultGraphsNorm, namedGraphsNorm);
};

/**
 * Retrieves all the quads belonging to a certain graph
 * in the store as a RDF JS Interface Graph object.<br/>
 * <br/>
 * The function accepts as mandatory parameter a callback
 * function that will receive the a success notification and the returned graph.<br/>
 * <br/>
 * Optionally, the URI of the graph can also be passed as
 * the first argument. If no graph is specified, the
 * default graph will be returned.<br/>
 *
 * @arguments
 * @param {String} [graphURI] If this parameter is missing, the default graph will be returned
 * @param {Functon} callback
 */
Store.Store.prototype.graph = function() {
    var graphUri = null;
    var callback = null;
    if(arguments.length === 1) {
        callback = arguments[0] || function(){};
        graphUri = this.engine.lexicon.defaultGraphUri;
    } else if(arguments.length === 2) {
        callback = arguments[1] || function(){};
        graphUri = arguments[0];
    } else {
        throw("An optional graph URI and a callback function must be provided");
    }

    if(this.rdf.resolve(graphUri) != null) {
        graphUri = this.rdf.resolve(graphUri);
    }

    this.engine.execute("CONSTRUCT { ?s ?p ?o } WHERE { GRAPH <" + graphUri + "> { ?s ?p ?o } }", callback);
};

/**
 * Retrieves all the quads belonging to a certain node
 * in the store as a RDF JS Interface Graph object containing
 * the collection of triples whose subject is the provided
 * node URI.<br/>
 * <br/>
 * The function accepts as mandatory parameters the node URI and 
 * a callback unction that will receive a success notification and the returned node.<br/>
 * <br/>
 * Optionally, the URI of the graph where the node is contained 
 * can also be passed as the first argument. <br/>
 * <br/>
 * If no graph is specified, the node will be looked into the 
 * default graph.<br/>
 *
 * @arguments
 * @param {String} nodeURI URI of the node to look for
 * @param {String} [graphURI] If this parameter is missing, the node will be looked into the default graph
 * @param {Functon} callback
 */
Store.Store.prototype.node = function() {
    var graphUri = null;
    var callback = null;
    var nodeUri  = null;
    if(arguments.length === 2) {
        nodeUri = arguments[0];
        callback = arguments[1] || function(){};
        graphUri = this.engine.lexicon.defaultGraphUri;
    } else if(arguments.length === 3) {
        nodeUri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2] || function(){};
    } else {
        throw("An optional graph URI, node URI and a callback function must be provided");
    }

    if(this.rdf.resolve(graphUri) != null) {
        graphUri = this.rdf.resolve(graphUri);
    }

    if(this.rdf.resolve(nodeUri) != null) {
        nodeUri = this.rdf.resolve(nodeUri);
    }

    this.engine.execute("CONSTRUCT { <" + nodeUri + "> ?p ?o } WHERE { GRAPH <" + graphUri + "> { <" + nodeUri + "> ?p ?o } }", callback);
};

/**
 * Associates an event listener function to a node URI. Every time the collection
 * of triples whose subject is the specified node URI changes, because an
 * insertion or deletion, the provided callback function will be invoked
 * receiving as a parameter a RDF JS Interface Graph object with the new
 * collection of triples.<br/>
 * <br/>
 * The function accepts two mandatory arguments, the URI of the node to observe
 * and the function that will receive the event notifications. An optional
 * third parameter, consisting of a callback function, can be passed and will be invoked
 * once the store had correctly configured the event listener.<br/>
 *<br/>
 * LOAD queries, batch loading data into the store, do not 
 * trigger events by default. If you wish to be notified
 * by changes triggered by this kind of queries, invoke
 * the *setBatchLoadEvents* function with a true argument.<br/>
 *<br/>
 * The event listener function can be removed using the stopObservingNode function.
 *
 * @arguments
 * @param {String} nodeURI URI of the node to observe
 * @param {Function} eventListener Function that will be notified with the events
 * @param {Function} [callback] Function that will be invoked, once the event listener had been correctly set up.
 */
Store.Store.prototype.startObservingNode = function() {
    var uri, graphUri, callback;

    if(arguments.length === 2) {
        uri = arguments[0];
        callback = arguments[1];
        this.engine.callbacksBackend.observeNode(uri, callback, function(){});
    } else if(arguments.length === 3) {
        uri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2];
        this.engine.callbacksBackend.observeNode(uri, graphUri, callback, function(){});
    }
};

/**
 * Removes a callback function associated to a node.<br/>
 * The event listener function object must be passed as an argument.<br/>
 *
 * @arguments
 * @param {Function} eventListener The event listener function to remove, the same passed as an argument to startObservingNode
 */
Store.Store.prototype.stopObservingNode = function(callback) {
    this.engine.callbacksBackend.stopObservingNode(callback);
};

/**
 * Associates an event listener function to a SPARQL SELECT or
 * CONSTRUCT query.<br/>
 * Every time an update (insert, delete...) query modified the 
 * triples in the store in a way that modifies the output of the
 * query, the event listener will be invoked with an updated 
 * result.<br/>
 *<br/>
 * LOAD queries, batch loading data into the store, do not 
 * trigger events by default. If you wish to be notified
 * by changes triggered by this kind of queries, invoke
 * the <code>setBatchLoadEvents</code> function with a true argument.<br/>
 *<br/>
 * The event listener function can be removed invoking the
 * <code>stopObservingQuery</code> function. 
 *
 * @arguments
 * @param {String} query SELECT or CONSTRUCT SPARQL query
 * @param {Function} eventListener the function that will receive the notifications
 * @param {Function} [callback] optional function that will be invoked when the stored had set up the event listener function.
 */
Store.Store.prototype.startObservingQuery = function() {
    var query = arguments[0];
    var callback = arguments[1];
    var endCallback = arguments[2];
    if(endCallback!=null) {
        this.engine.callbacksBackend.observeQuery(query, callback, endCallback);
    } else {
        this.engine.callbacksBackend.observeQuery(query, callback, function(){});
    }
};

/**
 * Removes a callback function associated to a SPARQL query.<br/>
 * The event listener function object must be passed as an argument.
 *
 * @arguments
 * @param {Function} eventListener The event listener function to remove, the same passed as an argument to startObservingQuery
 */
Store.Store.prototype.stopObservingQuery = function(query) {
    this.engine.callbacksBackend.stopObservingQuery(query);
};

/**
 * Associates an event listener to a pattern expressed as the
 * subject, predicate, object and graph string parameters passed
 * to the function. To match any value in that position, a <code>null</code>
 * value can be passed as an argument. e.g. <code>subscribe(null, null, null, g, cb)</code>,
 * will be notified with any change in the g graph.<br/>
 * The graph component of the pattern does not support a <code>null</code> value.<br/>
 *<br/>
 * Results will be notified as an Array of RDF JS Interface
 * <code>Triple</code> objects.<br/>
 *<br/>
 * LOAD queries, batch loading data into the store, do not 
 * trigger events by default. If you wish to be notified
 * by changes triggered by this kind of queries, invoke
 * the <code>setBatchLoadEvents</code> function with a true argument.
 *
 * @arguments
 * @param {String} s subject or null for any subject
 * @param {String} p predicate or null for any predicate
 * @param {String} o object or null for any object
 * @param {String} g graph or null for any graph
 * @param {Function} event listener function that will be notified when a change occurs
 */
Store.Store.prototype.subscribe = function(s, p, o, g, callback) {
    var adapterCb = function(event,triples){
        var acum = [];
        var queryEnv = {blanks:{}, outCache:{}};
        var bindings = [];

        for(var i=0; i<triples.length; i++) {
            var triple = triples[i];
            var s = RDFJSInterface.buildRDFResource(triple.subject,bindings,this.engine,queryEnv);
            var p = RDFJSInterface.buildRDFResource(triple.predicate,bindings,this.engine,queryEnv);
            var o = RDFJSInterface.buildRDFResource(triple.object,bindings,this.engine,queryEnv);
            if(s!=null && p!=null && o!=null) {
                triple = new RDFJSInterface.Triple(s,p,o);
                acum.push(triple);
            }
        }

        callback(event,acum);
    };

    this.functionMap[callback] = adapterCb;
    this.engine.callbacksBackend.subscribe(s,p,o,g,adapterCb,function(){});
};

/**
 * Removes an event listener associated to a certain pattern.
 * The function passed as an argument to <code>subscribe</code> must be 
 * passed as an argument.
 *
 * @arguments
 * @param {Function} callback The event listener to be removed
 */
Store.Store.prototype.unsubscribe = function(callback) {
    var adapterCb = this.functionMap[callback];
    this.engine.callbacksBackend.unsubscribe(adapterCb);
    delete this.functionMap[callback];
};

/**
 * Register a combination of prefix and URI fragment in the default instance
 * of the RDF JS Interface API <code>RDFEnvironment</code> object associated
 * to the store and available through the <code>storeInstance.rdf</code> property.
 *
 * @arguments
 * @param {String} prefix The prefix to be associated
 * @param {String} URIFragment URI fragment the provided prefix will be resolved
 */
Store.Store.prototype.setPrefix = function(prefix, uri) {
    this.rdf.setPrefix(prefix, uri);
};

/**
 * Defines the URI that will be used by default by the RDF JS Interface
 * API <code>RDFEnvironment</code> object associated to the store and available
 * through the <code>storeInstance.rdf</code> property.
 *
 * @arguments
 * @param {String} URIFragment The URI fragment will be used by default
 */
Store.Store.prototype.setDefaultPrefix = function(uri) {
    this.rdf.setDefaultPrefix(uri);
};

/**
 * Inserts a RDF JS Interface API <code>Graph</code> object into the store.
 * The function receives a mandatory <code>Graph</code> object whose triples
 * will be inserted. Optionally, a URI string for a graph and a 
 * callback function can be passed as arguments.<br/>
 * <br/>
 * If no graph URI is specified, triples will be inserted into the
 * default graph.<br/>
 * <br/>
 * If the callback function is specified, it will be invoked when all the
 * triples had been inserted into the store.<br/>
 *
 * @arguments
 * @param {RDFJSInterface.Graph} triples a RDF JS Interface <code>Graph</code> object
 * @param {String} [graphURI] URI of the graph where the triples will be inserted. If it is missing, triples will be inserted in the default graph
 * @param {String} [callback] A callback function that will be invoked with a success notification and the number of triples inserted
 */ 
Store.Store.prototype.insert = function() {
    var graph;
    var triples;
    var callback;
    if(arguments.length === 1) {
        triples = arguments[0];
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        triples = arguments[0];
        callback= arguments[1] || function(){};
    } else if(arguments.length === 3) {
        triples = arguments[0];
        graph = this.rdf.createNamedNode(arguments[1]);
        callback= arguments[2] || function(){};
    } else {
        throw("The triples to insert, an optional graph and callback must be provided");
    }

    var query = "";
    var that = this;
    triples.forEach(function(triple) {
        query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + ".";
    });

    if(graph != null) {
        query = "INSERT DATA { GRAPH " + this._nodeToQuery(graph) +" { "+ query + " } }";
    } else {
        query = "INSERT DATA { " + this._nodeToQuery(graph) +" { "+ query + " }";
    }

    this.engine.execute(query, callback);
};

Store.Store.prototype._nodeToQuery = function(term) {
    if(term.interfaceName === 'NamedNode') {
        var resolvedUri = this.rdf.resolve(term.valueOf());
        if(resolvedUri != null) {
            return "<" + resolvedUri + ">";
        } else {
            return "<" + term.valueOf() + ">";
        }
    } else if(term.interfaceName === '') {
        return term.toString();
    } else {
        if(term.lang != null) {
            return "\""+term.valueOf()+"\"@"+term.lang;
        } else if(term.datatype != null) {
            return "\""+term.valueOf()+"\"^^<"+term.datatype+">";
        }
        return term.toString();
    }
};

/**
 * Removes the triples in a RDF JS Interface API <code>Graph</code> object from the store.
 * The function receives a mandatory <code>Graph</code> object whose triples
 * will be removed. Optionally, a URI string for a graph and a 
 * callback function can be passed as arguments.<br/>
 * <br/>
 * If no graph URI is specified, triples will be removed from the
 * default graph.<br/>
 * <br/>
 * If the callback function is specified, it will be invoked when all the
 * triples had been removed from the store.
 *
 * @arguments
 * @param {RDFJSInterface.Graph} triples a RDF JS Interface <code>Graph</code> object
 * @param {String} [graphURI] URI of the graph where the triples will be removed from. If it is missing, triples will be removed from the default graph
 * @param {String} [callback] A callback function that will be invoked with a success notification
 */ 
Store.Store.prototype['delete'] = function() {

    var graph;
    var triples;
    var callback;
    if(arguments.length === 1) {
        triples = arguments[0];
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        triples = arguments[0];
        callback= arguments[1] || function(){};
    } else if(arguments.length === 3) {
        triples = arguments[0];
        graph = this.rdf.createNamedNode(arguments[1]);
        callback= arguments[2] || function(){};
    } else {
        throw("The triples to delete, an optional graph and callback must be provided");
    }

    var query = "";
    var that = this;
    triples.forEach(function(triple) {
        query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + ".";
    });

    if(graph != null) {
        query = "DELETE DATA { GRAPH " + this._nodeToQuery(graph) +" { "+ query + " } }";
    } else {
        query = "DELETE DATA { " + this._nodeToQuery(graph) +" { "+ query + " }";
    }

    this.engine.execute(query, callback);
};

/** 
 * Removes all the triples stored in a graph.
 * 
 * The URI of the graph and a callback function can be
 * optinally passed as parameters.<br/>
 * <br/>
 * If no graph URI is specified, all triples in the 
 * default graph will be removed.
 *
 * @arguments
 * @param {String} [graph] the URI of the graph the triples must be removed from
 * @param {Function} [callback] a function that will be invoked with a success notification
 */
Store.Store.prototype.clear = function() {
    var graph;
    var callback;

    if(arguments.length === 0) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        var callback= function(){};
    } else if(arguments.length === 1) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        callback= arguments[0] || function(){};
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(arguments[0]);
        callback= arguments[1] || function(){};
    } else {
        throw("The optional graph and a callback must be provided");
    }

    var query = "CLEAR GRAPH " + this._nodeToQuery(graph);
    this.engine.execute(query, callback);
};

/**
 * Boolean value determining if loading RDF must produce
 * triple add events and fire callbacks.<br/>
 * Default value is false.
 *
 * @arguments
 * @param {boolean} mustFireEvents true/false value.
 */
Store.Store.prototype.setBatchLoadEvents = function(mustFireEvents){
    this.engine.eventsOnBatchLoad = mustFireEvents;
};

/**
 * Registers a namespace prefix that will be automatically declared
 * in all the queries.<br/>
 * <br/>
 * The prefix will also be inserte in the default <code>RDFEnvironment</code> object
 * associated to the <code>rdf</code> property of the store instance.
 *
 * @arguments
 * @param {String} ns the name space to be regsitered
 * @param {String} prefix the URI fragment associated to the name space
 */
Store.Store.prototype.registerDefaultNamespace = function(ns, prefix) {
    this.rdf.prefixes.set(ns,prefix);
    this.engine.registerDefaultNamespace(ns,prefix);
};

/**
 * Registers the default namespaces declared in the RDF JS Interfaces
 * specification in the default Profile.
 */
Store.Store.prototype.registerDefaultProfileNamespaces = function() {
    var defaultNsMap = this.rdf.prefixes.values();
    for (var p in defaultNsMap) {
        this.registerDefaultNamespace(p,defaultNsMap[p]);
    }
};

/**
 * Load triples into a graph in the store. Data can be passed directly to the method
 * or a remote URI speifying where the data is located can be used.<br/>
 *<br/>
 * If the data is passed directly to the load function, the media type stating the format
 * of the data must also be passed to the function.<br/>
 *<br/>
 * If an URI is passed as a parameter, the store will attempt to perform content negotiation
 * with the remote server and get a representation for the RDF data matching one of the
 * the RDF parsers registered in the store. In this case, the media type parameter must be
 * set to the <code>'remote'</code> value.<br/>
 *<br/>
 * An additional URI for the graph where the parsed data will be loaded and a callback function
 * can be also passed as parameters. If no graph is specified, triples will be loaded in the
 * default graph.<br/>
 *<br/>
 * By default loading data will not trigger notification through the events API. If events needs to
 * be trigger, the functio <code>setBatchLoadEvents</code> must be invoked with a true parameter.
 *
 * @arguments
 * @param {String} mediaType Media type (application/json, text/n3...) of the data to be parsed or the value <code>'remote'</code> if a URI for the data is passed instead
 * @param {String} data RDF data to be parsed and loaded or an URI where the data will be retrieved after performing content negotiation
 * @param {String} [graph] Graph where the parsed triples will be inserted. If it is not specified, triples will be loaded in the default graph
 * @param {Function} callback that will be invoked with a success notification and the number of triples loaded.
 */
Store.Store.prototype.load = function(){
    var mediaType;
    var data;
    var graph;
    var callback;

    if(arguments.length === 3) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        mediaType = arguments[0];
        data = arguments[1];
        callback= arguments[2] || function(){};
    } else if(arguments.length === 4) {
        mediaType = arguments[0];
        data = arguments[1];
        graph = this.rdf.createNamedNode(arguments[2]);
        callback= arguments[3] || function(){};
    } else if(arguments.length === 2) {
        throw("The mediaType of the parser, the data a callback and an optional graph must be provided");
    }

    if(mediaType === 'remote') {
        data = this.rdf.createNamedNode(data);
        var query = "LOAD <"+data.valueOf()+"> INTO GRAPH <"+graph.valueOf()+">";

        this.engine.execute(query, callback);
    } else if(data && typeof(data)==='string' && data.indexOf('file://')=== 0) {
        var parser = this.engine.rdfLoader.parsers[mediaType];

        var that = this;
        this.engine.rdfLoader.loadFromFile(parser, {'token':'uri', 'value':graph.valueOf()}, data, function(success, quads) {
            if(success) {
                that.engine.batchLoad(quads,callback);
            } else {
                callback(success, quads);
            }
        });


    } else {
        var parser = this.engine.rdfLoader.parsers[mediaType];

        var that = this;

        this.engine.rdfLoader.tryToParse(parser, {'token':'uri', 'value':graph.valueOf()}, data, function(success, quads) {
            if(success) {
                that.engine.batchLoad(quads,callback);
            } else {
                callback(success, quads);
            }
        });
    }
};

/**
 * Registers a new parser associated to the provided media type. If there is a parser already registered for
 * that media type, the new parser will replace the old one.<br/>
 *<br/>
 * Parsers must implement a function *parse* accepting the data to be parsed as the
 * first parameter and the destination graph URI as the second one.
 * They must return an array of objects with properties: 'subject', 'predicate', 'object'
 * and 'graph' containing lexical representations for these values: 
 *<br/>
 *<ul>
 * <li><code>{literal: '"literal"'}</code></li>
 * <li><code>{literal: ''"literal"^^<datatype>'}</code></li>
 * <li><code>{literal: '"literal"@lang'}</code></li>
 * <li><code>{uri: 'uri'}</code></li>
 * <li><code>{blank: '_:label'}</code></li>
 *</ul>
 *<br/>
 * The provided media type will be used to perform content negotiation when dealing with remote
 * resources, or to select the parser in the <code>load</code> function.
 *
 * @arguments
 * @param {String} mediaType the media type for this parser
 * @param {String} parser an object containing the *parse* function with the parser logic
 */
Store.Store.prototype.registerParser = function(mediaType, parser) {
    this.engine.rdfLoader.registerParser(mediaType,parser);
};

/**
 * Returns the URI of all the graphs currently contained
 * in the store
 *
 * @arguments:
 * @param {Function} callback function that will receive a success notification and the array of graph URIs
 */
Store.Store.prototype.registeredGraphs = function(callback) {
    if(this.isMongodb) {
        this.engine.registeredGraphs(true, function(graphs){
            var acum = [];
            for(var i=0; i<graphs.length; i++) {
                var graph = graphs[i];
                var uri = new RDFJSInterface.NamedNode(graph);
                acum.push(uri);
            }
            
            return callback(true, acum);    
        });
    } else {
        var graphs = this.engine.lexicon.registeredGraphs(true);
        var acum = [];
        for(var i=0; i<graphs.length; i++) {
            var graph = graphs[i];
            var uri = new RDFJSInterface.NamedNode(graph);
            acum.push(uri);
        }
     
        return callback(true, acum);    
    }
};

/** @private */
Store.Store.prototype._nodeToQuery = function(term) {
    if(term.interfaceName === 'NamedNode') {
        var resolvedUri = this.rdf.resolve(term.valueOf());
        if(resolvedUri != null) {
            return "<" + resolvedUri + ">";
        } else {
            return "<" + term.valueOf() + ">";
        }
    } else if(term.interfaceName === '') {
        return term.toString();
    } else {
        return term.toString();
    }
};

/**
 * Returns the current network transport being used by the
 * the store.
 * 
 * The default transport uses TCP sockets in the Node.js version
 * and relies on jQuery in the browser version. This can be overriden
 * using the <code>setNetworkTransport</code> function.
 */
Store.Store.prototype.getNetworkTransport = function() {
    return NetworkTransport;
};

/**
 * Sets the network transport used by the store.<br/>
 * <br/>
 * Network transport consist of an object implementing the <code>load</code>
 * function, receiving the URI to load, a string with the value
 * of the HTTP 'Accept' header for the store registered parsers,
 * a callback function where the retrieved data and the success notification
 * must be returned.<br/>
 *<br/>
 * Different examples with implementations of different transports can be found
 * in the source code of the store:
 *<ul>
 * <li>src/js-communication/src/tcp_transport.js</li>
 * <li>src/js-communication/src/ajax_transport.js</li>
 *</ul>
 * @arguments
 * @param networkTransportImpl object implementing the transport *load* function.
 */
Store.Store.prototype.setNetworkTransport = function(networkTransportImpl) {
    NetworkTransport = networkTransportImpl;
};

// end of ./src/js-store/src/store.js 
// imports
    RDFStoreWorker = {};

    RDFStoreWorker.observingCallbacks = {};
    
    RDFStoreWorker.workerCallbacksCounter = 0;
    RDFStoreWorker.workerCallbacks = {};
    RDFStoreWorker.registerCallback = function(cb) {
        var nextId = ""+RDFStoreWorker.workerCallbacksCounter;
        RDFStoreWorker.workerCallbacksCounter++;
        RDFStoreWorker.workerCallbacks[nextId] = cb;
        return nextId;
    };

    RDFStoreWorker.handleCreate = function(argsObject, cb) {
        // redefine NetworkTransport

        if(typeof(NetworkTransport) != 'undefined'  && NetworkTransport != null) {
            NetworkTransport = {
                load: function(uri, graph, callback) {
                    var cbId = RDFStoreWorker.registerCallback(function(results){
                        callback.apply(callback,results);
                    });
                    postMessage({'fn':'workerRequest:NetworkTransport:load','callback':cbId, 'arguments':[uri,graph]});
                },

                loadFromFile: function(parser, graph, uri, callback) {

                }
            }
        }

        args = [argsObject];
        //console.log("in handling create");
        args.push(function(result){
            //console.log("created!!!");
            // Stores the store object in the worker
            RDFStoreWorker.store = result;
            //console.log("posting MESSAGE!");

            postMessage({'callback':cb, 'result':'created', 'success':true});
        });
        //console.log("creating");
        Store.create.apply(Store,args)
    };

    RDFStoreWorker.receive = function(packet) {
        var msg = packet.data || packet;
        //console.log("RECEIVED...");
        if(msg.fn === 'workerRequestResponse') {
            var cbId = msg.callback;
            var callback = RDFStoreWorker.workerCallbacks[cbId];
            if(callback != null) {
                delete RDFStoreWorker.workerCallbacks[cbId];
                callback(msg.results);
            }
        } else if(msg.fn === 'create' && msg.args !=null) {
            //console.log("handling create");
            RDFStoreWorker.handleCreate(msg.args, msg.callback);
        } else if(msg.fn === 'setBatchLoadEvents') {
            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store, msg.args);
        } else if(msg.fn === 'registerDefaultNamespace') {
            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store, msg.args);
        } else if(msg.fn === 'registerDefaultProfileNamespaces') {
            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store, msg.args);
        } else if((msg.fn === 'execute' ||
                   msg.fn === 'executeWithEnvironment' ||
                   msg.fn === 'graph'||
                   msg.fn === 'node' ||
                   msg.fn === 'clear' ||
                   msg.fn === 'load') && msg.args != null) {
            msg.args.push(function(success, result){
                //console.log("CALLBACK!");
                if(msg.callback!=null) {
                    postMessage({'callback':msg.callback, 'result':result, 'success':success});
                }
            });
            try {
                RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,msg.args);
            } catch(e) {
                console.log("Error executing method through connection");
                console.log(e);
            }
        } else if((msg.fn === 'insert'||
                   msg.fn === 'delete') && msg.args != null) {
            try {
                msg.args.push(function(success, result){
                    //console.log("CALLBACK!");
                    if(msg.callback!=null) {
                        postMessage({'callback':msg.callback, 'result':result, 'success':success});
                    }
                });
                var triple;
                var toWrap = msg.args[0];
                for(var i=0; i<toWrap.triples.length; i++) {
                    triple = toWrap.triples[i];
                    toWrap.triples[i] = new RDFJSInterface.Triple(RDFStoreWorker.adaptJSInterface(triple.subject),
                                                                  RDFStoreWorker.adaptJSInterface(triple.predicate),
                                                                  RDFStoreWorker.adaptJSInterface(triple.object));
                }                

                if(msg.args[1].interfaceName != null) {
                    msg.args[1] = RDFStoreWorker.adaptJSInterface(msg.args[1]);
                }
                msg.args[0] = RDFStoreWorker.store.rdf.createGraph(toWrap.triples)
                //console.log("ARGS...");
                
                RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,msg.args);
            } catch(e) {
                console.log("Error executing method through connection");
                console.log(e);
            }
        } else if(msg.fn === 'rdf/setPrefix' && msg.args != null) {
            RDFStoreWorker.store.rdf.setPrefix(msg.args[0], msg.args[1]);
        } else if(msg.fn === 'rdf/setDefaultPrefix' && msg.args != null) {
            RDFStoreWorker.store.rdf.setDefaultPrefix(msg.args[0]);
        } else if(msg.fn === 'startObservingQuery' && msg.args != null) {
            // regular callback
            var cb = function(success, result){
                postMessage({'callback':msg.callback[0], 'result':result, 'success':success});
            };

            RDFStoreWorker.observingCallbacks[msg.args[0]] = cb;
            msg.args.push(cb);


            // end register callback
            msg.args.push(function(success, result) {
                //console.log("CALLBACK END REGISTER OBSERVING QUERY!");
                if(msg.callback && msg.callback[1] !=null) {
                    postMessage({'callback':msg.callback[1], 'result':result, 'success':success});                    
                }
            });

            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,msg.args);

        } else if(msg.fn === 'stopObservingQuery') {
            var cb = RDFStoreWorker.observingCallbacks[msg.args[0]];
            if(cb) {
                RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,[cb]);
            }

            delete RDFStoreWorker.observingCallbacks[msg.args[0]];
        } else if(msg.fn === 'startObservingNode' && msg.args != null) {
            // regular callback
            var cb = function(result){
                //console.log("CALLBACK OBSERVING NODE!");
                postMessage({'callback':msg.callback, 'result':result});
            };

            RDFStoreWorker.observingCallbacks[msg.callback] = cb;
            msg.args.push(cb);

            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,msg.args);
        } else if(msg.fn === 'stopObservingNode' && msg.args != null) {
            var cb = RDFStoreWorker.observingCallbacks[msg.args[0]];
            if(cb) {
                //console.log("WORKER STOP OBSERVING");
                //console.log(cb);
                RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,[cb]);
            }

            delete RDFStoreWorker.observingCallbacks[msg.args[0]];
        } else if(msg.fn === 'subscribe' && msg.args != null) {
            // regular callback
            var cb = function(event,result){
                //console.log("CALLBACK OBSERVING NODE!");
                postMessage({'callback':msg.callback, 'event':event, 'result':result});
            };

            RDFStoreWorker.observingCallbacks[msg.callback] = cb;
            msg.args.push(cb);

            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,msg.args);
        } else if(msg.fn === 'stopObservingNode' && msg.args != null) {
            var cb = RDFStoreWorker.observingCallbacks[msg.args[0]];
            if(cb) {
                //console.log("WORKER UNSUBSCRIBE");
                //console.log(cb);
                RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,[cb]);
            }

            delete RDFStoreWorker.observingCallbacks[msg.args[0]];
        } else if(msg.fn === 'registeredGraphs' && msg.args != null) {
            var cb = function(success, result){
                //console.log("CALLBACK!");
                if(msg.callback!=null) {
                    postMessage({'callback':msg.callback, 'result':result, 'success':success});
                }
            };
            RDFStoreWorker.store[msg.fn].apply(RDFStoreWorker.store,[cb]);
        }
    };

    // helper functions
    RDFStoreWorker.adaptJSInterface = function(node) {
        if(node.interfaceName === 'BlankNode') {
            return new RDFJSInterface.BlankNode(node.bnodeId);
        } else if(node.interfaceName === 'Literal') {
            return new RDFJSInterface.Literal(node.nominalValue, node.language, node.datatype);
        } else if(node.interfaceName === 'NamedNode') {
            return new RDFJSInterface.NamedNode(node.nominalValue);
        }
    };

    // @todo
    // I'm setting a global var if this is not a worker
    // FIXME!

    // set the receiver message
    onmessage = RDFStoreWorker.receive;

// end of ./src/js-connection/src/rdfstore_worker.js 
try {
  window.rdfstore = Store;
} catch(e) { }
})();
