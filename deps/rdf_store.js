(function() {

var Utils = {};



Utils['extends'] = function(supertype, descendant) {
    descendant.prototype = new supertype();
};


Utils.stackCounterLimit = 1000;
Utils.stackCounter = 0;

Utils.recur = function(c){
    if(Utils.stackCounter === Utils.stackCounterLimit) {
        Utils.stackCounter = 0;
        setTimeout(c, 0);
    } else {
        Utils.stackCounter++;
        c();
    } 
};

Utils.shuffle = function(o){ //v1.0
    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
	return o;
};

Utils.include = function(a,v) {
    var cmp = arguments[2];

    for(var i=(a.length-1); i>=0; i--) {
        var res = false;
        if(cmp == null) {
            res = (a[i] === v);
        } else {
            res = (cmp(a[i],v) === 0);
        }

        if(res === true) {
            return true;
        }
    }

    return false;
};

Utils.remove = function(a,v) {
    var acum = [];
    for(var i=0; i<a.length; i++) {
        if(a[i] !== v) {
            acum.push(a[i]);
        }
    }

    return acum;
};

Utils.repeat = function(c,max,floop,fend,env) {
    if(arguments.length===4) { env = {}; }
    if(c<max) {
        env._i = c;
        floop(function(floop,env){
            // avoid stack overflow
            // deadly hack
            Utils.recur(function(){ Utils.repeat(c+1, max, floop, fend, env) });
        },env);
    } else {
        fend(env);
    }
};


Utilsmeanwhile = function(c,floop,fend,env) {
    if(arguments.length===3) { env = {}; }

    if(env['_stack_counter'] == null) {
        env['_stack_counter'] = 0;
    }

    if(c===true) {
        floop(function(c,floop,env){
            if(env['_stack_counter'] % 40 == 39) {
                env['_stack_counter'] = env['_stack_counter'] + 1;
                setTimeout(function(){ Utilsmeanwhile(c, floop, fend, env); }, 0);
            } else {
                env['_stack_counter'] = env['_stack_counter'] + 1;
                Utilsmeanwhile(c, floop, fend, env);
            }
        },env);
    } else {
        fend(env);
    }
};

Utils.seq = function() {
    var fs = arguments;
    return function(callback) {
        Utils.repeat(0, fs.length, function(k,env){
            var floop = arguments.callee;
            fs[env._i](function(){
                k(floop, env);
            });
        }, function(){
            callback();
        });
    }
};


Utils.partition = function(c, n) {
    var rem = c.length % n;
    var currentGroup = [];
    for(var i=0; i<rem; i++) {
        currentGroup.push(null);
    }
    
    var groups = [];
    var groupCounter = rem;
    for(var i=0; i<c.length; i++) {
        currentGroup.push(c[i]);
        if(currentGroup.length % n == 0) {
            groups.push(currentGroup);
            currentGroup = [];
        }
    }
    return groups;
};

Utils.keys = function(obj) {
    var variables = [];
    for(var variable in obj) {
        variables.push(variable);
    }

    return variables;
};

Utils.iso8601 = function(date) {
    function pad(n){
        return n<10 ? '0'+n : n;
    }    
    return date.getUTCFullYear()+'-'
        + pad(date.getUTCMonth()+1)+'-'
        + pad(date.getUTCDate())+'T'
        + pad(date.getUTCHours())+':'
        + pad(date.getUTCMinutes())+':'
        + pad(date.getUTCSeconds())+'Z';
};


Utils.parseStrictISO8601 = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = str.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); } else { throw "missing ISO8061 component" }
    if (d[5]) { date.setDate(d[5]);  } else { throw "missing ISO8061 component" }
    if (d[7]) { date.setHours(d[7]);  } else { throw "missing ISO8061 component" }
    if (d[8]) { date.setMinutes(d[8]);  } else { throw "missing ISO8061 component" }
    if (d[10]) { date.setSeconds(d[10]);  } else { throw "missing ISO8061 component" }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    var toReturn = new Date();
    toReturn.setTime(Number(time));
    return toReturn;
}


Utils.parseISO8601 = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = str.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); }
    if (d[5]) { date.setDate(d[5]);  }
    if (d[7]) { date.setHours(d[7]);  }
    if (d[8]) { date.setMinutes(d[8]);  }
    if (d[10]) { date.setSeconds(d[10]);  }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    var toReturn = new Date();
    toReturn.setTime(Number(time));
    return toReturn;
};

Utils.parseISO8601Components = function (str) {
    var regexp = "([0-9]{4})(-([0-9]{2}))(-([0-9]{2}))(T([0-9]{2}):([0-9]{2})(:([0-9]{2}))?(\.([0-9]+))?)?(Z|([-+])([0-9]{2})(:([0-9]{2}))?)?";
    var d = str.match(new RegExp(regexp));
    var year, month, date, hours, minutes, seconds, millisecs, timezone;
    year = Number(d[1]);
    month = d[3] - 1;
    date  = Number(d[5]);
    hours = Number(d[7]);
    minutes = Number(d[8]);
    seconds = Number(d[10]);

    if(d[12]) { millisecs = Number("0." + d[12]) * 1000 }

    if(d[13]==="Z") {
        timezone = 0;
    } else if (d[14]) {
        var timezone = 0;
        if(d[17]) {
            timezone = Number(d[17]);
        }
        timezone = timezone+(Number(d[15]) * 60);
        timezone *= ((d[14] == '-') ? -1 : +1);
    } else if(d[14]==null && d[11]) {
        timezone = Number(d[12])*60;
    }    

    return {'year': isNaN(year) ? null : year,
            'month': isNaN(month) ? null : month,
            'date': isNaN(date) ? null : date,
            'hours': isNaN(hours) ? null : hours,
            'minutes': isNaN(minutes) ? null : minutes,
            'seconds': isNaN(seconds) ? null : seconds,
            'millisecs':isNaN(millisecs) ? null : millisecs,
            'timezone': isNaN(timezone) ? null : timezone};
};

Utils.compareDateComponents = function(stra,strb) {
    var a = Utils.parseISO8601Components(stra);
    var b = Utils.parseISO8601Components(strb);

    if((a.timezone == null && b.timezone == null) ||
       (a.timezone != null && b.timezone != null)) {        
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        
        if(da.getTime() == db.getTime()) {
            return 0;
        } else if(da.getTime() < db.getTime()){
            return -1;
        } else {
            return 1;
        }
    } else if (a.timezone != null && b.timezone == null){
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        ta = da.getTime();
        tb = db.getTime();

        var offset = 14*60*60;

        if(ta < tb && ta < (tb + offset)) {
            return -1;
        } else if(ta > tb && ta > (tb - offset)) {
            return 1;
        } else {
        return null;
        }
    } else {
        da = Utils.parseISO8601(stra);
        db = Utils.parseISO8601(strb);
        ta = da.getTime();
        tb = db.getTime();

        var offset = 14*60*60;
        if(ta < tb && (ta + offset)  < tb) {
            return -1;
        } else if(ta > tb && (ta + offset) > tb) {
            return 1;
        } else {
        return null;
        }
    }
};

// RDF utils

Utils.lexicalFormLiteral = function(term, env) {
    var value = term.value;
    var lang = term.lang;
    var type = term.type;

    var indexedValue = null;
    if(value != null && type != null && typeof(type) != 'string') {
        var typeValue = type.value;

        if(typeValue != null) {
            indexedValue = '"' + term.value + '"^^<' + typeValue + '>';
        } else {
            var typePrefix = type.prefix;
            var typeSuffix = type.suffix;

            var resolvedPrefix = env.namespaces[typePrefix];
            term.type = resolvedPrefix+typeSuffix;
            indexedValue = '"' + term.value + '"^^<' + resolvedPrefix + typeSuffix + '>';
        }
    } else {
        if(lang == null && type == null) {
            indexedValue = '"' + value + '"';
        } else if(type == null) {
            indexedValue = '"' + value + '"' + "@" + lang;        
        } else {
            indexedValue = '"' + term.value + '"^^<'+type+'>';
        }
    }
    return indexedValue;
};

Utils.lexicalFormBaseUri = function(term, env) {
    var uri = null;
    //console.log("*** normalizing URI token:");
    //console.log(term);
    if(term.value == null) {
        //console.log(" - URI has prefix and suffix");
        //console.log(" - prefix:"+term.prefix);
        //console.log(" - suffixx:"+term.suffix);
        var prefix = term.prefix;
        var suffix = term.suffix;
        var resolvedPrefix = env.namespaces[prefix];
        if(resolvedPrefix != null) {            
            uri = resolvedPrefix+suffix;
        }
    } else {
        //console.log(" - URI is not prefixed");
        uri = term.value
    }

    if(uri===null) {
        return null;
    } else {
        //console.log(" - resolved URI is "+uri);
        if(uri.indexOf(":") == -1) {
            //console.log(" - URI is partial");
            uri = (env.base||"") + uri; // applyBaseUri
        } else {
            //console.log(" - URI is complete");
        }
        //console.log(" -> FINAL URI: "+uri);
    }

    return uri;
};


Utils.lexicalFormTerm = function(term, ns) {
    if(term.token === 'uri') {
        return {'uri': Utils.lexicalFormBaseUri(term, ns)}
    } else if(term.token === 'literal') {
        return {'literal': Utils.lexicalFormLiteral(term, ns)};
    } else if(term.token === 'blank') {
        var label = '_:'+ns.blank;
        ns.blank = ns.blank+1;
        return {'blank': label};
    } else {
        callback(false, 'Token of kind '+term.token+' cannot transformed into its lexical form');
    }
};

Utils.normalizeUnicodeLiterals = function(string) {
    var escapedUnicode = string.match(/\\u[0-9abcdefABCDEF]{4,4}/g) || [];
    var dups = {};
    for(var i=0; i<escapedUnicode.length; i++) {
        if(dups[escapedUnicode[i]] == null) {
            dups[escapedUnicode[i]] = true;
            string = string.replace(new RegExp("\\"+escapedUnicode[i],"g"), eval("'"+escapedUnicode[i]+"'"));
        }
    }

    return string;
}

Utils.hashTerm = function(term) {
    try {
      if(term == null) {
          return "";
      } if(term.token==='uri') {
          return "u"+term.value;
      } else if(term.token === 'blank') {
          return "b"+term.value;
      } else if(term.token === 'literal') {
          l = "l"+term.value;
          l = l + (term.type || "");
          l = l + (term.lang || "");        
   
          return l;
      }
    } catch(e) {
        if(typeof(term) === 'object') {
            var key = "";
            for(p in term) {
                key = key + p + term[p];
            }

            return key;
        }
        return term;
    }
}

// end of ./src/js-trees/src/utils.js 
// exports
var InMemoryBTree = {};

var left = -1;
var right = 1;


/*
 * @doc
 * Implementation based on <http://www.gossamer-threads.com/lists/linux/kernel/667935>
 *
 */

/**
 * Tree
 *
 * Implements the interface of BinarySearchTree.Tree
 *
 * An implementation of an in memory B-Tree.
 */

InMemoryBTree.Tree = function(order) {
    if(arguments.length != 0) {
        this.order = order;
        this.root = this._allocateNode();
        this.root.isLeaf = true;
        this.root.level = 0;
        this._diskWrite(this.root);
        this._updateRootNode(this.root);

        this.comparator = function(a,b) {
            if(a < b) {
                return -1;
            } else if(a > b){
                return 1;
            } else {
                return 0;
            }
        };
        this.merger = null;
    }
};

/**
 * Creates the new node.
 *
 * This class can be overwritten by different versions of
 * the tree t select the right kind of node to be used
 *
 * @returns the new alloacted node
 */
InMemoryBTree.Tree.prototype._allocateNode = function() {
    return new InMemoryBTree.Node();
}

/**
 * _diskWrite
 *
 * Persists the node to secondary memory.
 */
InMemoryBTree.Tree.prototype._diskWrite= function(node) {
    // dummy implementation;
    // no-op
};


/**
 * _diskRead
 *
 * Retrieves a node from secondary memory using the provided
 * pointer
 */
InMemoryBTree.Tree.prototype._diskRead = function(pointer) {
    // dummy implementation;
    // no-op
    return pointer;
};


InMemoryBTree.Tree.prototype._diskDelete= function(node) {
    // dummy implmentation
    // no-op
};

/**
 * _updateRootNode
 *
 * Updates the pointer to the root node stored in disk.
 */
InMemoryBTree.Tree.prototype._updateRootNode = function(node) {
    // dummy implementation;
    // no-op
    return node;
};


/**
 * search
 *
 * Retrieves the node matching the given value.
 * If no node is found, null is returned.
 */
InMemoryBTree.Tree.prototype.search = function(key, checkExists) {
    var searching = true;
    var node = this.root;

    while(searching) {
        var idx = 0;
        while(idx < node.numberActives && this.comparator(key, node.keys[idx].key) === 1) {
            idx++;
        }

        if(idx < node.numberActives && this.comparator(node.keys[idx].key,key) === 0) {
            if(checkExists != null && checkExists == true) {
                return true;
            } else {
                return node.keys[idx].data;
            }
        } else {
            if(node.isLeaf === true) {
                searching = false;
            } else {
                node = this._diskRead(node.children[idx]);
            }
        }
    }

    return null;
};


/**
 * walk
 * Applies a function to all the nodes key and data in the the
 * tree in key order.
 */
InMemoryBTree.Tree.prototype.walk = function(f) {
    this._walk(f,this.root);
};

InMemoryBTree.Tree.prototype._walk = function(f,node) {
    if(node.isLeaf) {
        for(var i=0; i<node.numberActives; i++) {
            f(node.keys[i]);
        }
    } else {
        for(var i=0; i<node.numberActives; i++) {
            this._walk(f,this._diskRead(node.children[i]));
            f(node.keys[i]);
        }
        this._walk(f,this._diskRead(node.children[node.numberActives]));
    }
};

/**
 * walkNodes
 * Applies a function to all the nodes in the the
 * tree in key order.
 */
InMemoryBTree.Tree.prototype.walkNodes = function(f) {
    this._walkNodes(f,this.root);
};

InMemoryBTree.Tree.prototype._walkNodes = function(f,node) {
    if(node.isLeaf) {
        f(node);
    } else {
        f(node);
        for(var i=0; i<node.numberActives; i++) {
            this._walkNodes(f,this._diskRead(node.children[i]));
        }
        this._walkNodes(f,this._diskRead(node.children[node.numberActives]));
    }
};

/**
 * _splitChild
 *
 * Split the child node and adjusts the parent.
 */
InMemoryBTree.Tree.prototype._splitChild = function(parent, index, child) {
    var newChild = this._allocateNode();
    newChild.isLeaf = child.isLeaf;
    newChild.level = child.level;
    newChild.numberActives = this.order - 1;

    // Copy the higher order keys to the new child
    var newParentChild = child.keys[this.order-1];
    child.keys[this.order-1] = null;

    for(var i=0; i< this.order-1; i++) {
	newChild.keys[i]=child.keys[i+this.order];
	child.keys[i+this.order] = null;
	if(!child.isLeaf) {
	    newChild.children[i] = child.children[i+this.order];
            child.children[i+this.order] = null;
	}
    }

    // Copy the last child pointer
    if(!child.isLeaf) {
	newChild.children[i] = child.children[i+this.order];
        child.children[i+this.order] = null;
    }

    child.numberActives = this.order - 1;


    for(i = parent.numberActives + 1; i>index+1; i--) {
	parent.children[i] = parent.children[i-1];
    }

    parent.children[index+1] = newChild;

    for(i = parent.numberActives; i>index; i--) {
	parent.keys[i] = parent.keys[i-1];
    }

    parent.keys[index] = newParentChild;
    parent.numberActives++;

    this._diskWrite(newChild);
    this._diskWrite(parent);
    this._diskWrite(child);
};

/**
 * insert
 *
 * Creates a new node with value key and data and inserts it
 * into the tree.
 */
InMemoryBTree.Tree.prototype.insert = function(key,data) {
    if(this.root.numberActives === (2 * this.order - 1)) {
        var newRoot = this._allocateNode();
        newRoot.isLeaf = false;
        newRoot.level = this.root.level + 1;
        newRoot.numberActives = 0;
        newRoot.children[0] = this.root;

        this._splitChild(newRoot, 0, this.root);
        this.root = newRoot;
        this._updateRootNode(this.root);
        this._insertNonFull(newRoot, key, data);
    } else {
        this._insertNonFull(this.root, key, data);
    }
};

/**
 * _insertNonFull
 *
 * Recursive function that tries to insert the new key in
 * in the prvided node, or splits it and go deeper
 * in the BTree hierarchy.
 */
InMemoryBTree.Tree.prototype._insertNonFull = function(node,key,data) {
    var idx = node.numberActives - 1;

    while(!node.isLeaf) {
        while(idx>=0 && this.comparator(key,node.keys[idx].key) === -1) {
            idx--;
        }
        idx++;
        var child = this._diskRead(node.children[idx]);

        if(child.numberActives === 2*this.order -1) {
            this._splitChild(node,idx,child);
            if(this.comparator(key, node.keys[idx].key)===1) {
                idx++;
            }
        }
        node = this._diskRead(node.children[idx]);
        idx = node.numberActives -1;
    }

    while(idx>=0 && this.comparator(key,node.keys[idx].key) === -1) {
        node.keys[idx+1] = node.keys[idx];
        idx--;
    }

    node.keys[idx+1] = {key: key, data:data}
    node.numberActives++;
    this._diskWrite(node);
};

/**
 * delete
 *
 * Deletes the key from the BTree.
 * If the key is not found, an exception is thrown.
 *
 * @param key the key to be deleted
 * @returns true if the key is deleted false otherwise
 */
InMemoryBTree.Tree.prototype['delete'] = function(key) {
    var node = this.root;
    var parent = null;
    var searching = true;
    var idx = null;
    var lsibling = null;
    var rsibling = null;
    var shouldContinue = true;

    while(shouldContinue === true) {
        shouldContinue = false;

        while(searching === true) {
            i = 0;

            if(node.numberActives === 0) {
                return false;
            }

            while(i<node.numberActives && this.comparator(key, node.keys[i].key) === 1) {
                i++;
            }

            idx = i;

            if(i<node.numberActives && this.comparator(key, node.keys[i].key) === 0) {
                searching = false;
            }

            if(searching === true) {

                if(node.isLeaf === true) {
                    return false;
                }

                parent = node;
                node = this._diskRead(node.children[i]);

                if(node===null) {
                    return false;
                }

                if(idx === parent.numberActives) {
                    lsibling = this._diskRead(parent.children[idx-1]);
                    rsibling = null;
                } else if(idx === 0) {
                    lsibling = null;
                    rsibling = this._diskRead(parent.children[1]);
                } else {
                    lsibling = this._diskRead(parent.children[idx-1]);
                    rsibling = this._diskRead(parent.children[idx+1]);
                }


                if(node.numberActives === (this.order-1) && parent != null) {
                    if(rsibling != null && rsibling.numberActives > (this.order-1)) {
                        // The current node has (t - 1) keys but the right sibling has > (t - 1) keys
                        this._moveKey(parent,i,left);
                    } else if(lsibling != null && lsibling.numberActives > (this.order-1)) {
                        // The current node has (t - 1) keys but the left sibling has > (t - 1) keys
                        this._moveKey(parent,i,right);
                    } else if(lsibling != null && lsibling.numberActives === (this.order-1)) {
                        // The current node has (t - 1) keys but the left sibling has (t - 1) keys
                        node = this._mergeSiblings(parent,i,left);
                    } else if(rsibling != null && rsibling.numberActives === (this.order-1)){
                        // The current node has (t - 1) keys but the left sibling has (t - 1) keys
                        node = this._mergeSiblings(parent,i,right);
                    }
                }
            }
        }


        //Case 1 : The node containing the key is found and is the leaf node.
        //Also the leaf node has keys greater than the minimum required.
        //Simply remove the key
        if(node.isLeaf && (node.numberActives > (this.order-1))) {
            this._deleteKeyFromNode(node,idx);
            return true;
        }


        //If the leaf node is the root permit deletion even if the number of keys is
        //less than (t - 1)
        if(node.isLeaf && (node === this.root)) {
            this._deleteKeyFromNode(node,idx);
            return true;
        }


        //Case 2: The node containing the key is found and is an internal node
        if(node.isLeaf === false) {
            var tmpNode = null;
            var tmpNode2 = null;
            if((tmpNode=this._diskRead(node.children[idx])).numberActives > (this.order-1)) {
                var subNodeIdx = this._getMaxKeyPos(tmpNode);
                key = subNodeIdx.node.keys[subNodeIdx.index];

                node.keys[idx] = key;

                //this._delete(node.children[idx],key.key);
                this._diskWrite(node);
                node = tmpNode;
                key = key.key;
                shouldContinue = true;
                searching = true;
            } else if ((tmpNode = this._diskRead(node.children[idx+1])).numberActives >(this.order-1)) {
                var subNodeIdx = this._getMinKeyPos(tmpNode);
                key = subNodeIdx.node.keys[subNodeIdx.index];

                node.keys[idx] = key;

                //this._delete(node.children[idx+1],key.key);
                this._diskWrite(node);
                node = tmpNode;
                key = key.key;
                shouldContinue = true;
                searching = true;
            } else if((tmpNode = this._diskRead(node.children[idx])).numberActives === (this.order-1) &&
                      (tmpNode2 = this._diskRead(node.children[idx+1])).numberActives === (this.order-1)) {

                var combNode = this._mergeNodes(tmpNode, node.keys[idx], tmpNode2);
                node.children[idx] = combNode;

                idx++;
                for(var i=idx; i<node.numberActives; i++) {
          	    node.children[i] = node.children[i+1];
          	    node.keys[i-1] = node.keys[i];
                }
                // freeing unused references
                node.children[i] = null;
                node.keys[i-1] = null;

                node.numberActives--;
                if (node.numberActives === 0 && this.root === node) {
                    this.root = combNode;
                }

                this._diskWrite(node);

                node = combNode;
                shouldContinue = true;
                searching = true;
            }
        }


        // Case 3:
	// In this case start from the top of the tree and continue
	// moving to the leaf node making sure that each node that
	// we encounter on the way has atleast 't' (order of the tree)
	// keys
	if(node.isLeaf && (node.numberActives > this.order - 1) && searching===false) {
            this._deleteKeyFromNode(node,idx);
	}

        if(shouldContinue === false) {
            return true;
        }
    }
};

/**
 * _moveKey
 *
 * Move key situated at position i of the parent node
 * to the left or right child at positions i-1 and i+1
 * according to the provided position
 *
 * @param parent the node whose is going to be moved to a child
 * @param i Index of the key in the parent
 * @param position left, or right
 */
InMemoryBTree.Tree.prototype._moveKey = function(parent,i,position) {

    if(position===right) {
        i--;
    }

    //var lchild = parent.children[i-1];
    var lchild = this._diskRead(parent.children[i]);
    var rchild = this._diskRead(parent.children[i+1]);


    if(position == left) {
        lchild.keys[lchild.numberActives] = parent.keys[i];
        lchild.children[lchild.numberActives+1] = rchild.children[0];
        rchild.children[0] = null;
        lchild.numberActives++;

        parent.keys[i] = rchild.keys[0];

        for(var _i=1; _i<rchild.numberActives; _i++) {
            rchild.keys[_i-1] = rchild.keys[_i];
            rchild.children[_i-1] = rchild.children[_i];
        }
        rchild.children[rchild.numberActives-1] = rchild.children[rchild.numberActives];
        rchild.numberActives--;
    } else {
        rchild.children[rchild.numberActives+1] = rchild.children[rchild.numberActives];
        for(var _i=rchild.numberActives; _i>0; _i--) {
            rchild.children[_i] = rchild.children[_i-1];
            rchild.keys[_i] = rchild.keys[_i-1];
        }
        rchild.keys[0] = null;
        rchild.children[0] = null;

        rchild.children[0] = lchild.children[lchild.numberActives];
        rchild.keys[0] = parent.keys[i];
        rchild.numberActives++;

        lchild.children[lchild.numberActives] = null;
        parent.keys[i] = lchild.keys[lchild.numberActives-1];
        lchild.keys[lchild.numberActives-1] = null;
        lchild.numberActives--;
    }

    this._diskWrite(lchild);
    this._diskWrite(rchild);
    this._diskWrite(parent);
}

/**
 * _mergeSiblings
 *
 * Merges two nodes at the left and right of the provided
 * index in the parent node.
 *
 * @param parent the node whose children will be merged
 * @param i Index of the key in the parent pointing to the nodes to merge
 */
InMemoryBTree.Tree.prototype._mergeSiblings = function(parent,index,pos) {
    var i,j;
    var n1, n2;

    if (index === (parent.numberActives)) {
        index--;
	n1 = this._diskRead(parent.children[parent.numberActives - 1]);
	n2 = this._diskRead(parent.children[parent.numberActives]);
    } else {
        n1 = this._diskRead(parent.children[index]);
	n2 = this._diskRead(parent.children[index + 1]);
    }

    //Merge the current node with the left node
    var newNode = this._allocateNode();
    newNode.isLeaf = n1.isLeaf;
    newNode.level = n1.level;

    for(j=0; j<this.order-1; j++) {
	newNode.keys[j] = n1.keys[j];
	newNode.children[j] = n1.children[j];
    }

    newNode.keys[this.order-1] = parent.keys[index];
    newNode.children[this.order-1] = n1.children[this.order-1];

    for(j=0; j<this.order-1; j++) {
	newNode.keys[j+this.order] = n2.keys[j];
	newNode.children[j+this.order] = n2.children[j];
    }
    newNode.children[2*this.order-1] = n2.children[this.order-1];

    parent.children[index] = newNode;

    for(j=index; j<parent.numberActives;j++) {
	parent.keys[j] = parent.keys[j+1];
	parent.children[j+1] = parent.children[j+2];
    }

    newNode.numberActives = n1.numberActives + n2.numberActives+1;
    parent.numberActives--;

    for(i=parent.numberActives; i<2*this.order-1; i++) {
	parent.keys[i] = null;
    }

    if (parent.numberActives === 0 && this.root === parent) {
	this.root = newNode;
	if(newNode.level) {
	    newNode.isLeaf = false;
	} else {
	    newNode.isLeaf = true;
        }
    }

    this._diskWrite(newNode);
    if(this.root === newNode) {
        this._updateRootNode(this.root);
    }
    this._diskWrite(parent);
    this._diskDelete(n1);
    this._diskDelete(n2);

    return newNode;
}

/**
 * _deleteKeyFromNode
 *
 * Deletes the key at position index from the provided node.
 *
 * @param node The node where the key will be deleted.
 * @param index The index of the key that will be deletd.
 * @return true if the key can be deleted, false otherwise
 */
InMemoryBTree.Tree.prototype._deleteKeyFromNode = function(node,index) {
    var keysMax = (2*this.order)-1;
    if(node.numberActives < keysMax) {
        keysMax = node.numberActives;
    };

    var i;

    if(node.isLeaf === false) {
	return false;
    }

    var key = node.keys[index];

    for(i=index; i<keysMax-1; i++) {
	node.keys[i] = node.keys[i+1];
    }

    // cleaning invalid reference
    node.keys.pop();

    node.numberActives--;

    this._diskWrite(node);

    return true;
}

InMemoryBTree.Tree.prototype._mergeNodes = function(n1, key, n2) {
    var newNode;
    var i;

    newNode = this._allocateNode();
    newNode.isLeaf = true;

    for(i=0; i<n1.numberActives; i++) {
	newNode.keys[i]   = n1.keys[i];
        newNode.children[i]   = n1.children[i];
    }
    newNode.children[n1.numberActives] = n1.children[n1.numberActives];
    newNode.keys[n1.numberActives] = key;

    for(i=0; i<n2.numberActives; i++) {
	newNode.keys[i+n1.numberActives+1] = n2.keys[i];
        newNode.children[i+n1.numberActives+1] = n2.children[i];
    }
    newNode.children[(2*this.order)-1] = n2.children[n2.numberActives];

    newNode.numberActives = n1.numberActives + n2.numberActives + 1;
    newNode.isLeaf = n1.isLeaf;
    newNode.level = n1.level;


    this._diskWrite(newNode);
    // @todo
    // delte old nodes from disk
    return newNode;
}

/**
 * audit
 *
 * Checks that the tree data structure is
 * valid.
 */
InMemoryBTree.Tree.prototype.audit = function(showOutput) {
    var errors = [];
    var alreadySeen = [];
    var that = this;

    var foundInArray = function(data) {
        for(var i=0; i<alreadySeen.length; i++) {
            if(that.comparator(alreadySeen[i],data)===0) {
                var error = " !!! duplicated key " + data;
                if(showOutput===true) {
                    console.log(error);
                }
                errors.push(error);
            }
        }
    };

    var length = null;
    var that = this;
    this.walkNodes(function(n) {
        if(showOutput === true) {
          console.log("--- Node at "+ n.level + " level");
          console.log(" - leaf? " + n.isLeaf);
          console.log(" - num actives? " + n.numberActives);
          console.log(" - keys: ");
        }
        for(var i = n.numberActives ; i<n.keys.length; i++) {
            if(n.keys[i] != null) {
                if(showOutput===true) {
                    console.log(" * warning : redundant key data");
                    errors.push(" * warning : redundant key data");
                }
            }
        }

        for(var i = n.numberActives+1 ; i<n.children.length; i++) {
            if(n.children[i] != null) {
                if(showOutput===true) {
                    console.log(" * warning : redundant children data");
                    errors.push(" * warning : redundant key data");
                }
            }
        }


        if(n.isLeaf === false) {
          for(var i=0; i<n.numberActives; i++) {
              var maxLeft = this._diskRead(n.children[i]).keys[this._diskRead(n.children[i]).numberActives -1 ].key
              var minRight = this._diskRead(n.children[i+1]).keys[0].key
              if(showOutput===true) {
                  console.log("   "+n.keys[i].key + "(" + maxLeft + "," + minRight+ ")");
              }
              if(that.comparator(n.keys[i].key,maxLeft)===-1) {
                  var error = " !!! value max left " + maxLeft + " > key " + n.keys[i].key;
                  if(showOutput===true) {
                      console.log(error);
                  }
                  errors.push(error);
              }
              if(that.comparator(n.keys[i].key,minRight)===1) {
                  var error = " !!! value min right " + minRight + " < key " + n.keys[i].key;
                  if(showOutput===true) {
                      console.log(error);
                  }
                  errors.push(error);
              }

              foundInArray(n.keys[i].key);
              alreadySeen.push(n.keys[i].key);
          }
        } else {
            if(length === null) {
                length = n.level;
            } else {
                if(length != n.level) {
                    var error = " !!! Leaf node with wrong level value";
                    if(showOutput===true) {
                        console.log(error);
                    }
                    errors.push(error);
                }
            }
            for(var i=0 ; i<n.numberActives; i++) {
                if(showOutput===true) {
                    console.log(" "+n.keys[i].key);
                }
                foundInArray(n.keys[i].key);
                alreadySeen.push(n.keys[i].key);

            }
        }

        if(n != that.root) {
            if(n.numberActives > ((2*that.order) -1)) {
                if(showOutput===true) {
                    var error = " !!!! MAX num keys restriction violated ";
                }
                console.log(error);
                errors.push(error);
            }
            if(n.numberActives < (that.order -1)) {
                if(showOutput===true) {
                    var error = " !!!! MIN num keys restriction violated ";
                }
                console.log(error);
                errors.push(error);
            }

        }
    });

    return errors;
}

/**
 *  _getMaxKeyPos
 *
 *  Used to get the position of the MAX key within the subtree
 *  @return An object containing the key and position of the key
 */
InMemoryBTree.Tree.prototype._getMaxKeyPos = function(node) {
    var node_pos = {};

    while(true) {
	if(node === null) {
	    break;
	}

	if(node.isLeaf === true) {
	    node_pos.node  = node;
	    node_pos.index = node.numberActives - 1;
	    return node_pos;
	} else {
	    node_pos.node  = node;
	    node_pos.index = node.numberActives - 1;
	    node = this._diskRead(node.children[node.numberActives]);
	}
    }

    return node_pos;
}

/**
 *  _getMinKeyPos
 *
 *  Used to get the position of the MAX key within the subtree
 *  @return An object containing the key and position of the key
 */
InMemoryBTree.Tree.prototype._getMinKeyPos = function(node) {
    var node_pos = {};

    while(true) {
	if(node === null) {
	    break;
	}

	if(node.isLeaf === true) {
	    node_pos.node  = node;
	    node_pos.index = 0;
	    return node_pos;
	} else {
	    node_pos.node  = node;
	    node_pos.index = 0;
	    node = this._diskRead(node.children[0]);
	}
    }

    return node_pos;
}


/**
 * Node
 *
 * Implements the interface of BinarySearchTree.Node
 *
 * A Tree node augmented with BTree
 * node structures
 */
InMemoryBTree.Node = function() {
    this.numberActives = 0;
    this.isLeaf = null;
    this.keys = [];
    this.children = [];
    this.level = 0;
};

// end of ./src/js-trees/src/in_memory_b_tree.js 
// exports
var QuadIndexCommon = {};

/**
 * NodeKey
 *
 * Implements the interface of BinarySearchTree.Node
 *
 * A Tree node augmented with BPlusTree
 * node structures
 */
QuadIndexCommon.NodeKey = function(components, order) {
    this.subject = components.subject;
    this.predicate = components.predicate;
    this.object = components.object;
    this.graph = components.graph;
    this.order = order;
};

QuadIndexCommon.NodeKey.prototype.comparator = function(keyPattern) {
    for(var i=0; i<this.order.length; i++) {
        var component = this.order[i];
        if(keyPattern[component] == null) {
            return 0;
        } else {
            if(this[component] < keyPattern[component] ) {
                return -1
            } else if(this[component] > keyPattern[component]) {
                return 1
            }
        }
    }

    return 0;
};

/**
 * Pattern
 *
 * A pattern with some variable components
 */
QuadIndexCommon.Pattern = function(components) {
    this.subject = components.subject;
    this.predicate = components.predicate;
    this.object = components.object;
    this.graph = components.graph;
    this.indexKey = [];

    this.keyComponents = {}

    var ks,ko,kp;
    var order = [];
    var indif = [];
    var components = ['subject', 'predicate', 'object', 'graph'];

    // components must have been already normalized and
    // inserted in the lexicon.
    // OIDs retrieved from the lexicon *are* numbers so
    // they can be told apart from variables (strings)
    for(var i=0; i<components.length; i++) {
        if(typeof(this[components[i]]) === 'string') {
            indif.push(components[i]);
            this.keyComponents[components[i]] = null;
        } else {
            order.push(components[i]);
            this.keyComponents[components[i]] = this[components[i]];
            this.indexKey.push(components[i]);
        }
    }

    this.order = order.concat(indif);
    this.key = new QuadIndexCommon.NodeKey(this.keyComponents, this.order);
}

// end of ./src/js-rdf-persistence/src/quad_index_common.js 
// exports
var QuadIndex = {};

// imports
var BaseTree = InMemoryBTree;

QuadIndex.Tree = function(params,callback) {
    if(arguments != 0) {
        this.componentOrder = params.componentOrder;

        // @todo change this if using the file backed implementation
        BaseTree.Tree.call(this, params.order);
        this.comparator = function(a,b) {
            for(var i=0; i< this.componentOrder.length; i++) {
                var component = this.componentOrder[i];
                var vala = a[component];
                var valb = b[component];
                if(vala < valb) {
                    return -1;
                } else if(vala > valb) {
                    return 1;
                }
            }
            return 0;
        }

        this.rangeComparator = function(a,b) {
            for(var i=0; i<this.componentOrder.length; i++) {
                var component = this.componentOrder[i];
                if(b[component] == null || a[component]==null) {
                    return 0;
                } else {
                    if(a[component] < b[component] ) {
                        return -1
                    } else if(a[component] > b[component]) {
                        return 1
                    }
                }
            }
            
            return 0;
        }

        if(callback!=null) {
            callback(this);
        }
    }
}

Utils['extends'](BaseTree.Tree, QuadIndex.Tree);

QuadIndex.Tree.prototype.insert = function(quad, callback) {
    BaseTree.Tree.prototype.insert.call(this, quad, null);
    if(callback)
        callback(true);

    return true
};

QuadIndex.Tree.prototype.search = function(quad, callback) {
    var result = BaseTree.Tree.prototype.search.call(this, quad, true); // true -> check exists : hack only present in the inMemoryAsyncBTree implementation
    if(callback)
        callback(result)

    return result;
};

QuadIndex.Tree.prototype.range = function(pattern, callback) {
    var result = this._rangeTraverse(this,this.root, pattern);
    if(callback)
        callback(result);

    return result;
}

QuadIndex.Tree.prototype._rangeTraverse = function(tree,node, pattern) {
    var patternKey  = pattern.key;
    var acum = [];
    var pendingNodes = [node];
    var node, idxMin, idxMax;

    while(pendingNodes.length > 0) {
        node = pendingNodes.shift();
        idxMin = 0;

        while(idxMin < node.numberActives && tree.rangeComparator(node.keys[idxMin].key,patternKey) === -1) {
            idxMin++;
        }
        if(node.isLeaf === true) {
            idxMax = idxMin;

            while(idxMax < node.numberActives && tree.rangeComparator(node.keys[idxMax].key,patternKey) === 0) {
                acum.push(node.keys[idxMax].key);
                idxMax++;
            }

        } else {
            var childNode = tree._diskRead(node.children[idxMin]);
            pendingNodes.push(childNode);

            var idxMax = idxMin;
            while(true) {
                if(idxMax < node.numberActives && tree.rangeComparator(node.keys[idxMax].key,patternKey) === 0) {
                    acum.push(node.keys[idxMax].key);
                    idxMax++;
                    childNode = tree._diskRead(node.children[idxMax]);
                    pendingNodes.push(childNode);
                } else {
                    break;
                }
            }
        }
    }
    
    return acum;
};

// end of ./src/js-rdf-persistence/src/quad_index.js 
// exports
var QuadBackend = {};


// imports


/*
 * "perfect" indices for RDF indexing
 *
 * SPOG (?, ?, ?, ?), (s, ?, ?, ?), (s, p, ?, ?), (s, p, o, ?), (s, p, o, g)
 * GP   (?, ?, ?, g), (?, p, ?, g)
 * OGS  (?, ?, o, ?), (?, ?, o, g), (s, ?, o, g)
 * POG  (?, p, ?, ?), (?, p, o, ?), (?, p, o, g)
 * GSP  (s, ?, ?, g), (s, p, ?, g)
 * OS   (s, ?, o, ?)
 */
QuadBackend.QuadBackend = function(configuration, callback) {
    if(arguments!=0) {
        this.indexMap = {};
        this.treeOrder = configuration['treeOrder']
        this.indices = ['SPOG', 'GP', 'OGS', 'POG', 'GSP', 'OS'];
        this.componentOrders = {
            SPOG: ['subject', 'predicate', 'object', 'graph'],
            GP: ['graph', 'predicate', 'subject', 'object'],
            OGS: ['object', 'graph', 'subject', 'predicate'],
            POG: ['predicate', 'object', 'graph', 'subject'],
            GSP: ['graph', 'subject', 'predicate', 'object'],
            OS: ['object', 'subject', 'predicate', 'graph']
        }

        for(var i=0; i<this.indices.length; i++) {
            var indexKey = this.indices[i];
            var tree = new QuadIndex.Tree({order: this.treeOrder,
                                           componentOrder: this.componentOrders[indexKey]});
            this.indexMap[indexKey] = tree;
        }
        
        if(callback)
            callback(this);        
    }
}

QuadBackend.QuadBackend.prototype._indexForPattern = function(pattern) {
    var indexKey = pattern.indexKey;
    var matchingIndices = this.indices;

    for(var i=0; i<matchingIndices.length; i++) {
        var index = matchingIndices[i];
        var indexComponents = this.componentOrders[index]
        for(var j=0; j<indexComponents.length; j++) {
            if(Utils.include(indexKey, indexComponents[j])===false) {
                break;
            }
            if(j==indexKey.length-1) {
                return index;
            }
        }
    }
    
    return 'SPOG' // If no other match, we erturn the more generic index
}


QuadBackend.QuadBackend.prototype.index = function(quad, callback) {
    for(var i=0; i<this.indices.length; i++) {
        var indexKey = this.indices[i];
        var index= this.indexMap[indexKey];

        index.insert(quad);
    }

    if(callback)
        callback(true);

    return true;
}

QuadBackend.QuadBackend.prototype.range = function(pattern, callback)  {
    var indexKey = this._indexForPattern(pattern);
    var index = this.indexMap[indexKey];
    var quads = index.range(pattern);
    if(callback) 
        callback(quads);

    return quads;
}

QuadBackend.QuadBackend.prototype.search = function(quad, callback)  {
    var indexKey = this.indices[0];
    var index= this.indexMap[indexKey];
    var result = index.search(quad);

    if(callback)
        callback(result!=null);

    return (result!=null)
}


QuadBackend.QuadBackend.prototype['delete'] = function(quad, callback) {
    var indexKey, index;
    for(var i=0; i<this.indices.length; i++) {
        indexKey = this.indices[i];
        index= this.indexMap[indexKey];

        index['delete'](quad);
    }

    if(callback)
        callback(true);

    return true;
}

// end of ./src/js-rdf-persistence/src/quad_backend.js 
// exports
var Lexicon = {};

// imports

/**
 * Temporal implementation of the lexicon
 */


Lexicon.Lexicon = function(callback){
    this.uriToOID = {};
    this.OIDToUri = {};

    this.literalToOID = {};
    this.OIDToLiteral = {};

    this.blankToOID = {};
    this.OIDToBlank = {};

    this.defaultGraphOid = 0;

    this.defaultGraphUri = "https://github.com/antoniogarrote/rdfstore-js#default_graph";
    this.defaultGraphUriTerm = {"token": "uri", "prefix": null, "suffix": null, "value": this.defaultGraphUri, "oid": this.defaultGraphOid};
    this.oidCounter = 1;

    this.knownGraphs = {};
    
    if(callback != null) {
        callback(this);
    }
};

Lexicon.Lexicon.prototype.registerGraph = function(oid){
    if(oid != this.defaultGraphOid) {
        this.knownGraphs[oid] = true;
    }
    return true
};

Lexicon.Lexicon.prototype.registeredGraphs = function(shouldReturnUris) {
    var acum = [];

    for(var g in this.knownGraphs) {
        if(shouldReturnUris === true) {
            acum.push(this.OIDToUri['u'+g]);
        } else {
            acum.push(g);
        }
    }
    return acum;
};

Lexicon.Lexicon.prototype.registerUri = function(uri) {
    if(uri === this.defaultGraphUri) {
        return(this.defaultGraphOid);
    } else if(this.uriToOID[uri] == null){
        var oid = this.oidCounter
        var oidStr = 'u'+oid;
        this.oidCounter++;

        this.uriToOID[uri] =[oid, 0];
        this.OIDToUri[oidStr] = uri;

        return(oid);
    } else {
        var oidCounter = this.uriToOID[uri];
        var oid = oidCounter[0];
        var counter = oidCounter[1] + 1;
        this.uriToOID[uri] = [oid, counter];
        return(oid);
    }
};

Lexicon.Lexicon.prototype.resolveUri = function(uri) {
    if(uri === this.defaultGraphUri) {
        return(this.defaultGraphOid);
    } else {
        var oidCounter = this.uriToOID[uri];
        if(oidCounter != null) {
            return(oidCounter[0]);
        } else {
            return(-1);
        }
    }
};

Lexicon.Lexicon.prototype.registerBlank = function(label) {
    var oid = this.oidCounter;
    this.oidCounter++;
    var oidStr = ""+oid;
    this.OIDToBlank[oidStr] = true;
    return(oidStr);
};

Lexicon.Lexicon.prototype.resolveBlank = function(label) {
//    @todo
//    this is failing with unicode tests... e.g. kanji2

//    var id = label.split(":")[1];
//    callback(id);

    var oid = this.oidCounter;
    this.oidCounter++
    return(""+oid);
};

Lexicon.Lexicon.prototype.registerLiteral = function(literal) {
    if(this.literalToOID[literal] == null){
        var oid = this.oidCounter;
        var oidStr =  'l'+ oid;
        this.oidCounter++;

        this.literalToOID[literal] = [oid, 0];
        this.OIDToLiteral[oidStr] = literal;

        return(oid);
    } else {
        var oidCounter = this.literalToOID[literal];
        var oid = oidCounter[0];
        var counter = oidCounter[1] + 1;
        this.literalToOID[literal] = [oid, counter];
        return(oid);
    }
};

Lexicon.Lexicon.prototype.resolveLiteral = function(literal) {
    var oidCounter = this.literalToOID[literal];
    if(oidCounter != null ) {
        return(oidCounter[0]); 
    } else {
        return(-1); 
    }
}

Lexicon.Lexicon.prototype.parseLiteral = function(literalString) {
    var parts = literalString.lastIndexOf("@");
    if(parts!=-1 && literalString[parts-1]==='"') {
        var value = literalString.substring(1,parts-1);
        var lang = literalString.substring(parts+1, literalString.length);
        return {token: "literal", value:value, lang:lang};
    }

    var parts = literalString.lastIndexOf("^^");
    if(parts!=-1 && literalString[parts-1]==='"' && literalString[parts+2] === '<' && literalString[literalString.length-1] === '>') {
        var value = literalString.substring(1,parts-1);
        var type = literalString.substring(parts+3, literalString.length-1);

        return {token: "literal", value:value, type:type};
    }

    var value = literalString.substring(1,literalString.length-1);
    return {token:"literal", value:value};
};

Lexicon.Lexicon.prototype.parseUri = function(uriString) {
    return {token: "uri", value:uriString};
};

Lexicon.Lexicon.prototype.retrieve = function(oid) {
    try {
        if(oid === this.defaultGraphOid) {
            return({ token: "uri", 
                       value:this.defaultGraphUri,
                       prefix: null,
                       suffix: null,
                       defaultGraph: true });
        } else {
          var maybeUri = this.OIDToUri['u'+oid];
          if(maybeUri) {
              return(this.parseUri(maybeUri));
          } else {
              var maybeLiteral = this.OIDToLiteral['l'+oid];
              if(maybeLiteral) {
                  return(this.parseLiteral(maybeLiteral));
              } else {
                  var maybeBlank = this.OIDToBlank[""+oid];
                  if(maybeBlank) {
                      return({token:"blank", value:"_:"+oid});
                  } else {
                      throw("Null value for OID");
                  }
              }
          }
        }
    } catch(e) {
        console.log("error in lexicon retrieving OID:");
        console.log(oid);
        if(e.message) {
            console.log(e.message); 
        }
        if(e.stack) {
            console.log(e.stack);
        }
        throw new Error("Unknown retrieving OID in lexicon:"+oid);

    }
};


Lexicon.Lexicon.prototype.unregister = function(quad, key) {
    try {
        this.unregisterTerm(quad.subject.token, key.subject);
        this.unregisterTerm(quad.predicate.token, key.predicate);
        this.unregisterTerm(quad.object.token, key.object);
        if(quad.graph!=null) {
            this.unregisterTerm(quad.graph.token, key.graph); 
        }
        return(true);
    } catch(e) {
        console.log("Error unregistering quad");
        console.log(e.message);
        return(false);
    }
}

Lexicon.Lexicon.prototype.unregisterTerm = function(kind, oid) {
    if(kind === 'uri') {
        if(oid != this.defaultGraphOid) {
            var oidStr = 'u'+oid;
            var uri = this.OIDToUri[oidStr];     // = uri;
            var oidCounter = this.uriToOID[uri]; // =[oid, 0];
            
            var counter = oidCounter[1];
            if(""+oidCounter[0] === ""+oid) {
                if(counter === 0) {
                    delete this.OIDToUri[oidStr];
                    delete this.uriToOID[uri];
                    // delete the graph oid from known graphs
                    // in case this URI is a graph identifier
                    delete this.knownGraphs[oid];
                } else {
                    this.uriToOID[uri] = [oid, counter-1];
                }
            } else {
                throw("Not matching OID : "+oid+" vs "+ oidCounter[0]);
            }
        }
    } else if(kind === 'literal') {
        this.oidCounter++;
        var oidStr     =  'l'+ oid;
        var literal    = this.OIDToLiteral[oidStr];  // = literal;
        var oidCounter = this.literalToOID[literal]; // = [oid, 0];
        
        var counter = oidCounter[1];
        if(""+oidCounter[0] === ""+oid) {
            if(counter === 0) {
                delete this.OIDToLiteral[oidStr];
                delete this.literalToOID[literal];
            } else {
                this.literalToOID[literal] = [oid, counter-1];
            }
        } else {
            throw("Not matching OID : "+oid+" vs "+ oidCounter[0]);
        }

    } else if(kind === 'blank') {
        delete this.OIDToBlank[""+oid];
    }
}

// end of ./src/js-rdf-persistence/src/lexicon.js 
// exports
var NetworkTransport = {};

NetworkTransport.load = function(uri, accept, callback, redirect) {
    var transport = jQuery;

    transport.ajax({
        url: uri,
        headers: {"Accepts": accept},

        success: function(data, status, xhr){
            if((""+xhr.status)[0] == '2') {
                var headers = xhr.getAllResponseHeaders().split("\n");
                var acum = {};
                for(var i=0; i<headers.length; i++) {
                    var header = headers[i].split(":");
                    acum[header[0]] = header[1];
                }

                callback(true, {headers: acum, 
                                data: data});
            }
        },

        error: function(xhr, textStatus, ex){
            if((""+xhr.status)[0] == '3'){                            
                if(redirection == 0) {
                    callback(false, 500);
                } else {
                    var location = (xhr.getAllResponseHeaders()["Location"] || xhr.getAllResponseHeaders()["location"])
                    if(location != null) {
                        NetworkTransport.load(location, accept, callback, (redirection -1));
                    } else {
                        callback(false, 500);
                    }
                } 
            } else {
                callback(false, xhr.statusCode());
            }
        }
    });
}

// end of ./src/js-communication/src/ajax_transport.js 
// exports
var TurtleParser = {};

var statementCounter = 0;
var timer = new Date().getTime();
var printTime = function() {
    var newTimer = new Date().getTime();
    console.log("ellapsed: "+((newTimer-timer)/1000)+" secs");
    timer = newTimer;
};

// imports

TurtleParser.parser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    innerParse: function(input, startRule) {
      var parseFunctions = {
        "ANON": parse_ANON,
        "BLANK_NODE_LABEL": parse_BLANK_NODE_LABEL,
        "BlankNode": parse_BlankNode,
        "BlankNodePropertyList": parse_BlankNodePropertyList,
        "BooleanLiteral": parse_BooleanLiteral,
        "COMMENT": parse_COMMENT,
        "Collection": parse_Collection,
        "DECIMAL": parse_DECIMAL,
        "DECIMAL_NEGATIVE": parse_DECIMAL_NEGATIVE,
        "DECIMAL_POSITIVE": parse_DECIMAL_POSITIVE,
        "DOUBLE": parse_DOUBLE,
        "DOUBLE_NEGATIVE": parse_DOUBLE_NEGATIVE,
        "DOUBLE_POSITIVE": parse_DOUBLE_POSITIVE,
        "ECHAR": parse_ECHAR,
        "EXPONENT": parse_EXPONENT,
        "GraphNode": parse_GraphNode,
        "GraphTerm": parse_GraphTerm,
        "INTEGER": parse_INTEGER,
        "INTEGER_NEGATIVE": parse_INTEGER_NEGATIVE,
        "INTEGER_POSITIVE": parse_INTEGER_POSITIVE,
        "IRI_REF": parse_IRI_REF,
        "IRIref": parse_IRIref,
        "LANGTAG": parse_LANGTAG,
        "NIL": parse_NIL,
        "NumericLiteral": parse_NumericLiteral,
        "NumericLiteralNegative": parse_NumericLiteralNegative,
        "NumericLiteralPositive": parse_NumericLiteralPositive,
        "NumericLiteralUnsigned": parse_NumericLiteralUnsigned,
        "ObjectList": parse_ObjectList,
        "PNAME_LN": parse_PNAME_LN,
        "PNAME_NS": parse_PNAME_NS,
        "PN_CHARS": parse_PN_CHARS,
        "PN_CHARS_BASE": parse_PN_CHARS_BASE,
        "PN_CHARS_U": parse_PN_CHARS_U,
        "PN_LOCAL": parse_PN_LOCAL,
        "PN_PREFIX": parse_PN_PREFIX,
        "PathAlternative": parse_PathAlternative,
        "PathElt": parse_PathElt,
        "PathEltOrInverse": parse_PathEltOrInverse,
        "PathMod": parse_PathMod,
        "PathNegatedPropertySet": parse_PathNegatedPropertySet,
        "PathOneInPropertySet": parse_PathOneInPropertySet,
        "PathPrimary": parse_PathPrimary,
        "PathSequence": parse_PathSequence,
        "PrefixedName": parse_PrefixedName,
        "PropertyList": parse_PropertyList,
        "PropertyListNotEmpty": parse_PropertyListNotEmpty,
        "PropertyListNotEmptyPath": parse_PropertyListNotEmptyPath,
        "PropertyListPath": parse_PropertyListPath,
        "RDFLiteral": parse_RDFLiteral,
        "STRING_LITERAL1": parse_STRING_LITERAL1,
        "STRING_LITERAL2": parse_STRING_LITERAL2,
        "STRING_LITERAL_LONG1": parse_STRING_LITERAL_LONG1,
        "STRING_LITERAL_LONG2": parse_STRING_LITERAL_LONG2,
        "String": parse_String,
        "TriplesBlock": parse_TriplesBlock,
        "TriplesNode": parse_TriplesNode,
        "TriplesSameSubject": parse_TriplesSameSubject,
        "VAR1": parse_VAR1,
        "VAR2": parse_VAR2,
        "VARNAME": parse_VARNAME,
        "Var": parse_Var,
        "VarOrIRIref": parse_VarOrIRIref,
        "VarOrTerm": parse_VarOrTerm,
        "Verb": parse_Verb,
        "VerbPath": parse_VerbPath,
        "WS": parse_WS,
        "base": parse_base,
        "directive": parse_directive,
        "prefixID": parse_prefixID,
        "statement": parse_statement,
        "turtleDoc": parse_turtleDoc
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "turtleDoc";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_turtleDoc() {
        var cacheKey = 'turtleDoc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_statement();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_statement();
        }
        var result0 = result1 !== null
          ? (function(sts) {
                  return sts;
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result12 = [];
        var result19 = parse_WS();
        while (result19 !== null) {
          result12.push(result19);
          var result19 = parse_WS();
        }
        if (result12 !== null) {
          var result13 = parse_directive();
          if (result13 !== null) {
            var result14 = [];
            var result18 = parse_WS();
            while (result18 !== null) {
              result14.push(result18);
              var result18 = parse_WS();
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result15 = ".";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result15 !== null) {
                var result16 = [];
                var result17 = parse_WS();
                while (result17 !== null) {
                  result16.push(result17);
                  var result17 = parse_WS();
                }
                if (result16 !== null) {
                  var result11 = [result12, result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos1;
                }
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        var result10 = result11 !== null
          ? (function(d) {
                  return d;
              })(result11[1])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          var result5 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS();
          }
          if (result5 !== null) {
            var result6 = parse_TriplesBlock();
            if (result6 !== null) {
              var result7 = [];
              var result8 = parse_WS();
              while (result8 !== null) {
                result7.push(result8);
                var result8 = parse_WS();
              }
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(ts) {
                    return ts;
                })(result4[1])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_WS();
            if (result2 !== null) {
              var result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                var result2 = parse_WS();
              }
            } else {
              var result1 = null;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_directive() {
        var cacheKey = 'directive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_prefixID();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_base();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_base() {
        var cacheKey = 'base@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var result7 = parse_WS();
        while (result7 !== null) {
          result2.push(result7);
          var result7 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "@base") {
            var result3 = "@base";
            pos += 5;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"@base\"");
            }
          }
          if (result3 !== null) {
            var result6 = parse_WS();
            if (result6 !== null) {
              var result4 = [];
              while (result6 !== null) {
                result4.push(result6);
                var result6 = parse_WS();
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result5 = parse_IRI_REF();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);
          
                base = {};
                base.token = 'base';
                base.value = i;
          
                return base;
          })(result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefixID() {
        var cacheKey = 'prefixID@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 7) === "@prefix") {
            var result3 = "@prefix";
            pos += 7;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"@prefix\"");
            }
          }
          if (result3 !== null) {
            var result11 = parse_WS();
            if (result11 !== null) {
              var result4 = [];
              while (result11 !== null) {
                result4.push(result11);
                var result11 = parse_WS();
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result10 = parse_PN_PREFIX();
              var result5 = result10 !== null ? result10 : '';
              if (result5 !== null) {
                if (input.substr(pos, 1) === ":") {
                  var result6 = ":";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\":\"");
                  }
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_WS();
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_IRI_REF();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, l) {
          
                registerPrefix(p,l);
          
                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;
          
                return prefix;
          })(result1[3], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesBlock() {
        var cacheKey = 'TriplesBlock@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject();
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result8 = parse_TriplesBlock();
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[2].triplesContext!=null) {
                               triples = triples.concat(bs[2].triplesContext);
                        }
                     }
                }
          
               return {token:'triples',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[54] TriplesBlock");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesSameSubject() {
        var cacheKey = 'TriplesSameSubject@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result11 = [];
        var result16 = parse_WS();
        while (result16 !== null) {
          result11.push(result16);
          var result16 = parse_WS();
        }
        if (result11 !== null) {
          var result12 = parse_VarOrTerm();
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_WS();
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_WS();
            }
            if (result13 !== null) {
              var result14 = parse_PropertyListNotEmpty();
              if (result14 !== null) {
                var result10 = [result11, result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
                }
          
                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;
          
                return token;
            })(result10[1], result10[3])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode();
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
              if (result5 !== null) {
                var result6 = parse_PropertyList();
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = tn.triplesContext;
                  var subject = tn.chainSubject;
            
                  if(pairs.pairs) {
                    for(var i=0; i< pairs.pairs.length; i++) {
                        var pair = pairs.pairs[i];
                        if(tn.token === "triplesnodecollection") {
                            for(var j=0; j<subject.length; j++) {
                                var subj = subject[j];
                                if(subj.triplesContext != null) {
                                    var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                    triplesContext.concat(subj.triplesContext);
                                } else {
                                    var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        } else {
                            var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                            triplesContext.push(triple);
                        }
                    }
                  }
            
                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;
            
                  return token;
              })(result2[1], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[66] TriplesSameSubject");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmpty() {
        var cacheKey = 'PropertyListNotEmpty@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Verb();
        if (result2 !== null) {
          var result3 = [];
          var result18 = parse_WS();
          while (result18 !== null) {
            result3.push(result18);
            var result18 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_ObjectList();
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var result7 = [];
              var result17 = parse_WS();
              while (result17 !== null) {
                result7.push(result17);
                var result17 = parse_WS();
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result16 = parse_WS();
                  while (result16 !== null) {
                    result9.push(result16);
                    var result16 = parse_WS();
                  }
                  if (result9 !== null) {
                    var savedPos2 = pos;
                    var result12 = parse_Verb();
                    if (result12 !== null) {
                      var result13 = [];
                      var result15 = parse_WS();
                      while (result15 !== null) {
                        result13.push(result15);
                        var result15 = parse_WS();
                      }
                      if (result13 !== null) {
                        var result14 = parse_ObjectList();
                        if (result14 !== null) {
                          var result11 = [result12, result13, result14];
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos2;
                    }
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              while (result6 !== null) {
                result5.push(result6);
                var savedPos1 = pos;
                var result7 = [];
                var result17 = parse_WS();
                while (result17 !== null) {
                  result7.push(result17);
                  var result17 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result8 = ";";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result16 = parse_WS();
                    while (result16 !== null) {
                      result9.push(result16);
                      var result16 = parse_WS();
                    }
                    if (result9 !== null) {
                      var savedPos2 = pos;
                      var result12 = parse_Verb();
                      if (result12 !== null) {
                        var result13 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                          result13.push(result15);
                          var result15 = parse_WS();
                        }
                        if (result13 !== null) {
                          var result14 = parse_ObjectList();
                          if (result14 !== null) {
                            var result11 = [result12, result13, result14];
                          } else {
                            var result11 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];
          
                for( var i=0; i<ol.length; i++) {
          
                   if(ol[i].triplesContext != null) {
                       triplesContext = triplesContext.concat(ol[i].triplesContext);
                       if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                           pairs.push([v, ol[i].chainSubject[0]]);
                       } else {
                           pairs.push([v, ol[i].chainSubject]);
                       }
          
                    } else {
                        pairs.push([v, ol[i]])
                    }
          
                }
          
          
                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[2] || [];
          
                    for(var j=0; j<newObjsList.length; j++) {
                     if(newObjsList[j].triplesContext != null) {
                        triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                       pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                        pairs.push([newVerb, newObjsList[j]])
                      }
                    }
                }
          
                token.pairs = pairs;
                token.triplesContext = triplesContext;
          
                return token;
          
          })(result1[0], result1[2], result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[67] PropertyListNotEmpty");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyList() {
        var cacheKey = 'PropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[68] PropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ObjectList() {
        var cacheKey = 'ObjectList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GraphNode();
        if (result2 !== null) {
          var result3 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result3.push(result10);
            var result10 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS();
              }
              if (result7 !== null) {
                var result8 = parse_GraphNode();
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_GraphNode();
                  if (result8 !== null) {
                    var result5 = [result6, result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(obj, objs) {
          
                  var toReturn = [];
          
                  toReturn.push(obj);
          
                  for(var i=0; i<objs.length; i++) {
                      for(var j=0; j<objs[i].length; j++) {
                          if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                              toReturn.push(objs[i][j]);
                          }
                      }
                  }
          
                  return toReturn;
              })(result1[0], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[69] ObjectList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Verb() {
        var cacheKey = 'Verb@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_VarOrIRIref();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result2 = "a";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
              })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[71] Verb");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmptyPath() {
        var cacheKey = 'PropertyListNotEmptyPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result13 = parse_VerbPath();
        if (result13 !== null) {
          var result1 = result13;
        } else {
          var result12 = parse_Var();
          if (result12 !== null) {
            var result1 = result12;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = parse_ObjectList();
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ";") {
              var result5 = ";";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\";\"");
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result11 = parse_VerbPath();
              if (result11 !== null) {
                var result8 = result11;
              } else {
                var result10 = parse_Var();
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  var result8 = null;;
                };
              }
              if (result8 !== null) {
                var result9 = parse_ObjectList();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ";") {
                var result5 = ";";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result5 !== null) {
                var savedPos2 = pos;
                var result11 = parse_VerbPath();
                if (result11 !== null) {
                  var result8 = result11;
                } else {
                  var result10 = parse_Var();
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    var result8 = null;;
                  };
                }
                if (result8 !== null) {
                  var result9 = parse_ObjectList();
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                var result6 = result7 !== null ? result7 : '';
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[73] PropertyListNotEmptyPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListPath() {
        var cacheKey = 'PropertyListPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[74] PropertyListPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VerbPath() {
        var cacheKey = 'VerbPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PathAlternative();
        var result0 = result1 !== null
          ? (function(p) {
                var path = {};
                path.token = 'path';
                path.value = p;
          
                return p;
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[75]");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathAlternative() {
        var cacheKey = 'PathAlternative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathSequence();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "|") {
            var result4 = "|";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathSequence();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "|") {
              var result4 = "|";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathSequence();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[78] PathAlternative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathSequence() {
        var cacheKey = 'PathSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathEltOrInverse();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "/") {
            var result4 = "/";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathEltOrInverse();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "/") {
              var result4 = "/";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathEltOrInverse();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[79] PathSequence");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathElt() {
        var cacheKey = 'PathElt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathPrimary();
        if (result1 !== null) {
          var result3 = parse_PathMod();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] PathElt");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathEltOrInverse() {
        var cacheKey = 'PathEltOrInverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_PathElt();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "^") {
            var result2 = "^";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_PathElt();
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[81] PathEltOrInverse");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathMod() {
        var cacheKey = 'PathMod@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "*") {
          var result21 = "*";
          pos += 1;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          if (input.substr(pos, 1) === "?") {
            var result20 = "?";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"?\"");
            }
          }
          if (result20 !== null) {
            var result0 = result20;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result19 = "+";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "{") {
                var result2 = "{";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"{\"");
                }
              }
              if (result2 !== null) {
                var savedPos2 = pos;
                var result9 = parse_INTEGER();
                if (result9 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result13 = ",";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result13 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result18 = "}";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result18 !== null) {
                      var result14 = result18;
                    } else {
                      var savedPos4 = pos;
                      var result16 = parse_INTEGER();
                      if (result16 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result17 = "}";
                          pos += 1;
                        } else {
                          var result17 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result17 !== null) {
                          var result15 = [result16, result17];
                        } else {
                          var result15 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos4;
                      }
                      if (result15 !== null) {
                        var result14 = result15;
                      } else {
                        var result14 = null;;
                      };
                    }
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    if (input.substr(pos, 1) === "}") {
                      var result11 = "}";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result11 !== null) {
                      var result10 = result11;
                    } else {
                      var result10 = null;;
                    };
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result5 = ",";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result5 !== null) {
                    var result6 = parse_INTEGER();
                    if (result6 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result7 = "}";
                        pos += 1;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result7 !== null) {
                        var result4 = [result5, result6, result7];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                }
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[82] PathMod");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathPrimary() {
        var cacheKey = 'PathPrimary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result9 = parse_IRIref();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result8 = "a";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "!") {
              var result6 = "!";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_PathNegatedPropertySet();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result2 = "(";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result2 !== null) {
                var result3 = parse_PathAlternative();
                if (result3 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result4 = ")";
                    pos += 1;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result4 !== null) {
                    var result1 = [result2, result3, result4];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[83] PathPrimary");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathNegatedPropertySet() {
        var cacheKey = 'PathNegatedPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result11 = parse_PathOneInPropertySet();
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_PathOneInPropertySet();
            if (result6 !== null) {
              var result7 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "|") {
                var result9 = "|";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_PathOneInPropertySet();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result7.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "|") {
                  var result9 = "|";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"|\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_PathOneInPropertySet();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathOneInPropertySet() {
        var cacheKey = 'PathOneInPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_IRIref();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result6 = "a";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "^") {
              var result2 = "^";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result2 !== null) {
              var result5 = parse_IRIref();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result4 = "a";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              }
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[85] PathOneInPropertySet");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesNode() {
        var cacheKey = 'TriplesNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_Collection();
        var result2 = result3 !== null
          ? (function(c) {
                triplesContext = [];
                chainSubject = [];
          
                var triple = null;
          
                // catch NIL
                /*
                if(c.length == 1 && c[0].token && c[0].token === 'nil') {
                    GlobalBlankNodeCounter++;
                    return  {token: "triplesnodecollection", 
                             triplesContext:[{subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                              object:  {token:'blank', label:("_:"+(GlobalBlankNodeCounter+1))}}], 
                             chainSubject:{token:'blank', label:("_:"+GlobalBlankNodeCounter)}};
          
                }
                */
          
                // other cases
                for(var i=0; i<c.length; i++) {
                    GlobalBlankNodeCounter++;
                    //_:b0  rdf:first  1 ;
                    //rdf:rest   _:b1 .
                    var nextObject = null;
                    if(c[i].chainSubject == null && c[i].triplesContext == null) {
                        nextObject = c[i];
                    } else {
                        nextObject = c[i].chainSubject;
                        triplesContext = triplesContext.concat(nextSubject.triplesContext);
                    }
                    var currentSubject = null;
                    triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                              object:nextObject };
          
                    if(i==0) {
                        chainSubject.push(triple.subject);
                    }
          
                    triplesContext.push(triple);
          
                    if(i===(c.length-1)) {
                        triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                    } else {
                        triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:  {token:'blank', label:("_:"+(GlobalBlankNodeCounter+1))} };
                    }
          
                    triplesContext.push(triple);
                }
          
                return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          })(result3)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_BlankNodePropertyList();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[87] TriplesNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNodePropertyList() {
        var cacheKey = 'BlankNodePropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_PropertyListNotEmpty();
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(pl) {
          
                GlobalBlankNodeCounter++;
                var subject = {token:'blank', label:''+GlobalBlankNodeCounter};
                var newTriples =  [];
          
                for(var i=0; i< pl.pairs.length; i++) {
                    var pair = pl.pairs[i];
                    var triple = {}
                    triple.subject = subject;
                    triple.predicate = pair[0];
                    triple.object = pair[1];
                    newTriples.push(triple);
                }
          
                return {token: 'triplesnode',
                        kind: 'blanknodepropertylist',
                        triplesContext: pl.triplesContext.concat(newTriples),
                        chainSubject: subject};
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] BlankNodePropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Collection() {
        var cacheKey = 'Collection@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result2.push(result13);
          var result13 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result4.push(result12);
              var result12 = parse_WS();
            }
            if (result4 !== null) {
              var result11 = parse_GraphNode();
              if (result11 !== null) {
                var result5 = [];
                while (result11 !== null) {
                  result5.push(result11);
                  var result11 = parse_GraphNode();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gn) {
                return gn;
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[89] Collection");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphNode() {
        var cacheKey = 'GraphNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result9 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result9.push(result13);
          var result13 = parse_WS();
        }
        if (result9 !== null) {
          var result10 = parse_VarOrTerm();
          if (result10 !== null) {
            var result11 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result11.push(result12);
              var result12 = parse_WS();
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result7 = parse_WS();
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode();
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_WS();
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WS();
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(gn) {
            return gn[1];
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[90] GraphNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrTerm() {
        var cacheKey = 'VarOrTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_GraphTerm();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[91] VarOrTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrIRIref() {
        var cacheKey = 'VarOrIRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_IRIref();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[92] VarOrIRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Var() {
        var cacheKey = 'Var@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_VAR1();
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_VAR2();
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(v) {
                var term = {};
                term.token = 'var';
                term.value = v;
                return term;
            })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[93] Var");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphTerm() {
        var cacheKey = 'GraphTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_IRIref();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_RDFLiteral();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_NumericLiteral();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_BooleanLiteral();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_BlankNode();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_NIL();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[94] GraphTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RDFLiteral() {
        var cacheKey = 'RDFLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_String();
        if (result2 !== null) {
          var result8 = parse_LANGTAG();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "^^") {
              var result6 = "^^";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"^^\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_IRIref();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, e) {
                if(typeof(e) === "string" && e.length > 0) {
                    return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                } else {
                    if(typeof(e) === "object") {
                        e.shift(); // remove the '^^' char
                        return {token:'literal', value:s.value, lang:null, type:e[0] }
                    } else {
                        return { token:'literal', value:s.value, lang:null, type:null }
                    }
                }
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[112] RDFLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteral() {
        var cacheKey = 'NumericLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_NumericLiteralUnsigned();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NumericLiteralPositive();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteralNegative();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[113] NumericLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralUnsigned() {
        var cacheKey = 'NumericLiteralUnsigned@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[114] NumericLiteralUnsigned");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralPositive() {
        var cacheKey = 'NumericLiteralPositive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_POSITIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[115] NumericLiteralPositive");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralNegative() {
        var cacheKey = 'NumericLiteralNegative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_NEGATIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[116] NumericLiteralNegative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanLiteral() {
        var cacheKey = 'BooleanLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 4) === "true") {
          var result4 = "true";
          pos += 4;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        var result3 = result4 !== null
          ? (function() {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                lit.value = true;
                return lit;
           })()
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                  lit.value = false;
                  return lit;
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[117] BooleanLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_String() {
        var cacheKey = 'String@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_STRING_LITERAL_LONG1();
        var result7 = result8 !== null
          ? (function(s) { return {token:'string', value:s} })(result8)
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_STRING_LITERAL_LONG2();
          var result5 = result6 !== null
            ? (function(s) { return {token:'string', value:s} })(result6)
            : null;
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_STRING_LITERAL1();
            var result3 = result4 !== null
              ? (function(s) { return {token:'string', value:s} })(result4)
              : null;
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_STRING_LITERAL2();
              var result1 = result2 !== null
                ? (function(s) { return {token:'string', value:s} })(result2)
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[118] String");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRIref() {
        var cacheKey = 'IRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_IRI_REF();
        var result3 = result4 !== null
          ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PrefixedName();
          var result1 = result2 !== null
            ? (function(p) { return p })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[119] IRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixedName() {
        var cacheKey = 'PrefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_PNAME_LN();
        var result3 = result4 !== null
          ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PNAME_NS();
          var result1 = result2 !== null
            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[120] PrefixedName");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNode() {
        var cacheKey = 'BlankNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_BLANK_NODE_LABEL();
        var result3 = result4 !== null
          ? (function(l) { return {token:'blank', label:l}})(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ANON();
          var result1 = result2 !== null
            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', label:''+GlobalBlankNodeCounter} })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[121] BlankNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRI_REF() {
        var cacheKey = 'IRI_REF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^<>"{} | ^\\]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[^<>\"{} | ^\\\\]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^<>"{} | ^\\]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[^<>\"{} | ^\\\\]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result4 = ">";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[122] IRI_REF");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_NS() {
        var cacheKey = 'PNAME_NS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result4 = parse_PN_PREFIX();
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result3 = ":";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) { return p })(result1[0])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[123] PNAME_NS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_LN() {
        var cacheKey = 'PNAME_LN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PNAME_NS();
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, s) { return [p, s] })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[124] PNAME_LN");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BLANK_NODE_LABEL() {
        var cacheKey = 'BLANK_NODE_LABEL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result2 = "_:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"_:\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(l) { return l })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[125] BLANK_NODE_LABEL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR1() {
        var cacheKey = 'VAR1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "?") {
          var result2 = "?";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"?\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[126] VAR1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR2() {
        var cacheKey = 'VAR2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "$") {
          var result2 = "$";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[127] VAR2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANGTAG() {
        var cacheKey = 'LANGTAG@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result2 = "@";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result9 !== null) {
            var result3 = [];
            while (result9 !== null) {
              result3.push(result9);
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result6 !== null) {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result8 !== null) {
                var result7 = [];
                while (result8 !== null) {
                  result7.push(result8);
                  if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                var result7 = null;
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result6 !== null) {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result8 !== null) {
                  var result7 = [];
                  while (result8 !== null) {
                    result7.push(result8);
                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {
          
                if(b.length===0) {
                    return ("@"+a.join('')).toLowerCase();
                } else {
                    return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
                }
          })(result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[128] LANGTAG");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER() {
        var cacheKey = 'INTEGER@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(d) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                lit.value = flattenString(d);
                return lit;
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[129] INTEGER");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL() {
        var cacheKey = 'DECIMAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result12 = input.charAt(pos);
          pos++;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result12 !== null) {
          var result8 = [];
          while (result12 !== null) {
            result8.push(result12);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        if (result8 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result9 !== null) {
            var result10 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result11 !== null) {
              result10.push(result11);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(a, b, c) {
          
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                lit.value = flattenString([a,b,c]);
                return lit;
          })(result7[0], result7[1], result7[2])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(a, b) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                  lit.value = flattenString([a,b]);
                  return lit;
             })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[130] DECIMAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE() {
        var cacheKey = 'DOUBLE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result19 = input.charAt(pos);
          pos++;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result19 !== null) {
          var result14 = [];
          while (result19 !== null) {
            result14.push(result19);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result19 = input.charAt(pos);
              pos++;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        if (result14 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result15 !== null) {
            var result16 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result18 !== null) {
              result16.push(result18);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result18 = input.charAt(pos);
                pos++;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result16 !== null) {
              var result17 = parse_EXPONENT();
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(a, b, c, e) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                lit.value = flattenString([a,b,c,e]);
                return lit;
          })(result13[0], result13[1], result13[2], result13[3])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result11 !== null) {
              var result9 = [];
              while (result11 !== null) {
                result9.push(result11);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result10 = parse_EXPONENT();
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a, b, c) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#double";
                  lit.value = flattenString([a,b,c]);
                  return lit;
            })(result7[0], result7[1], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result4 = parse_EXPONENT();
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a, b) {
                    lit = {};
                    lit.token = "literal";
                    lit.lang = null;
                    lit.type = "http://www.w3.org/2001/XMLSchema#double";
                    lit.value = flattenString([a,b]);
                    return lit;
              })(result2[0], result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[131] DOUBLE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_POSITIVE() {
        var cacheKey = 'INTEGER_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[132] INTEGER_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_POSITIVE() {
        var cacheKey = 'DECIMAL_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[133] DECIMAL_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_POSITIVE() {
        var cacheKey = 'DOUBLE_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[134] DOUBLE_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_NEGATIVE() {
        var cacheKey = 'INTEGER_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[135] INTEGER_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_NEGATIVE() {
        var cacheKey = 'DECIMAL_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[136] DECIMAL_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_NEGATIVE() {
        var cacheKey = 'DOUBLE_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[137] DOUBLE_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXPONENT() {
        var cacheKey = 'EXPONENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result3 = result6 !== null ? result6 : '';
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[138] EXPONENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL1() {
        var cacheKey = 'STRING_LITERAL1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result2 = "'";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result4 = "'";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[139] STRING_LITERAL1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL2() {
        var cacheKey = 'STRING_LITERAL2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[140] STRING_LITERAL2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG1() {
        var cacheKey = 'STRING_LITERAL_LONG1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "'''") {
          var result2 = "'''";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"'''\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "'''") {
              var result4 = "'''";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"'''\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[141] STRING_LITERAL_LONG1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG2() {
        var cacheKey = 'STRING_LITERAL_LONG2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "\"\"\"") {
          var result2 = "\"\"\"";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\\\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result4 = "\"\"\"";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\\\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[142] STRING_LITERAL_LONG2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ECHAR() {
        var cacheKey = 'ECHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("[tbnrf\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[143] ECHAR");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NIL() {
        var cacheKey = 'NIL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result5 = parse_WS();
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_WS();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result4 = ")";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
          
                return  {token: "triplesnodecollection", 
                         triplesContext:[], 
                         chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
          })()
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[144] NIL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WS() {
        var cacheKey = 'WS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos).match(/^[\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[\\r]");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result2 = input.charAt(pos);
                pos++;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_COMMENT();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[145] WS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMENT() {
        var cacheKey = 'COMMENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result3 !== null) {
            result2.push(result3);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed(" COMMENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANON() {
        var cacheKey = 'ANON@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS();
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS();
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[146] ANON");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_BASE() {
        var cacheKey = 'PN_CHARS_BASE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos).match(/^[a-z]/) !== null) {
            var result13 = input.charAt(pos);
            pos++;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("[a-z]");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xF8-\\u02FF]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0370-\\u037D]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u037F-\\u1FFF]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\u200C-\\u200D]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\u2070-\\u218F]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\u2C00-\\u2FEF]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\u3001-\\uD7FF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                  matchFailed("[\\uF900-\\uFDCF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("[\\uFDF0-\\uFFFD]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("[\\u1000-\\uEFFF]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[147] PN_CHARS_BASE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_U() {
        var cacheKey = 'PN_CHARS_U@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_PN_CHARS_BASE();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[148] PN_CHARS_U");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VARNAME() {
        var cacheKey = 'VARNAME@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result11 = parse_PN_CHARS_U();
        if (result11 !== null) {
          var result2 = result11;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result10 !== null) {
            var result2 = result10;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_PN_CHARS_U();
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result5 = input.charAt(pos);
                    pos++;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result9 = parse_PN_CHARS_U();
            if (result9 !== null) {
              var result4 = result9;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result8 !== null) {
                var result4 = result8;
              } else {
                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xB7]");
                  }
                }
                if (result7 !== null) {
                  var result4 = result7;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result6 !== null) {
                    var result4 = result6;
                  } else {
                    if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                      var result5 = input.charAt(pos);
                      pos++;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(init, rpart) { return init+rpart.join('') })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[149] VARNAME");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS() {
        var cacheKey = 'PN_CHARS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_PN_CHARS_U();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result5 = "-";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[150] PN_CHARS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_PREFIX() {
        var cacheKey = 'PN_PREFIX@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PN_CHARS_BASE();
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS();
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                        	throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
          					      } else {
          						  return base + rest.join('');
          					      }})(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[151] PN_PREFIX");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_LOCAL() {
        var cacheKey = 'PN_LOCAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result8 = parse_PN_CHARS_U();
        if (result8 !== null) {
          var result2 = result8;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result7 !== null) {
            var result2 = result7;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS();
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { 
                                                                 return base + rest.join('');
                                                               })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[152] PN_LOCAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var flattenString = function(arrs) {
      
            var acum ="";
      
            for(var i=0; i< arrs.length; i++) {
      
              if(typeof(arrs[i])==='string') {
      
                acum = acum + arrs[i];
      
              } else {
      
                acum = acum + arrs[i].join('');
      
              }
      
            }
      
    
      
            return acum;
      
        }
      
    
      
    
      
        var GlobalBlankNodeCounter = 0;
      
    
      
        var prefixes = {};
      
    
      
        var registerPrefix = function(prefix, uri) {
      
            prefixes[prefix] = uri;
      
        }
      
    
      
        var registerDefaultPrefix = function(uri) {
      
            prefixes[null] = uri;
      
        }
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

TurtleParser.parser.parse = function(data, graph) {
    var quads = [];

    var result = TurtleParser.parser.innerParse(data);
    var namespaces = {};
    var env = {namespaces: namespaces, base:'', blankCounter: 0};

    statementCounter = 0;

    for(var i=0; i<result.length; i++) {
        var unit = result[i];
        if(unit.token === 'base') {
            env.base = unit.value;
        } else if(unit.token === 'prefix') {
            namespaces[unit.prefix] = unit.local;
        } else if(unit.token === 'triples') {
            for(var j=0; j<unit.triplesContext.length; j++) {
                var triple = unit.triplesContext[j];
                var quad = { subject: Utils.lexicalFormTerm(triple.subject, env),
                             predicate: Utils.lexicalFormTerm(triple.predicate, env),
                             object: Utils.lexicalFormTerm(triple.object, env),
                             graph: graph };
     
                quads.push(quad);
            }
        }
    }

    return quads;
};


// end of ./src/js-communication/src/turtle_parser.js 
// exports
var JSONLDParser = {};

// imports

JSONLDParser.parser = {};
JSONLDParser.parser.parse = function(data, graph) {
    var state = {
        defaultContext: { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                          "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                          "owl": "http://www.w3.org/2002/07/owl#",
                          "xsd": "http://www.w3.org/2001/XMLSchema#",
                          "dcterms": "http://purl.org/dc/terms/",
                          "foaf": "http://xmlns.com/foaf/0.1/",
                          "cal": "http://www.w3.org/2002/12/cal/ical#",
                          "vcard": "http://www.w3.org/2006/vcard/ns# ",
                          "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#",
                          "cc": "http://creativecommons.org/ns#",
                          "sioc": "http://rdfs.org/sioc/ns#",
                          "doap": "http://usefulinc.com/ns/doap#",
                          "com": "http://purl.org/commerce#",
                          "ps": "http://purl.org/payswarm#",
                          "gr": "http://purl.org/goodrelations/v1#",
                          "sig": "http://purl.org/signature#",
                          "ccard": "http://purl.org/commerce/creditcard#",
                          "@coerce": 
                          {
                              "http://www.w3.org/2001/XMLSchema#anyURI": ["http://xmlns.com/foaf/0.1/homepage", "http://xmlns.com/foaf/0.1/member"],
                              "http://www.w3.org/2001/XMLSchema#integer": "http://xmlns.com/foaf/0.1/age"
                          }
                        },
        defaultGraph: null,
        activeSubject: null,
        inheritedSubject: null,
        activePredicate: null,
        inheritedPredicate: null,
        activeObject: null,
        activeContext: [],
        localContext: {},
        listOfIncompleteTriples: [],
        listOfUnprocessedItems: []
    }

    var triples = [];
    var nodeId = 0;

    // 1) Push the default context onto the active context stack.
    state.activeContext = state.defaultContext;
    if(JSONLDParser.parser.isArray(data)) {
        JSONLDParser.parser.parseListOfNodes(data, state, null, null, triples, nodeId);
    } else {
        JSONLDParser.parser.parseListOfNodes([data], state, null, null, triples, nodeId);
    }

    var quads = [];
    for(var i=0; i<triples.length; i++) {
        var quad = triples[i];
        quad.graph = graph;
        quads.push(quad);
    }
    return quads;
};

JSONLDParser.parser.parseListOfNodes = function(data, state, inheritedSubject, inheritedPredicate, triples, nodeId) {

    for(var i=0; i<data.length; i++) {
        var token = data[i];

        //create a new processor state. 
        processorState = { activeSubject: null,
                           inheritedSubject: inheritedSubject,
                           activePredicate: null,
                           inheritedPredicate: inheritedPredicate,
                           activeObject: null,
                           localContext: {},
                           listOfIncompleteTriples: [],
                           listOfUnprocessedItems: []
                         };

        //Copy the current context stack to the newly created processor state. 
        //Push the active context onto the newly created processor state's active context stack. 
        processorState['activeContext'] = JSONLDParser.parser.copyContext(state.activeContext);


        //If an associative array is detected, 
        if(JSONLDParser.parser.isAssociatveArray(token)) {

            /*
              If a @context keyword is found, the processor merges each key-value pair in the local context into the active context, 
              overwriting any duplicate values in the active context. 
              If the @coerce key is found, the processor merges each key-value pair in the local context's @coerce mapping into the active context's @coerce mapping, 
              overwriting any duplicate values in the active context's @coerce mapping. 
              Process each object in the list of unprocessed items, starting at Step 2.2.
            */
            if(token['@context'] != null) {
                processorState['activeContext'] = JSONLDParser.parser.mergeContexts(processorState['activeContext'], token['@context']);
            }


            if(token['@'] != null) {
                value = token['@'];
                // If a @ key is found, the processor sets the active subject to the value after Object Processing has been performed. 

                processorState.activeSubject = JSONLDParser.parser.parseIri(value,processorState['activeContext']);
            } else {
                processorState.activeSubject = {'token':'uri', 'value':"_:"+nodeId};
                nodeId++;
            }

            // if the inherited subject and inherited predicate values are specified, 
            // generate a triple using the inherited subject for the subject, the inherited 
            // predicate for the predicate, and the active subject for the object.
            if(processorState.inheritedPredicate != null && processorState.inheritedSubject != null) {
                triples.push({subject: processorState.inheritedSubject, predicate: processorState.inheritedPredicate, object: processorState.activeSubject});
            }


            //For each key-value pair in the associative array, using the newly created processor state do the following: 
            for(var key in token) {

                var value = token[key];

                if(key !== '@context' && key !== '@') {
                    if( key === 'a') {
                        // If an 'a' key is found, set the active predicate to http://www.w3.org/1999/02/22-rdf-syntax-ns#type. 
                        processorState.activePredicate = {token: 'uri', value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'};

                    } else {
                        //  If a key that is not @context, @, or a, set the active predicate by performing Predicate Processing on the key. 
                        processorState.activePredicate = JSONLDParser.parser.parseIri(key, processorState['activeContext']);
                    }

                    if(typeof(value) != 'object') {
                        processorState.activeObject = JSONLDParser.parser.coerceLiteral(value, processorState.activePredicate, processorState.activeContext);
                        triples.push({subject: processorState.activeSubject, predicate:processorState.activePredicate, object:processorState.activeObject});
                    } else if(value.length != null) {
                        // process new triple per object
                        JSONLDParser.parser.parseListOfNodes(value, processorState, processorState.activeSubject, processorState.activePredicate, triples, nodeId);
                    } else {
                        if(value['@iri'] != null) {
                            triples.push({subject: processorState.activeSubject, predicate: processorState.activePredicate, object: JSONLDParser.parser.parseIri(value)});
                        } else if(value['@literal'] != null) {
                            var object = null
                            if(value['@language']) {
                                obj = {'token': 'literal', 'value': value['@literal'], 'lang': value['@language']};
                            } else {
                                obj = JSONLDParser.parser.coerceLiteral(value['@literal']);
                                obj['type'] = object['type'] || value['@datatype'];
                            }

                            triples.push({subject: processorState.activeSubject, predicate: processorState.activePredicate, object: obj});                   
                        } else {
                            JSONLDParser.parser.parseListOfNodes([value], processorState, null, null, triples);
                        }
                    }
                }
            }
        } else if(typeof(token) === 'string') {
            if(processorState.inheritedPredicate != null && processorState.inheritedSubject != null) {
                triples.push({subject: processorState.inheritedSubject, 
                              predicate: processorState.inheritedPredicate, 
                              object: JSONLDParser.parser.coerceLiteral(token, 
                                                                        processorState.inheritedPredicate, 
                                                                        processorState['activeContext'])});
            }
        }
    }
};

JSONLDParser.parser.coerceLiteral = function(value, activePredicate, activeContext) {
    var coercion = null;

    for(var ns in (activeContext || {})) {
        var uri = activeContext[ns];
        if(value.indexOf(ns) === 0) {
            return {'token': 'uri',
                    'value': uri+(value.split(ns+":")[1]||"")}
        } else {
            if(uri === value) {
                return {'token': 'uri', 'value': uri};
            }
        }
    }

    for(var type in (activeContext['@coerce']||{})) {
        var propertiesToCoerce = activeContext['@coerce'][type];

        if(typeof(propertiesToCoerce) === 'string') {
            propertiesToCoerce = [ propertiesToCoerce ];
        }

        for(var ns in activeContext) {
            for(var i=0; i<propertiesToCoerce.length; i++) {                
                var expandedCoerce = propertiesToCoerce[i];
                if(expandedCoerce.indexOf(ns) === 0) {
                    expandedCoerce = expandedCoerce.split(ns+":")[1]||"";
                    expandedCoerce = activeContext[ns] + expandedCoerce;
                } 
                if(expandedCoerce === activePredicate.value) {
                    if(type === 'http://www.w3.org/2001/XMLSchema#anyURI' || type === 'xsd:anyURI') {
                        return {'token': 'uri', 'value': value}; 
                    } else {
                        return {'token': 'literal', 'value': value, 'type': type}; 
                    }
                }
            }
        }
    }

    return {'token': 'literal', 'value': value};
};

JSONLDParser.parser.isAssociatveArray = function(token) {
    return typeof(token) === 'object' && token.length == null;
};

JSONLDParser.parser.isArray = function(token) {
    return typeof(token) === 'object' && token.length != null;
};

JSONLDParser.parser.copyContext = function(currentContext) {
    var currentContextCopy = {};
    for(var p in currentContext) {
        if(p === "@coerce") {
            var coercion = currentContext[p];
            var coercionCopy = {};
            for(var c in coercion) {
                coercionCopy[c] = coercion[c];
            }
            currentContextCopy[p] = coercionCopy;
        } else {
            currentContextCopy[p] = currentContext[p];
        }
    }
    return currentContextCopy;
};

JSONLDParser.parser.mergeContexts = function(src, dst) {
    for(var p in dst) {
        if(p !== '@coerce') {
            src[p] = dst[p];
        }
    }

    if(dst["@coerce"] != null) {
        var coercion = dst["@coerce"];
        var srcCoercion = src['@coerce'] || {};
        for(var c in coercion) {
            if(typeof(coercion[c]) === 'string') {
                srcCoercion[JSONLDParser.parser.parseIri(c,src).value] = JSONLDParser.parser.parseIri(coercion[c], src).value;
            } else {
                var tmp = [];
                for(var j=0; j<coercion[c].length; j++) {
                    tmp.push(JSONLDParser.parser.parseIri(coercion[c][j], src).value);
                }
            }
        }
        src['@coerce'] = srcCoercion;
    }
    return src;
};

JSONLDParser.parser.copyContextStack = function(contextStack) {
    var newContext = [];

    for(var i=0; i<contextStack.length; i++) {
        var currentContext = contextStack[i];
        var currentContextCopy = {};
        for(var p in currentContext) {
            if(p === "@coerce") {
                var coercion = currentContext[p];
                var coercionCopy = {};
                for(var c in coercion) {
                    if(typeof(coercion[c]) === 'object') {
                        var coercionCopyArray = [];
                        for(var j=0; j<coercion[c].length; j++) {
                            coercionCopyArray.push(coercion[c][j]);
                        }
                        coercionCopy[c] = coercionCopyArray;
                    } else {
                        coercionCopy[c] = coercion[c];
                    }
                }
                currentContextCopy[p] = coercionCopy;
            } else {
                currentContextCopy[p] = currentContext[p];
            }
        }

        newContext.push(currentContextCopy);
    }

    return newContext;
}

JSONLDParser.parser.parseIri = function(object,context) {
    if(typeof(object) === 'object') {
        if(object['@iri'] != null) {
            object = object['@iri'];
        } else {
            throw("Error processing iri");
        }
    } 

    for(var c in context) {
        if(c == '@base' && object.indexOf(":") === 0) {
            return {'token': 'uri', 'value': context[c] + (object.split(":")[1]||"")};
        } else  if(object.indexOf(c) === 0) {
            return {'token': 'uri', 'value': context[c] + (object.split(c+":")[1]||"")};
        }
    }

    if(object.indexOf(":") === -1 && context['@vocab'] != null) {
        return {'token': 'uri', 'value': context['@vocab']+object};
    } else {
        if(object.indexOf(":") != -1) {
            return {'token': 'uri', 'value': object};
        } else {
            throw("Cannot resolve URI: "+object);
        }
    }
}

JSONLDParser.parser.parseObject = function(object,context) {
    if(typeof(object) === 'object') {
        if(object['@iri'] != null) {
            return {'token': 'uri','value': object['@iri']};
        } else {
            throw("Error processing iri");
        }
    } else {
        for(var c in context) {
            if(object.indexOf(c) === 0) {
                return {'token': 'uri', 'value':context[c] + (object.split(c+":")[1]||"")};
            }
        }

        return {'token': 'uri', 'value': object};
    }
}

// end of ./src/js-communication/src/jsonld_parser.js 
// exports
var RDFLoader = {};

// imports

RDFLoader.RDFLoader = function(params) {
    this.precedences = ["text/turtle", "text/n3", "application/json"];
    this.parsers = {"text/turtle": TurtleParser.parser, "text/n3":TurtleParser.parser, "application/json":JSONLDParser.parser};
    if(params != null) {
      for(var mime in params["parsers"]) {
          this.parsers[mime] = params["parsers"][mime];
      }
    }

    if(params && params["precedences"] != null) {
        this.precedences = params["precedences"];
        for(var mime in params["parsers"]) {
            if(!Utils.include(this.precedences, mime)) {
                this.precedences.push(mime);
            }
        }
    }

    this.acceptHeaderValue = "";
    for(var i=0; i<this.precedences.length; i++) {
        if(i!=0) {
            this.acceptHeaderValue = this.acceptHeaderValue + "," + this.precedences[i];
        } else {
            this.acceptHeaderValue = this.acceptHeaderValue + this.precedences[i];
        }
    }
}

RDFLoader.RDFLoader.prototype.registerParser = function(mediaType, parser) {
    this.parsers[mediaType] = parser;
    this.precedences.push(mediaType);
};

RDFLoader.RDFLoader.prototype.unregisterParser = function(mediaType) {
    delete this.parsers[mediaType];
    var mediaTypes = [];
    for(var i=0; i<this.precedences.length; i++) {
        if(this.precedences[i] != mediaType) {
            mediaTypes.push(this.precedences[i]);
        }
    }

    this.precedences = mediaTypes;
};

RDFLoader.RDFLoader.prototype.setAcceptHeaderPrecedence = function(mediaTypes) {
    this.precedences = mediaTypes;
};

RDFLoader.RDFLoader.prototype.load = function(uri, graph, callback) {
    var that = this;
    NetworkTransport.load(uri, this.acceptHeaderValue, function(success, results){
        if(success == true) {
            var mime = results["headers"]["Content-Type"] || results["headers"]["content-type"];
            var data = results['data'];
            if(mime != null) {
                mime = mime.split(";")[0]
                for(var m in that.parsers) {
                    if(m.indexOf("/")!=-1) {
                        var mimeParts = m.split("/");
                        if(mimeParts[1] === '*') {
                            if(mime.indexOf(mimeParts[0])!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            }
                        } else {
                            if(mime.indexOf(m)!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            } else if(mime.indexOf(mimeParts[1])!=-1) {
                                return that.tryToParse(that.parsers[m], graph, data, callback);
                            }
                        }
                    } else {
                        if(mime.indexOf(m)!=-1) {
                            return that.tryToParse(that.parsers[m], uri, graph, callback);
                        }
                    }
                }
                callback(false, "Unknown media type : "+mime);
            } else {
                console.log("Unknown media type");
                console.log(results["headers"]);
                callback(false, "Uknown media type");
            }
        } else {
            callback(false, "Network error: "+results);
        }});
};

RDFLoader.RDFLoader.prototype.loadFromFile = function(parser, graph, uri, callback) {
    try {
        var that = this;
        fs = require('fs');
        fs.readFile(uri.split("file:/")[1], function(err, data) {
            if(err) throw err;
            var data = data.toString('utf8');
            that.tryToParse(parser, graph, data, callback);
        });
    } catch(e) {
        callback(false, e);
    }
};

RDFLoader.RDFLoader.prototype.tryToParse = function(parser, graph, input, callback) {
    try {
        if(typeof(input) === 'string') {
            input = Utils.normalizeUnicodeLiterals(input);
        }
        var parsed = parser.parse(input, graph);

        if(parsed != null) {
            callback(true, parsed);
        } else {
            callback(false, "parsing error");
        }
    } catch(e) {
        callback(false, "parsing error with mime type : " + e);
    }
};



// var loader = require("./js-communication/src/rdf_loader").RDFLoader; loader = new loader.RDFLoader(); loader.load('http://dbpedialite.org/titles/Lisp_%28programming_language%29', function(success, results){console.log("hey"); console.log(success); console.log(results)})

// end of ./src/js-communication/src/rdf_loader.js 
// exports
var AbstractQueryTree = {};

// imports

/**
 * @doc
 *
 * Based on <http://www.w3.org/2001/sw/DataAccess/rq23/rq24-algebra.html>
 * W3C's note
 */
AbstractQueryTree.AbstractQueryTree = function(params) {
};

AbstractQueryTree.AbstractQueryTree.prototype.parseQueryString = function(query_string) {
    var syntaxTree  = SparqlParser.parser.parse(query_string);
    return syntaxTree;
};

AbstractQueryTree.AbstractQueryTree.prototype.parseExecutableUnit = function(executableUnit) {
    if(executableUnit.kind === 'select') {
        return this.parseSelect(executableUnit);
    } else if(executableUnit.kind === 'ask') {
        return this.parseSelect(executableUnit);        
    } else if(executableUnit.kind === 'modify') {
        return this.parseSelect(executableUnit);
    } else if(executableUnit.kind === 'construct') {
        return this.parseSelect(executableUnit);        
    } else if(executableUnit.kind === 'insertdata') {
        return this.parseInsertData(executableUnit);        
    } else if(executableUnit.kind === 'deletedata') {
        return this.parseInsertData(executableUnit);        
    } else if(executableUnit.kind === 'load') {
        return executableUnit;
    } else if(executableUnit.kind === 'clear') {
        return executableUnit;
    } else if(executableUnit.kind === 'drop') {
        return executableUnit;
    } else if(executableUnit.kind === 'create') {
        return executableUnit;
    } else {
        throw new Error('unknown executable unit: ' + executableUnit.kind);
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.parseSelect = function(syntaxTree){

    if(syntaxTree == null) {
        console.log("error parsing query");
        return null;
    } else {
        var env = {};
        syntaxTree.pattern = this.build(syntaxTree.pattern, env);
        return syntaxTree;
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.parseInsertData = function(syntaxTree){
    if(syntaxTree == null) {
        console.log("error parsing query");
        return null;
    } else {
        return syntaxTree;
    }
};

AbstractQueryTree.AbstractQueryTree.prototype.build = function(node, env) {
    if(node.token === 'groupgraphpattern') {
        return this._buildGroupGraphPattern(node, env);
    } else if (node.token === 'basicgraphpattern') {
        return { kind: 'BGP',
                 value: node.triplesContext };
    } else if (node.token === 'graphunionpattern') {
        var a = this.build(node.value[0],env);
        var b = this.build(node.value[1],env);

        return { kind: 'UNION',
                 value: [a,b] };
    } else if(node.token === 'graphgraphpattern') {
        var c = this.build(node.value, env);
        return { kind: 'GRAPH',
                 value: c,
                 graph: node.graph };
    } else {
        throw new Error("not supported token in query:"+node.token);
    }
};

AbstractQueryTree.AbstractQueryTree.prototype._buildGroupGraphPattern = function(node, env) {
    var f = (node.filters || []);
    var g = {kind: "EMPTY_PATTERN"};

    for(var i=0; i<node.patterns.length; i++) {
        var pattern = node.patterns[i];
        if(pattern.token === 'optionalgraphpattern') {
            var parsedPattern = this.build(pattern.value,env);
            if(parsedPattern.kind === 'FILTER') {
                g =  { kind:'LEFT_JOIN',
                       lvalue: g,
                       rvalue: parsedPattern.value,
                       filter: parsedPattern.filter }
            } else {
                g = { kind:'LEFT_JOIN',
                      lvalue: g,
                      rvalue: parsedPattern,
                      filter: true };
            }
        } else {
            var parsedPattern = this.build(pattern,env);
            if(g.kind == "EMPTY_PATTERN") {
                g = parsedPattern;
            } else {
                g = { kind: 'JOIN',
                      lvalue: g,
                      rvalue: parsedPattern };
            }
        }
    }

    if(f.length != 0) {
        if(g.kind === 'EMPTY_PATTERN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'LEFT_JOIN' && g.filter === true) {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};

//            g.filter = f;
//            return g;
        } else if(g.kind === 'LEFT_JOIN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'JOIN') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'UNION') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'GRAPH') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else if(g.kind === 'BGP') {
            return { kind: 'FILTER',
                     filter: f,
                     value: g};
        } else {
            throw new Error("Unknow kind of algebra expression: "+ g.kind);
        }
    } else {
        return g;
    }
};

/**
 * Collects basic triple pattern in a complex SPARQL AQT
 */
AbstractQueryTree.AbstractQueryTree.prototype.collectBasicTriples = function(aqt, acum) {
    if(acum == null) {
        acum = [];
    }

    if(aqt.kind === 'select') {
        acum = this.collectBasicTriples(aqt.pattern,acum);
    } else if(aqt.kind === 'BGP') {
        acum = acum.concat(aqt.value);
    } else if(aqt.kind === 'UNION') {
        acum = this.collectBasicTriples(aqt.value[0],acum);
        acum = this.collectBasicTriples(aqt.value[1],acum);
    } else if(aqt.kind === 'GRAPH') {
        acum = this.collectBasicTriples(aqt.value,acum);
    } else if(aqt.kind === 'LEFT_JOIN' || aqt.kind === 'JOIN') {
        acum = this.collectBasicTriples(aqt.lvalue, acum);
        acum = this.collectBasicTriples(aqt.rvalue, acum);
    } else if(aqt.kind === 'FILTER') {
        acum = this.collectBasicTriples(aqt.value, acum);
    } else if(aqt.kind === 'EMPTY_PATTERN') {
        // nothing
    } else {
        throw "Unknown pattern: "+aqt.kind;
    }

    return acum;
};

// end of ./src/js-sparql-parser/src/abstract_query_tree.js 
// exports
var SparqlParser = {};

SparqlParser.parser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "ANON": parse_ANON,
        "AdditiveExpression": parse_AdditiveExpression,
        "Aggregate": parse_Aggregate,
        "ArgList": parse_ArgList,
        "AskQuery": parse_AskQuery,
        "BLANK_NODE_LABEL": parse_BLANK_NODE_LABEL,
        "BaseDecl": parse_BaseDecl,
        "BindingValue": parse_BindingValue,
        "BindingsClause": parse_BindingsClause,
        "BlankNode": parse_BlankNode,
        "BlankNodePropertyList": parse_BlankNodePropertyList,
        "BooleanLiteral": parse_BooleanLiteral,
        "BrackettedExpression": parse_BrackettedExpression,
        "BuiltInCall": parse_BuiltInCall,
        "COMMENT": parse_COMMENT,
        "Clear": parse_Clear,
        "Collection": parse_Collection,
        "ConditionalAndExpression": parse_ConditionalAndExpression,
        "ConditionalOrExpression": parse_ConditionalOrExpression,
        "Constraint": parse_Constraint,
        "ConstructQuery": parse_ConstructQuery,
        "ConstructTemplate": parse_ConstructTemplate,
        "ConstructTriples": parse_ConstructTriples,
        "Create": parse_Create,
        "DECIMAL": parse_DECIMAL,
        "DECIMAL_NEGATIVE": parse_DECIMAL_NEGATIVE,
        "DECIMAL_POSITIVE": parse_DECIMAL_POSITIVE,
        "DOUBLE": parse_DOUBLE,
        "DOUBLE_NEGATIVE": parse_DOUBLE_NEGATIVE,
        "DOUBLE_POSITIVE": parse_DOUBLE_POSITIVE,
        "DatasetClause": parse_DatasetClause,
        "DefaultGraphClause": parse_DefaultGraphClause,
        "DeleteClause": parse_DeleteClause,
        "DeleteData": parse_DeleteData,
        "DeleteWhere": parse_DeleteWhere,
        "DescribeQuery": parse_DescribeQuery,
        "Drop": parse_Drop,
        "ECHAR": parse_ECHAR,
        "EXPONENT": parse_EXPONENT,
        "ExistsFunc": parse_ExistsFunc,
        "ExpressionList": parse_ExpressionList,
        "Filter": parse_Filter,
        "FunctionCall": parse_FunctionCall,
        "GraphGraphPattern": parse_GraphGraphPattern,
        "GraphNode": parse_GraphNode,
        "GraphPatternNotTriples": parse_GraphPatternNotTriples,
        "GraphRef": parse_GraphRef,
        "GraphRefAll": parse_GraphRefAll,
        "GraphTerm": parse_GraphTerm,
        "GroupClause": parse_GroupClause,
        "GroupCondition": parse_GroupCondition,
        "GroupGraphPattern": parse_GroupGraphPattern,
        "GroupGraphPatternSub": parse_GroupGraphPatternSub,
        "GroupOrUnionGraphPattern": parse_GroupOrUnionGraphPattern,
        "HavingClause": parse_HavingClause,
        "INTEGER": parse_INTEGER,
        "INTEGER_NEGATIVE": parse_INTEGER_NEGATIVE,
        "INTEGER_POSITIVE": parse_INTEGER_POSITIVE,
        "IRI_REF": parse_IRI_REF,
        "IRIref": parse_IRIref,
        "IRIrefOrFunction": parse_IRIrefOrFunction,
        "InsertClause": parse_InsertClause,
        "InsertData": parse_InsertData,
        "LANGTAG": parse_LANGTAG,
        "LimitClause": parse_LimitClause,
        "LimitOffsetClauses": parse_LimitOffsetClauses,
        "Load": parse_Load,
        "MinusGraphPattern": parse_MinusGraphPattern,
        "Modify": parse_Modify,
        "MultiplicativeExpression": parse_MultiplicativeExpression,
        "NIL": parse_NIL,
        "NamedGraphClause": parse_NamedGraphClause,
        "NotExistsFunc": parse_NotExistsFunc,
        "NumericLiteral": parse_NumericLiteral,
        "NumericLiteralNegative": parse_NumericLiteralNegative,
        "NumericLiteralPositive": parse_NumericLiteralPositive,
        "NumericLiteralUnsigned": parse_NumericLiteralUnsigned,
        "ObjectList": parse_ObjectList,
        "OffsetClause": parse_OffsetClause,
        "OptionalGraphPattern": parse_OptionalGraphPattern,
        "OrderClause": parse_OrderClause,
        "OrderCondition": parse_OrderCondition,
        "PNAME_LN": parse_PNAME_LN,
        "PNAME_NS": parse_PNAME_NS,
        "PN_CHARS": parse_PN_CHARS,
        "PN_CHARS_BASE": parse_PN_CHARS_BASE,
        "PN_CHARS_U": parse_PN_CHARS_U,
        "PN_LOCAL": parse_PN_LOCAL,
        "PN_PREFIX": parse_PN_PREFIX,
        "PathAlternative": parse_PathAlternative,
        "PathElt": parse_PathElt,
        "PathEltOrInverse": parse_PathEltOrInverse,
        "PathMod": parse_PathMod,
        "PathNegatedPropertySet": parse_PathNegatedPropertySet,
        "PathOneInPropertySet": parse_PathOneInPropertySet,
        "PathPrimary": parse_PathPrimary,
        "PathSequence": parse_PathSequence,
        "PrefixDecl": parse_PrefixDecl,
        "PrefixedName": parse_PrefixedName,
        "PrimaryExpression": parse_PrimaryExpression,
        "Prologue": parse_Prologue,
        "PropertyList": parse_PropertyList,
        "PropertyListNotEmpty": parse_PropertyListNotEmpty,
        "PropertyListNotEmptyPath": parse_PropertyListNotEmptyPath,
        "PropertyListPath": parse_PropertyListPath,
        "QuadData": parse_QuadData,
        "QuadPattern": parse_QuadPattern,
        "Quads": parse_Quads,
        "QuadsNotTriples": parse_QuadsNotTriples,
        "Query": parse_Query,
        "RDFLiteral": parse_RDFLiteral,
        "RegexExpression": parse_RegexExpression,
        "RelationalExpression": parse_RelationalExpression,
        "SPARQL": parse_SPARQL,
        "STRING_LITERAL1": parse_STRING_LITERAL1,
        "STRING_LITERAL2": parse_STRING_LITERAL2,
        "STRING_LITERAL_LONG1": parse_STRING_LITERAL_LONG1,
        "STRING_LITERAL_LONG2": parse_STRING_LITERAL_LONG2,
        "SelectClause": parse_SelectClause,
        "SelectQuery": parse_SelectQuery,
        "ServiceGraphPattern": parse_ServiceGraphPattern,
        "SolutionModifier": parse_SolutionModifier,
        "String": parse_String,
        "SubSelect": parse_SubSelect,
        "TriplesBlock": parse_TriplesBlock,
        "TriplesNode": parse_TriplesNode,
        "TriplesSameSubject": parse_TriplesSameSubject,
        "TriplesTemplate": parse_TriplesTemplate,
        "UnaryExpression": parse_UnaryExpression,
        "Update": parse_Update,
        "Update1": parse_Update1,
        "UsingClause": parse_UsingClause,
        "VAR1": parse_VAR1,
        "VAR2": parse_VAR2,
        "VARNAME": parse_VARNAME,
        "Var": parse_Var,
        "VarOrIRIref": parse_VarOrIRIref,
        "VarOrTerm": parse_VarOrTerm,
        "Verb": parse_Verb,
        "VerbPath": parse_VerbPath,
        "WS": parse_WS,
        "WhereClause": parse_WhereClause
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "SPARQL";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_SPARQL() {
        var cacheKey = 'SPARQL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_Query();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_Update();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Query() {
        var cacheKey = 'Query@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Prologue();
        if (result2 !== null) {
          var result7 = parse_SelectQuery();
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_ConstructQuery();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_DescribeQuery();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_AskQuery();
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, q) {
                return {token: 'query',
                        kind: 'query',
                        prologue: p,
                        units: [q]};
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[2] Query");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Prologue() {
        var cacheKey = 'Prologue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result7 = parse_BaseDecl();
        var result2 = result7 !== null ? result7 : '';
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_WS();
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = parse_PrefixDecl();
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_PrefixDecl();
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, pfx) {
                return { token: 'prologue',
                         base: b,
                         prefixes: pfx }
          })(result1[0], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[3] Prologue");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BaseDecl() {
        var cacheKey = 'BaseDecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result18 = parse_WS();
        while (result18 !== null) {
          result2.push(result18);
          var result18 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "B") {
            var result17 = "B";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"B\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            if (input.substr(pos, 1) === "b") {
              var result16 = "b";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"b\"");
              }
            }
            if (result16 !== null) {
              var result3 = result16;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "A") {
              var result15 = "A";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"A\"");
              }
            }
            if (result15 !== null) {
              var result4 = result15;
            } else {
              if (input.substr(pos, 1) === "a") {
                var result14 = "a";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "S") {
                var result13 = "S";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"S\"");
                }
              }
              if (result13 !== null) {
                var result5 = result13;
              } else {
                if (input.substr(pos, 1) === "s") {
                  var result12 = "s";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"s\"");
                  }
                }
                if (result12 !== null) {
                  var result5 = result12;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "E") {
                  var result11 = "E";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E\"");
                  }
                }
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  if (input.substr(pos, 1) === "e") {
                    var result10 = "e";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"e\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_WS();
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_IRI_REF();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
                registerDefaultPrefix(i);
          
                base = {};
                base.token = 'base';
                base.value = i;
          
                return base;
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[4] BaseDecl");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixDecl() {
        var cacheKey = 'PrefixDecl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result27 = parse_WS();
        while (result27 !== null) {
          result2.push(result27);
          var result27 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "P") {
            var result26 = "P";
            pos += 1;
          } else {
            var result26 = null;
            if (reportMatchFailures) {
              matchFailed("\"P\"");
            }
          }
          if (result26 !== null) {
            var result3 = result26;
          } else {
            if (input.substr(pos, 1) === "p") {
              var result25 = "p";
              pos += 1;
            } else {
              var result25 = null;
              if (reportMatchFailures) {
                matchFailed("\"p\"");
              }
            }
            if (result25 !== null) {
              var result3 = result25;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "R") {
              var result24 = "R";
              pos += 1;
            } else {
              var result24 = null;
              if (reportMatchFailures) {
                matchFailed("\"R\"");
              }
            }
            if (result24 !== null) {
              var result4 = result24;
            } else {
              if (input.substr(pos, 1) === "r") {
                var result23 = "r";
                pos += 1;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("\"r\"");
                }
              }
              if (result23 !== null) {
                var result4 = result23;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result22 = "E";
                pos += 1;
              } else {
                var result22 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result22 !== null) {
                var result5 = result22;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result21 = "e";
                  pos += 1;
                } else {
                  var result21 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result21 !== null) {
                  var result5 = result21;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "F") {
                  var result20 = "F";
                  pos += 1;
                } else {
                  var result20 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"F\"");
                  }
                }
                if (result20 !== null) {
                  var result6 = result20;
                } else {
                  if (input.substr(pos, 1) === "f") {
                    var result19 = "f";
                    pos += 1;
                  } else {
                    var result19 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"f\"");
                    }
                  }
                  if (result19 !== null) {
                    var result6 = result19;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "I") {
                    var result18 = "I";
                    pos += 1;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"I\"");
                    }
                  }
                  if (result18 !== null) {
                    var result7 = result18;
                  } else {
                    if (input.substr(pos, 1) === "i") {
                      var result17 = "i";
                      pos += 1;
                    } else {
                      var result17 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"i\"");
                      }
                    }
                    if (result17 !== null) {
                      var result7 = result17;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "X") {
                      var result16 = "X";
                      pos += 1;
                    } else {
                      var result16 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"X\"");
                      }
                    }
                    if (result16 !== null) {
                      var result8 = result16;
                    } else {
                      if (input.substr(pos, 1) === "x") {
                        var result15 = "x";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"x\"");
                        }
                      }
                      if (result15 !== null) {
                        var result8 = result15;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      var result9 = [];
                      var result14 = parse_WS();
                      while (result14 !== null) {
                        result9.push(result14);
                        var result14 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result10 = parse_PNAME_NS();
                        if (result10 !== null) {
                          var result11 = [];
                          var result13 = parse_WS();
                          while (result13 !== null) {
                            result11.push(result13);
                            var result13 = parse_WS();
                          }
                          if (result11 !== null) {
                            var result12 = parse_IRI_REF();
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, l) {
          
                registerPrefix(p,l);
          
                prefix = {};
                prefix.token = 'prefix';
                prefix.prefix = p;
                prefix.local = l;
          
                return prefix;
          })(result1[8], result1[10])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[5] PrefixDecl");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SelectQuery() {
        var cacheKey = 'SelectQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_SelectClause();
        if (result2 !== null) {
          var result3 = [];
          var result15 = parse_WS();
          while (result15 !== null) {
            result3.push(result15);
            var result15 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = [];
            var result14 = parse_DatasetClause();
            while (result14 !== null) {
              result4.push(result14);
              var result14 = parse_DatasetClause();
            }
            if (result4 !== null) {
              var result5 = [];
              var result13 = parse_WS();
              while (result13 !== null) {
                result5.push(result13);
                var result13 = parse_WS();
              }
              if (result5 !== null) {
                var result6 = parse_WhereClause();
                if (result6 !== null) {
                  var result7 = [];
                  var result12 = parse_WS();
                  while (result12 !== null) {
                    result7.push(result12);
                    var result12 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_SolutionModifier();
                    if (result8 !== null) {
                      var result9 = [];
                      var result11 = parse_WS();
                      while (result11 !== null) {
                        result9.push(result11);
                        var result11 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result10 = parse_BindingsClause();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, gs, w, sm) {
          
                var dataset = {'named':[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'select';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.projection = s.vars;
                query.modifier = s.modifier;
                query.pattern = w
                
                if(sm!=null && sm.limit!=null) {
                    query.limit = sm.limit;
                }
                if(sm!=null && sm.offset!=null) {
                    query.offset = sm.offset;
                }
                if(sm!=null && (sm.order!=null && sm.order!="")) {
                    query.order = sm.order;
                }
                if(sm!=null && sm.group!=null) {
                    query.group = sm.group;
                }
          
                return query
          })(result1[0], result1[2], result1[4], result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[6] SelectQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SubSelect() {
        var cacheKey = 'SubSelect@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_SelectClause();
        if (result1 !== null) {
          var result2 = parse_WhereClause();
          if (result2 !== null) {
            var result3 = parse_SolutionModifier();
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[7] SubSelect");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SelectClause() {
        var cacheKey = 'SelectClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result112 = parse_WS();
        while (result112 !== null) {
          result2.push(result112);
          var result112 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "S") {
            var result111 = "S";
            pos += 1;
          } else {
            var result111 = null;
            if (reportMatchFailures) {
              matchFailed("\"S\"");
            }
          }
          if (result111 !== null) {
            var result3 = result111;
          } else {
            if (input.substr(pos, 1) === "s") {
              var result110 = "s";
              pos += 1;
            } else {
              var result110 = null;
              if (reportMatchFailures) {
                matchFailed("\"s\"");
              }
            }
            if (result110 !== null) {
              var result3 = result110;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "E") {
              var result109 = "E";
              pos += 1;
            } else {
              var result109 = null;
              if (reportMatchFailures) {
                matchFailed("\"E\"");
              }
            }
            if (result109 !== null) {
              var result4 = result109;
            } else {
              if (input.substr(pos, 1) === "e") {
                var result108 = "e";
                pos += 1;
              } else {
                var result108 = null;
                if (reportMatchFailures) {
                  matchFailed("\"e\"");
                }
              }
              if (result108 !== null) {
                var result4 = result108;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "L") {
                var result107 = "L";
                pos += 1;
              } else {
                var result107 = null;
                if (reportMatchFailures) {
                  matchFailed("\"L\"");
                }
              }
              if (result107 !== null) {
                var result5 = result107;
              } else {
                if (input.substr(pos, 1) === "l") {
                  var result106 = "l";
                  pos += 1;
                } else {
                  var result106 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"l\"");
                  }
                }
                if (result106 !== null) {
                  var result5 = result106;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "E") {
                  var result105 = "E";
                  pos += 1;
                } else {
                  var result105 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E\"");
                  }
                }
                if (result105 !== null) {
                  var result6 = result105;
                } else {
                  if (input.substr(pos, 1) === "e") {
                    var result104 = "e";
                    pos += 1;
                  } else {
                    var result104 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"e\"");
                    }
                  }
                  if (result104 !== null) {
                    var result6 = result104;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "C") {
                    var result103 = "C";
                    pos += 1;
                  } else {
                    var result103 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"C\"");
                    }
                  }
                  if (result103 !== null) {
                    var result7 = result103;
                  } else {
                    if (input.substr(pos, 1) === "c") {
                      var result102 = "c";
                      pos += 1;
                    } else {
                      var result102 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"c\"");
                      }
                    }
                    if (result102 !== null) {
                      var result7 = result102;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "T") {
                      var result101 = "T";
                      pos += 1;
                    } else {
                      var result101 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"T\"");
                      }
                    }
                    if (result101 !== null) {
                      var result8 = result101;
                    } else {
                      if (input.substr(pos, 1) === "t") {
                        var result100 = "t";
                        pos += 1;
                      } else {
                        var result100 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"t\"");
                        }
                      }
                      if (result100 !== null) {
                        var result8 = result100;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      var result9 = [];
                      var result99 = parse_WS();
                      while (result99 !== null) {
                        result9.push(result99);
                        var result99 = parse_WS();
                      }
                      if (result9 !== null) {
                        var savedPos5 = pos;
                        if (input.substr(pos, 1) === "D") {
                          var result98 = "D";
                          pos += 1;
                        } else {
                          var result98 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"D\"");
                          }
                        }
                        if (result98 !== null) {
                          var result75 = result98;
                        } else {
                          if (input.substr(pos, 1) === "d") {
                            var result97 = "d";
                            pos += 1;
                          } else {
                            var result97 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"d\"");
                            }
                          }
                          if (result97 !== null) {
                            var result75 = result97;
                          } else {
                            var result75 = null;;
                          };
                        }
                        if (result75 !== null) {
                          if (input.substr(pos, 1) === "I") {
                            var result96 = "I";
                            pos += 1;
                          } else {
                            var result96 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"I\"");
                            }
                          }
                          if (result96 !== null) {
                            var result76 = result96;
                          } else {
                            if (input.substr(pos, 1) === "i") {
                              var result95 = "i";
                              pos += 1;
                            } else {
                              var result95 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"i\"");
                              }
                            }
                            if (result95 !== null) {
                              var result76 = result95;
                            } else {
                              var result76 = null;;
                            };
                          }
                          if (result76 !== null) {
                            if (input.substr(pos, 1) === "S") {
                              var result94 = "S";
                              pos += 1;
                            } else {
                              var result94 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"S\"");
                              }
                            }
                            if (result94 !== null) {
                              var result77 = result94;
                            } else {
                              if (input.substr(pos, 1) === "s") {
                                var result93 = "s";
                                pos += 1;
                              } else {
                                var result93 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"s\"");
                                }
                              }
                              if (result93 !== null) {
                                var result77 = result93;
                              } else {
                                var result77 = null;;
                              };
                            }
                            if (result77 !== null) {
                              if (input.substr(pos, 1) === "T") {
                                var result92 = "T";
                                pos += 1;
                              } else {
                                var result92 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"T\"");
                                }
                              }
                              if (result92 !== null) {
                                var result78 = result92;
                              } else {
                                if (input.substr(pos, 1) === "t") {
                                  var result91 = "t";
                                  pos += 1;
                                } else {
                                  var result91 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"t\"");
                                  }
                                }
                                if (result91 !== null) {
                                  var result78 = result91;
                                } else {
                                  var result78 = null;;
                                };
                              }
                              if (result78 !== null) {
                                if (input.substr(pos, 1) === "I") {
                                  var result90 = "I";
                                  pos += 1;
                                } else {
                                  var result90 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"I\"");
                                  }
                                }
                                if (result90 !== null) {
                                  var result79 = result90;
                                } else {
                                  if (input.substr(pos, 1) === "i") {
                                    var result89 = "i";
                                    pos += 1;
                                  } else {
                                    var result89 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"i\"");
                                    }
                                  }
                                  if (result89 !== null) {
                                    var result79 = result89;
                                  } else {
                                    var result79 = null;;
                                  };
                                }
                                if (result79 !== null) {
                                  if (input.substr(pos, 1) === "N") {
                                    var result88 = "N";
                                    pos += 1;
                                  } else {
                                    var result88 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"N\"");
                                    }
                                  }
                                  if (result88 !== null) {
                                    var result80 = result88;
                                  } else {
                                    if (input.substr(pos, 1) === "n") {
                                      var result87 = "n";
                                      pos += 1;
                                    } else {
                                      var result87 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"n\"");
                                      }
                                    }
                                    if (result87 !== null) {
                                      var result80 = result87;
                                    } else {
                                      var result80 = null;;
                                    };
                                  }
                                  if (result80 !== null) {
                                    if (input.substr(pos, 1) === "C") {
                                      var result86 = "C";
                                      pos += 1;
                                    } else {
                                      var result86 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"C\"");
                                      }
                                    }
                                    if (result86 !== null) {
                                      var result81 = result86;
                                    } else {
                                      if (input.substr(pos, 1) === "c") {
                                        var result85 = "c";
                                        pos += 1;
                                      } else {
                                        var result85 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"c\"");
                                        }
                                      }
                                      if (result85 !== null) {
                                        var result81 = result85;
                                      } else {
                                        var result81 = null;;
                                      };
                                    }
                                    if (result81 !== null) {
                                      if (input.substr(pos, 1) === "T") {
                                        var result84 = "T";
                                        pos += 1;
                                      } else {
                                        var result84 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"T\"");
                                        }
                                      }
                                      if (result84 !== null) {
                                        var result82 = result84;
                                      } else {
                                        if (input.substr(pos, 1) === "t") {
                                          var result83 = "t";
                                          pos += 1;
                                        } else {
                                          var result83 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"t\"");
                                          }
                                        }
                                        if (result83 !== null) {
                                          var result82 = result83;
                                        } else {
                                          var result82 = null;;
                                        };
                                      }
                                      if (result82 !== null) {
                                        var result74 = [result75, result76, result77, result78, result79, result80, result81, result82];
                                      } else {
                                        var result74 = null;
                                        pos = savedPos5;
                                      }
                                    } else {
                                      var result74 = null;
                                      pos = savedPos5;
                                    }
                                  } else {
                                    var result74 = null;
                                    pos = savedPos5;
                                  }
                                } else {
                                  var result74 = null;
                                  pos = savedPos5;
                                }
                              } else {
                                var result74 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result74 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result74 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result74 = null;
                          pos = savedPos5;
                        }
                        if (result74 !== null) {
                          var result51 = result74;
                        } else {
                          var savedPos4 = pos;
                          if (input.substr(pos, 1) === "R") {
                            var result73 = "R";
                            pos += 1;
                          } else {
                            var result73 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"R\"");
                            }
                          }
                          if (result73 !== null) {
                            var result53 = result73;
                          } else {
                            if (input.substr(pos, 1) === "r") {
                              var result72 = "r";
                              pos += 1;
                            } else {
                              var result72 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"r\"");
                              }
                            }
                            if (result72 !== null) {
                              var result53 = result72;
                            } else {
                              var result53 = null;;
                            };
                          }
                          if (result53 !== null) {
                            if (input.substr(pos, 1) === "E") {
                              var result71 = "E";
                              pos += 1;
                            } else {
                              var result71 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"E\"");
                              }
                            }
                            if (result71 !== null) {
                              var result54 = result71;
                            } else {
                              if (input.substr(pos, 1) === "e") {
                                var result70 = "e";
                                pos += 1;
                              } else {
                                var result70 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"e\"");
                                }
                              }
                              if (result70 !== null) {
                                var result54 = result70;
                              } else {
                                var result54 = null;;
                              };
                            }
                            if (result54 !== null) {
                              if (input.substr(pos, 1) === "D") {
                                var result69 = "D";
                                pos += 1;
                              } else {
                                var result69 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"D\"");
                                }
                              }
                              if (result69 !== null) {
                                var result55 = result69;
                              } else {
                                if (input.substr(pos, 1) === "d") {
                                  var result68 = "d";
                                  pos += 1;
                                } else {
                                  var result68 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"d\"");
                                  }
                                }
                                if (result68 !== null) {
                                  var result55 = result68;
                                } else {
                                  var result55 = null;;
                                };
                              }
                              if (result55 !== null) {
                                if (input.substr(pos, 1) === "U") {
                                  var result67 = "U";
                                  pos += 1;
                                } else {
                                  var result67 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"U\"");
                                  }
                                }
                                if (result67 !== null) {
                                  var result56 = result67;
                                } else {
                                  if (input.substr(pos, 1) === "u") {
                                    var result66 = "u";
                                    pos += 1;
                                  } else {
                                    var result66 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"u\"");
                                    }
                                  }
                                  if (result66 !== null) {
                                    var result56 = result66;
                                  } else {
                                    var result56 = null;;
                                  };
                                }
                                if (result56 !== null) {
                                  if (input.substr(pos, 1) === "C") {
                                    var result65 = "C";
                                    pos += 1;
                                  } else {
                                    var result65 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"C\"");
                                    }
                                  }
                                  if (result65 !== null) {
                                    var result57 = result65;
                                  } else {
                                    if (input.substr(pos, 1) === "c") {
                                      var result64 = "c";
                                      pos += 1;
                                    } else {
                                      var result64 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"c\"");
                                      }
                                    }
                                    if (result64 !== null) {
                                      var result57 = result64;
                                    } else {
                                      var result57 = null;;
                                    };
                                  }
                                  if (result57 !== null) {
                                    if (input.substr(pos, 1) === "E") {
                                      var result63 = "E";
                                      pos += 1;
                                    } else {
                                      var result63 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"E\"");
                                      }
                                    }
                                    if (result63 !== null) {
                                      var result58 = result63;
                                    } else {
                                      if (input.substr(pos, 1) === "e") {
                                        var result62 = "e";
                                        pos += 1;
                                      } else {
                                        var result62 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"e\"");
                                        }
                                      }
                                      if (result62 !== null) {
                                        var result58 = result62;
                                      } else {
                                        var result58 = null;;
                                      };
                                    }
                                    if (result58 !== null) {
                                      if (input.substr(pos, 1) === "D") {
                                        var result61 = "D";
                                        pos += 1;
                                      } else {
                                        var result61 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"D\"");
                                        }
                                      }
                                      if (result61 !== null) {
                                        var result59 = result61;
                                      } else {
                                        if (input.substr(pos, 1) === "d") {
                                          var result60 = "d";
                                          pos += 1;
                                        } else {
                                          var result60 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"d\"");
                                          }
                                        }
                                        if (result60 !== null) {
                                          var result59 = result60;
                                        } else {
                                          var result59 = null;;
                                        };
                                      }
                                      if (result59 !== null) {
                                        var result52 = [result53, result54, result55, result56, result57, result58, result59];
                                      } else {
                                        var result52 = null;
                                        pos = savedPos4;
                                      }
                                    } else {
                                      var result52 = null;
                                      pos = savedPos4;
                                    }
                                  } else {
                                    var result52 = null;
                                    pos = savedPos4;
                                  }
                                } else {
                                  var result52 = null;
                                  pos = savedPos4;
                                }
                              } else {
                                var result52 = null;
                                pos = savedPos4;
                              }
                            } else {
                              var result52 = null;
                              pos = savedPos4;
                            }
                          } else {
                            var result52 = null;
                            pos = savedPos4;
                          }
                          if (result52 !== null) {
                            var result51 = result52;
                          } else {
                            var result51 = null;;
                          };
                        }
                        var result10 = result51 !== null ? result51 : '';
                        if (result10 !== null) {
                          var result11 = [];
                          var result50 = parse_WS();
                          while (result50 !== null) {
                            result11.push(result50);
                            var result50 = parse_WS();
                          }
                          if (result11 !== null) {
                            var savedPos3 = pos;
                            var result45 = [];
                            var result49 = parse_WS();
                            while (result49 !== null) {
                              result45.push(result49);
                              var result49 = parse_WS();
                            }
                            if (result45 !== null) {
                              var result46 = parse_Var();
                              if (result46 !== null) {
                                var result47 = [];
                                var result48 = parse_WS();
                                while (result48 !== null) {
                                  result47.push(result48);
                                  var result48 = parse_WS();
                                }
                                if (result47 !== null) {
                                  var result44 = [result45, result46, result47];
                                } else {
                                  var result44 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result44 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result44 = null;
                              pos = savedPos3;
                            }
                            if (result44 !== null) {
                              var result20 = result44;
                            } else {
                              var savedPos2 = pos;
                              var result22 = [];
                              var result43 = parse_WS();
                              while (result43 !== null) {
                                result22.push(result43);
                                var result43 = parse_WS();
                              }
                              if (result22 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                  var result23 = "(";
                                  pos += 1;
                                } else {
                                  var result23 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                  }
                                }
                                if (result23 !== null) {
                                  var result24 = [];
                                  var result42 = parse_WS();
                                  while (result42 !== null) {
                                    result24.push(result42);
                                    var result42 = parse_WS();
                                  }
                                  if (result24 !== null) {
                                    var result25 = parse_ConditionalOrExpression();
                                    if (result25 !== null) {
                                      var result26 = [];
                                      var result41 = parse_WS();
                                      while (result41 !== null) {
                                        result26.push(result41);
                                        var result41 = parse_WS();
                                      }
                                      if (result26 !== null) {
                                        if (input.substr(pos, 1) === "A") {
                                          var result40 = "A";
                                          pos += 1;
                                        } else {
                                          var result40 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"A\"");
                                          }
                                        }
                                        if (result40 !== null) {
                                          var result27 = result40;
                                        } else {
                                          if (input.substr(pos, 1) === "a") {
                                            var result39 = "a";
                                            pos += 1;
                                          } else {
                                            var result39 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"a\"");
                                            }
                                          }
                                          if (result39 !== null) {
                                            var result27 = result39;
                                          } else {
                                            var result27 = null;;
                                          };
                                        }
                                        if (result27 !== null) {
                                          if (input.substr(pos, 1) === "S") {
                                            var result38 = "S";
                                            pos += 1;
                                          } else {
                                            var result38 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"S\"");
                                            }
                                          }
                                          if (result38 !== null) {
                                            var result28 = result38;
                                          } else {
                                            if (input.substr(pos, 1) === "s") {
                                              var result37 = "s";
                                              pos += 1;
                                            } else {
                                              var result37 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"s\"");
                                              }
                                            }
                                            if (result37 !== null) {
                                              var result28 = result37;
                                            } else {
                                              var result28 = null;;
                                            };
                                          }
                                          if (result28 !== null) {
                                            var result29 = [];
                                            var result36 = parse_WS();
                                            while (result36 !== null) {
                                              result29.push(result36);
                                              var result36 = parse_WS();
                                            }
                                            if (result29 !== null) {
                                              var result30 = parse_Var();
                                              if (result30 !== null) {
                                                var result31 = [];
                                                var result35 = parse_WS();
                                                while (result35 !== null) {
                                                  result31.push(result35);
                                                  var result35 = parse_WS();
                                                }
                                                if (result31 !== null) {
                                                  if (input.substr(pos, 1) === ")") {
                                                    var result32 = ")";
                                                    pos += 1;
                                                  } else {
                                                    var result32 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\")\"");
                                                    }
                                                  }
                                                  if (result32 !== null) {
                                                    var result33 = [];
                                                    var result34 = parse_WS();
                                                    while (result34 !== null) {
                                                      result33.push(result34);
                                                      var result34 = parse_WS();
                                                    }
                                                    if (result33 !== null) {
                                                      var result21 = [result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33];
                                                    } else {
                                                      var result21 = null;
                                                      pos = savedPos2;
                                                    }
                                                  } else {
                                                    var result21 = null;
                                                    pos = savedPos2;
                                                  }
                                                } else {
                                                  var result21 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result21 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result21 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result21 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result21 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result21 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result21 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result21 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result21 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result21 = null;
                                pos = savedPos2;
                              }
                              if (result21 !== null) {
                                var result20 = result21;
                              } else {
                                var result20 = null;;
                              };
                            }
                            if (result20 !== null) {
                              var result19 = [];
                              while (result20 !== null) {
                                result19.push(result20);
                                var savedPos3 = pos;
                                var result45 = [];
                                var result49 = parse_WS();
                                while (result49 !== null) {
                                  result45.push(result49);
                                  var result49 = parse_WS();
                                }
                                if (result45 !== null) {
                                  var result46 = parse_Var();
                                  if (result46 !== null) {
                                    var result47 = [];
                                    var result48 = parse_WS();
                                    while (result48 !== null) {
                                      result47.push(result48);
                                      var result48 = parse_WS();
                                    }
                                    if (result47 !== null) {
                                      var result44 = [result45, result46, result47];
                                    } else {
                                      var result44 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result44 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result44 = null;
                                  pos = savedPos3;
                                }
                                if (result44 !== null) {
                                  var result20 = result44;
                                } else {
                                  var savedPos2 = pos;
                                  var result22 = [];
                                  var result43 = parse_WS();
                                  while (result43 !== null) {
                                    result22.push(result43);
                                    var result43 = parse_WS();
                                  }
                                  if (result22 !== null) {
                                    if (input.substr(pos, 1) === "(") {
                                      var result23 = "(";
                                      pos += 1;
                                    } else {
                                      var result23 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                      }
                                    }
                                    if (result23 !== null) {
                                      var result24 = [];
                                      var result42 = parse_WS();
                                      while (result42 !== null) {
                                        result24.push(result42);
                                        var result42 = parse_WS();
                                      }
                                      if (result24 !== null) {
                                        var result25 = parse_ConditionalOrExpression();
                                        if (result25 !== null) {
                                          var result26 = [];
                                          var result41 = parse_WS();
                                          while (result41 !== null) {
                                            result26.push(result41);
                                            var result41 = parse_WS();
                                          }
                                          if (result26 !== null) {
                                            if (input.substr(pos, 1) === "A") {
                                              var result40 = "A";
                                              pos += 1;
                                            } else {
                                              var result40 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"A\"");
                                              }
                                            }
                                            if (result40 !== null) {
                                              var result27 = result40;
                                            } else {
                                              if (input.substr(pos, 1) === "a") {
                                                var result39 = "a";
                                                pos += 1;
                                              } else {
                                                var result39 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"a\"");
                                                }
                                              }
                                              if (result39 !== null) {
                                                var result27 = result39;
                                              } else {
                                                var result27 = null;;
                                              };
                                            }
                                            if (result27 !== null) {
                                              if (input.substr(pos, 1) === "S") {
                                                var result38 = "S";
                                                pos += 1;
                                              } else {
                                                var result38 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"S\"");
                                                }
                                              }
                                              if (result38 !== null) {
                                                var result28 = result38;
                                              } else {
                                                if (input.substr(pos, 1) === "s") {
                                                  var result37 = "s";
                                                  pos += 1;
                                                } else {
                                                  var result37 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"s\"");
                                                  }
                                                }
                                                if (result37 !== null) {
                                                  var result28 = result37;
                                                } else {
                                                  var result28 = null;;
                                                };
                                              }
                                              if (result28 !== null) {
                                                var result29 = [];
                                                var result36 = parse_WS();
                                                while (result36 !== null) {
                                                  result29.push(result36);
                                                  var result36 = parse_WS();
                                                }
                                                if (result29 !== null) {
                                                  var result30 = parse_Var();
                                                  if (result30 !== null) {
                                                    var result31 = [];
                                                    var result35 = parse_WS();
                                                    while (result35 !== null) {
                                                      result31.push(result35);
                                                      var result35 = parse_WS();
                                                    }
                                                    if (result31 !== null) {
                                                      if (input.substr(pos, 1) === ")") {
                                                        var result32 = ")";
                                                        pos += 1;
                                                      } else {
                                                        var result32 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\")\"");
                                                        }
                                                      }
                                                      if (result32 !== null) {
                                                        var result33 = [];
                                                        var result34 = parse_WS();
                                                        while (result34 !== null) {
                                                          result33.push(result34);
                                                          var result34 = parse_WS();
                                                        }
                                                        if (result33 !== null) {
                                                          var result21 = [result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33];
                                                        } else {
                                                          var result21 = null;
                                                          pos = savedPos2;
                                                        }
                                                      } else {
                                                        var result21 = null;
                                                        pos = savedPos2;
                                                      }
                                                    } else {
                                                      var result21 = null;
                                                      pos = savedPos2;
                                                    }
                                                  } else {
                                                    var result21 = null;
                                                    pos = savedPos2;
                                                  }
                                                } else {
                                                  var result21 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result21 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result21 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result21 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result21 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result21 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result21 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result21 = null;
                                    pos = savedPos2;
                                  }
                                  if (result21 !== null) {
                                    var result20 = result21;
                                  } else {
                                    var result20 = null;;
                                  };
                                }
                              }
                            } else {
                              var result19 = null;
                            }
                            if (result19 !== null) {
                              var result12 = result19;
                            } else {
                              var savedPos1 = pos;
                              var result14 = [];
                              var result18 = parse_WS();
                              while (result18 !== null) {
                                result14.push(result18);
                                var result18 = parse_WS();
                              }
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === "*") {
                                  var result15 = "*";
                                  pos += 1;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"*\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result16 = [];
                                  var result17 = parse_WS();
                                  while (result17 !== null) {
                                    result16.push(result17);
                                    var result17 = parse_WS();
                                  }
                                  if (result16 !== null) {
                                    var result13 = [result14, result15, result16];
                                  } else {
                                    var result13 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result13 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result13 = null;
                                pos = savedPos1;
                              }
                              if (result13 !== null) {
                                var result12 = result13;
                              } else {
                                var result12 = null;;
                              };
                            }
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(mod, proj) {
               var vars = [];
                if(proj.length === 3 && proj[1]==="*") {
                    return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
                }
          
                for(var i=0; i< proj.length; i++) {
                    var aVar = proj[i];
          
                    if(aVar.length === 3) {
                        vars.push({token: 'variable', kind:'var', value:aVar[1]});
                    } else {
                        vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[8]})
                    }
                }
          
                return {vars: vars, modifier:arrayToString(mod)};
          })(result1[8], result1[10])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[8] SelectClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructQuery() {
        var cacheKey = 'ConstructQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result43 = parse_WS();
        while (result43 !== null) {
          result2.push(result43);
          var result43 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "C") {
            var result42 = "C";
            pos += 1;
          } else {
            var result42 = null;
            if (reportMatchFailures) {
              matchFailed("\"C\"");
            }
          }
          if (result42 !== null) {
            var result3 = result42;
          } else {
            if (input.substr(pos, 1) === "c") {
              var result41 = "c";
              pos += 1;
            } else {
              var result41 = null;
              if (reportMatchFailures) {
                matchFailed("\"c\"");
              }
            }
            if (result41 !== null) {
              var result3 = result41;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "O") {
              var result40 = "O";
              pos += 1;
            } else {
              var result40 = null;
              if (reportMatchFailures) {
                matchFailed("\"O\"");
              }
            }
            if (result40 !== null) {
              var result4 = result40;
            } else {
              if (input.substr(pos, 1) === "o") {
                var result39 = "o";
                pos += 1;
              } else {
                var result39 = null;
                if (reportMatchFailures) {
                  matchFailed("\"o\"");
                }
              }
              if (result39 !== null) {
                var result4 = result39;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "N") {
                var result38 = "N";
                pos += 1;
              } else {
                var result38 = null;
                if (reportMatchFailures) {
                  matchFailed("\"N\"");
                }
              }
              if (result38 !== null) {
                var result5 = result38;
              } else {
                if (input.substr(pos, 1) === "n") {
                  var result37 = "n";
                  pos += 1;
                } else {
                  var result37 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"n\"");
                  }
                }
                if (result37 !== null) {
                  var result5 = result37;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "S") {
                  var result36 = "S";
                  pos += 1;
                } else {
                  var result36 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"S\"");
                  }
                }
                if (result36 !== null) {
                  var result6 = result36;
                } else {
                  if (input.substr(pos, 1) === "s") {
                    var result35 = "s";
                    pos += 1;
                  } else {
                    var result35 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"s\"");
                    }
                  }
                  if (result35 !== null) {
                    var result6 = result35;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "T") {
                    var result34 = "T";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (result34 !== null) {
                    var result7 = result34;
                  } else {
                    if (input.substr(pos, 1) === "t") {
                      var result33 = "t";
                      pos += 1;
                    } else {
                      var result33 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"t\"");
                      }
                    }
                    if (result33 !== null) {
                      var result7 = result33;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "R") {
                      var result32 = "R";
                      pos += 1;
                    } else {
                      var result32 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"R\"");
                      }
                    }
                    if (result32 !== null) {
                      var result8 = result32;
                    } else {
                      if (input.substr(pos, 1) === "r") {
                        var result31 = "r";
                        pos += 1;
                      } else {
                        var result31 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"r\"");
                        }
                      }
                      if (result31 !== null) {
                        var result8 = result31;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "U") {
                        var result30 = "U";
                        pos += 1;
                      } else {
                        var result30 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"U\"");
                        }
                      }
                      if (result30 !== null) {
                        var result9 = result30;
                      } else {
                        if (input.substr(pos, 1) === "u") {
                          var result29 = "u";
                          pos += 1;
                        } else {
                          var result29 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"u\"");
                          }
                        }
                        if (result29 !== null) {
                          var result9 = result29;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "C") {
                          var result28 = "C";
                          pos += 1;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"C\"");
                          }
                        }
                        if (result28 !== null) {
                          var result10 = result28;
                        } else {
                          if (input.substr(pos, 1) === "c") {
                            var result27 = "c";
                            pos += 1;
                          } else {
                            var result27 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"c\"");
                            }
                          }
                          if (result27 !== null) {
                            var result10 = result27;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "T") {
                            var result26 = "T";
                            pos += 1;
                          } else {
                            var result26 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"T\"");
                            }
                          }
                          if (result26 !== null) {
                            var result11 = result26;
                          } else {
                            if (input.substr(pos, 1) === "t") {
                              var result25 = "t";
                              pos += 1;
                            } else {
                              var result25 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"t\"");
                              }
                            }
                            if (result25 !== null) {
                              var result11 = result25;
                            } else {
                              var result11 = null;;
                            };
                          }
                          if (result11 !== null) {
                            var result12 = [];
                            var result24 = parse_WS();
                            while (result24 !== null) {
                              result12.push(result24);
                              var result24 = parse_WS();
                            }
                            if (result12 !== null) {
                              var result13 = parse_ConstructTemplate();
                              if (result13 !== null) {
                                var result14 = [];
                                var result23 = parse_WS();
                                while (result23 !== null) {
                                  result14.push(result23);
                                  var result23 = parse_WS();
                                }
                                if (result14 !== null) {
                                  var result15 = [];
                                  var result22 = parse_DatasetClause();
                                  while (result22 !== null) {
                                    result15.push(result22);
                                    var result22 = parse_DatasetClause();
                                  }
                                  if (result15 !== null) {
                                    var result16 = [];
                                    var result21 = parse_WS();
                                    while (result21 !== null) {
                                      result16.push(result21);
                                      var result21 = parse_WS();
                                    }
                                    if (result16 !== null) {
                                      var result17 = parse_WhereClause();
                                      if (result17 !== null) {
                                        var result18 = [];
                                        var result20 = parse_WS();
                                        while (result20 !== null) {
                                          result18.push(result20);
                                          var result20 = parse_WS();
                                        }
                                        if (result18 !== null) {
                                          var result19 = parse_SolutionModifier();
                                          if (result19 !== null) {
                                            var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                          } else {
                                            var result1 = null;
                                            pos = savedPos0;
                                          }
                                        } else {
                                          var result1 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(t, gs, w, sm) {
                var dataset = {named:[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'construct';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.template = t;
                query.pattern = w
                
                if(sm!=null && sm.limit!=null) {
                    query.limit = sm.limit;
                }
                if(sm!=null && sm.offset!=null) {
                    query.offset = sm.offset;
                }
                if(sm!=null && (sm.order!=null && sm.order!="")) {
                    query.order = sm.order;
                }
                return query
          
          })(result1[11], result1[13], result1[15], result1[17])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[9] ConstructQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DescribeQuery() {
        var cacheKey = 'DescribeQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "DESCRIBE") {
          var result1 = "DESCRIBE";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"DESCRIBE\"");
          }
        }
        if (result1 !== null) {
          var result10 = parse_VarOrIRIref();
          if (result10 !== null) {
            var result9 = [];
            while (result10 !== null) {
              result9.push(result10);
              var result10 = parse_VarOrIRIref();
            }
          } else {
            var result9 = null;
          }
          if (result9 !== null) {
            var result2 = result9;
          } else {
            if (input.substr(pos, 1) === "*") {
              var result8 = "*";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result8 !== null) {
              var result2 = result8;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result3 = [];
            var result7 = parse_DatasetClause();
            while (result7 !== null) {
              result3.push(result7);
              var result7 = parse_DatasetClause();
            }
            if (result3 !== null) {
              var result6 = parse_WhereClause();
              var result4 = result6 !== null ? result6 : '';
              if (result4 !== null) {
                var result5 = parse_SolutionModifier();
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[10] DescribeQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AskQuery() {
        var cacheKey = 'AskQuery@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result19 = parse_WS();
        while (result19 !== null) {
          result2.push(result19);
          var result19 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "A") {
            var result18 = "A";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"A\"");
            }
          }
          if (result18 !== null) {
            var result3 = result18;
          } else {
            if (input.substr(pos, 1) === "a") {
              var result17 = "a";
              pos += 1;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"a\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "S") {
              var result16 = "S";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"S\"");
              }
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              if (input.substr(pos, 1) === "s") {
                var result15 = "s";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"s\"");
                }
              }
              if (result15 !== null) {
                var result4 = result15;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "K") {
                var result14 = "K";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"K\"");
                }
              }
              if (result14 !== null) {
                var result5 = result14;
              } else {
                if (input.substr(pos, 1) === "k") {
                  var result13 = "k";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"k\"");
                  }
                }
                if (result13 !== null) {
                  var result5 = result13;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                var result6 = [];
                var result12 = parse_WS();
                while (result12 !== null) {
                  result6.push(result12);
                  var result12 = parse_WS();
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result11 = parse_DatasetClause();
                  while (result11 !== null) {
                    result7.push(result11);
                    var result11 = parse_DatasetClause();
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result8.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result9 = parse_WhereClause();
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gs, w) {
                var dataset = {'named':[], 'default':[]};
                for(var i=0; i<gs.length; i++) {
                    var g = gs[i];
                    if(g.kind === 'default') {
                        dataset['default'].push(g.graph);
                    } else {
                        dataset['named'].push(g.graph)
                    }
                }
          
          
                if(dataset['named'].length === 0 && dataset['default'].length === 0) {
                    dataset['default'].push({token:'uri', 
                                             prefix:null, 
                                             suffix:null, 
                                             value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                }
          
                var query = {};
                query.kind = 'ask';
                query.token = 'executableunit'
                query.dataset = dataset;
                query.pattern = w
          
                return query
          })(result1[5], result1[7])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[11] AskQuery");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DatasetClause() {
        var cacheKey = 'DatasetClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "F") {
          var result20 = "F";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"F\"");
          }
        }
        if (result20 !== null) {
          var result2 = result20;
        } else {
          if (input.substr(pos, 1) === "f") {
            var result19 = "f";
            pos += 1;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"f\"");
            }
          }
          if (result19 !== null) {
            var result2 = result19;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result18 = "R";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result18 !== null) {
            var result3 = result18;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result17 = "r";
              pos += 1;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "O") {
              var result16 = "O";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"O\"");
              }
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              if (input.substr(pos, 1) === "o") {
                var result15 = "o";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"o\"");
                }
              }
              if (result15 !== null) {
                var result4 = result15;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "M") {
                var result14 = "M";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"M\"");
                }
              }
              if (result14 !== null) {
                var result5 = result14;
              } else {
                if (input.substr(pos, 1) === "m") {
                  var result13 = "m";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"m\"");
                  }
                }
                if (result13 !== null) {
                  var result5 = result13;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                var result6 = [];
                var result12 = parse_WS();
                while (result12 !== null) {
                  result6.push(result12);
                  var result12 = parse_WS();
                }
                if (result6 !== null) {
                  var result11 = parse_DefaultGraphClause();
                  if (result11 !== null) {
                    var result7 = result11;
                  } else {
                    var result10 = parse_NamedGraphClause();
                    if (result10 !== null) {
                      var result7 = result10;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gs) {
                return gs;
          })(result1[5])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[12] DatasetClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DefaultGraphClause() {
        var cacheKey = 'DefaultGraphClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result4 = parse_WS();
        while (result4 !== null) {
          result2.push(result4);
          var result4 = parse_WS();
        }
        if (result2 !== null) {
          var result3 = parse_IRIref();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {
              return {graph:s , kind:'default', token:'graphClause'}
          })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[13] DefaultGraphClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NamedGraphClause() {
        var cacheKey = 'NamedGraphClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "N") {
          var result19 = "N";
          pos += 1;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("\"N\"");
          }
        }
        if (result19 !== null) {
          var result2 = result19;
        } else {
          if (input.substr(pos, 1) === "n") {
            var result18 = "n";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"n\"");
            }
          }
          if (result18 !== null) {
            var result2 = result18;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "A") {
            var result17 = "A";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"A\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            if (input.substr(pos, 1) === "a") {
              var result16 = "a";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"a\"");
              }
            }
            if (result16 !== null) {
              var result3 = result16;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "M") {
              var result15 = "M";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"M\"");
              }
            }
            if (result15 !== null) {
              var result4 = result15;
            } else {
              if (input.substr(pos, 1) === "m") {
                var result14 = "m";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"m\"");
                }
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result13 = "E";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result13 !== null) {
                var result5 = result13;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result12 = "e";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result12 !== null) {
                  var result5 = result12;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "D") {
                  var result11 = "D";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"D\"");
                  }
                }
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  if (input.substr(pos, 1) === "d") {
                    var result10 = "d";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"d\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_WS();
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_IRIref();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s) {      
                return {graph:s, kind:'named', token:'graphCluase'};
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[14] NamedGraphClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhereClause() {
        var cacheKey = 'WhereClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "W") {
          var result23 = "W";
          pos += 1;
        } else {
          var result23 = null;
          if (reportMatchFailures) {
            matchFailed("\"W\"");
          }
        }
        if (result23 !== null) {
          var result9 = result23;
        } else {
          if (input.substr(pos, 1) === "w") {
            var result22 = "w";
            pos += 1;
          } else {
            var result22 = null;
            if (reportMatchFailures) {
              matchFailed("\"w\"");
            }
          }
          if (result22 !== null) {
            var result9 = result22;
          } else {
            var result9 = null;;
          };
        }
        if (result9 !== null) {
          if (input.substr(pos, 1) === "H") {
            var result21 = "H";
            pos += 1;
          } else {
            var result21 = null;
            if (reportMatchFailures) {
              matchFailed("\"H\"");
            }
          }
          if (result21 !== null) {
            var result10 = result21;
          } else {
            if (input.substr(pos, 1) === "h") {
              var result20 = "h";
              pos += 1;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"h\"");
              }
            }
            if (result20 !== null) {
              var result10 = result20;
            } else {
              var result10 = null;;
            };
          }
          if (result10 !== null) {
            if (input.substr(pos, 1) === "E") {
              var result19 = "E";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"E\"");
              }
            }
            if (result19 !== null) {
              var result11 = result19;
            } else {
              if (input.substr(pos, 1) === "e") {
                var result18 = "e";
                pos += 1;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"e\"");
                }
              }
              if (result18 !== null) {
                var result11 = result18;
              } else {
                var result11 = null;;
              };
            }
            if (result11 !== null) {
              if (input.substr(pos, 1) === "R") {
                var result17 = "R";
                pos += 1;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\"R\"");
                }
              }
              if (result17 !== null) {
                var result12 = result17;
              } else {
                if (input.substr(pos, 1) === "r") {
                  var result16 = "r";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"r\"");
                  }
                }
                if (result16 !== null) {
                  var result12 = result16;
                } else {
                  var result12 = null;;
                };
              }
              if (result12 !== null) {
                if (input.substr(pos, 1) === "E") {
                  var result15 = "E";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E\"");
                  }
                }
                if (result15 !== null) {
                  var result13 = result15;
                } else {
                  if (input.substr(pos, 1) === "e") {
                    var result14 = "e";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"e\"");
                    }
                  }
                  if (result14 !== null) {
                    var result13 = result14;
                  } else {
                    var result13 = null;;
                  };
                }
                if (result13 !== null) {
                  var result8 = [result9, result10, result11, result12, result13];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result2 = result8 !== null ? result8 : '';
        if (result2 !== null) {
          var result3 = [];
          var result7 = parse_WS();
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_GroupGraphPattern();
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_WS();
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WS();
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g) {
                return g;
          })(result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[16] WhereClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SolutionModifier() {
        var cacheKey = 'SolutionModifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result9 = parse_GroupClause();
        var result2 = result9 !== null ? result9 : '';
        if (result2 !== null) {
          var result8 = parse_HavingClause();
          var result3 = result8 !== null ? result8 : '';
          if (result3 !== null) {
            var result7 = parse_OrderClause();
            var result4 = result7 !== null ? result7 : '';
            if (result4 !== null) {
              var result6 = parse_LimitOffsetClauses();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gc, oc, lo) {
                var acum = {};
                if(lo != null) {
                    if(lo.limit != null) {
                        acum.limit = lo.limit;
                    } 
                    if(lo.offset != null) {
                        acum.offset = lo.offset;
                    }
                }
          
                if(gc != null) {
                    acum.group = gc;
                }
          
                acum.order = oc;
          
                return acum
          })(result1[0], result1[2], result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[17] SolutionModifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupClause() {
        var cacheKey = 'GroupClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "G") {
          var result28 = "G";
          pos += 1;
        } else {
          var result28 = null;
          if (reportMatchFailures) {
            matchFailed("\"G\"");
          }
        }
        if (result28 !== null) {
          var result2 = result28;
        } else {
          if (input.substr(pos, 1) === "g") {
            var result27 = "g";
            pos += 1;
          } else {
            var result27 = null;
            if (reportMatchFailures) {
              matchFailed("\"g\"");
            }
          }
          if (result27 !== null) {
            var result2 = result27;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result26 = "R";
            pos += 1;
          } else {
            var result26 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result26 !== null) {
            var result3 = result26;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result25 = "r";
              pos += 1;
            } else {
              var result25 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result25 !== null) {
              var result3 = result25;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "O") {
              var result24 = "O";
              pos += 1;
            } else {
              var result24 = null;
              if (reportMatchFailures) {
                matchFailed("\"O\"");
              }
            }
            if (result24 !== null) {
              var result4 = result24;
            } else {
              if (input.substr(pos, 1) === "o") {
                var result23 = "o";
                pos += 1;
              } else {
                var result23 = null;
                if (reportMatchFailures) {
                  matchFailed("\"o\"");
                }
              }
              if (result23 !== null) {
                var result4 = result23;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "U") {
                var result22 = "U";
                pos += 1;
              } else {
                var result22 = null;
                if (reportMatchFailures) {
                  matchFailed("\"U\"");
                }
              }
              if (result22 !== null) {
                var result5 = result22;
              } else {
                if (input.substr(pos, 1) === "u") {
                  var result21 = "u";
                  pos += 1;
                } else {
                  var result21 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"u\"");
                  }
                }
                if (result21 !== null) {
                  var result5 = result21;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "P") {
                  var result20 = "P";
                  pos += 1;
                } else {
                  var result20 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"P\"");
                  }
                }
                if (result20 !== null) {
                  var result6 = result20;
                } else {
                  if (input.substr(pos, 1) === "p") {
                    var result19 = "p";
                    pos += 1;
                  } else {
                    var result19 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"p\"");
                    }
                  }
                  if (result19 !== null) {
                    var result6 = result19;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result18 = parse_WS();
                  while (result18 !== null) {
                    result7.push(result18);
                    var result18 = parse_WS();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "B") {
                      var result17 = "B";
                      pos += 1;
                    } else {
                      var result17 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"B\"");
                      }
                    }
                    if (result17 !== null) {
                      var result8 = result17;
                    } else {
                      if (input.substr(pos, 1) === "b") {
                        var result16 = "b";
                        pos += 1;
                      } else {
                        var result16 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"b\"");
                        }
                      }
                      if (result16 !== null) {
                        var result8 = result16;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "Y") {
                        var result15 = "Y";
                        pos += 1;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"Y\"");
                        }
                      }
                      if (result15 !== null) {
                        var result9 = result15;
                      } else {
                        if (input.substr(pos, 1) === "y") {
                          var result14 = "y";
                          pos += 1;
                        } else {
                          var result14 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"y\"");
                          }
                        }
                        if (result14 !== null) {
                          var result9 = result14;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        var result10 = [];
                        var result13 = parse_WS();
                        while (result13 !== null) {
                          result10.push(result13);
                          var result13 = parse_WS();
                        }
                        if (result10 !== null) {
                          var result12 = parse_GroupCondition();
                          if (result12 !== null) {
                            var result11 = [];
                            while (result12 !== null) {
                              result11.push(result12);
                              var result12 = parse_GroupCondition();
                            }
                          } else {
                            var result11 = null;
                          }
                          if (result11 !== null) {
                            var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(conds) {
                return conds;
          })(result1[9])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[18] GroupClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupCondition() {
        var cacheKey = 'GroupCondition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var result43 = [];
        var result47 = parse_WS();
        while (result47 !== null) {
          result43.push(result47);
          var result47 = parse_WS();
        }
        if (result43 !== null) {
          var result44 = parse_BuiltInCall();
          if (result44 !== null) {
            var result45 = [];
            var result46 = parse_WS();
            while (result46 !== null) {
              result45.push(result46);
              var result46 = parse_WS();
            }
            if (result45 !== null) {
              var result42 = [result43, result44, result45];
            } else {
              var result42 = null;
              pos = savedPos4;
            }
          } else {
            var result42 = null;
            pos = savedPos4;
          }
        } else {
          var result42 = null;
          pos = savedPos4;
        }
        var result41 = result42 !== null
          ? (function(b) {
                return b;
          })(result42[1])
          : null;
        if (result41 !== null) {
          var result0 = result41;
        } else {
          var savedPos3 = pos;
          var result36 = [];
          var result40 = parse_WS();
          while (result40 !== null) {
            result36.push(result40);
            var result40 = parse_WS();
          }
          if (result36 !== null) {
            var result37 = parse_FunctionCall();
            if (result37 !== null) {
              var result38 = [];
              var result39 = parse_WS();
              while (result39 !== null) {
                result38.push(result39);
                var result39 = parse_WS();
              }
              if (result38 !== null) {
                var result35 = [result36, result37, result38];
              } else {
                var result35 = null;
                pos = savedPos3;
              }
            } else {
              var result35 = null;
              pos = savedPos3;
            }
          } else {
            var result35 = null;
            pos = savedPos3;
          }
          var result34 = result35 !== null
            ? (function(f) {
                  return f;
            })(result35[1])
            : null;
          if (result34 !== null) {
            var result0 = result34;
          } else {
            var savedPos1 = pos;
            var result10 = [];
            var result33 = parse_WS();
            while (result33 !== null) {
              result10.push(result33);
              var result33 = parse_WS();
            }
            if (result10 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result11 = "(";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result11 !== null) {
                var result12 = [];
                var result32 = parse_WS();
                while (result32 !== null) {
                  result12.push(result32);
                  var result32 = parse_WS();
                }
                if (result12 !== null) {
                  var result13 = parse_ConditionalOrExpression();
                  if (result13 !== null) {
                    var result14 = [];
                    var result31 = parse_WS();
                    while (result31 !== null) {
                      result14.push(result31);
                      var result31 = parse_WS();
                    }
                    if (result14 !== null) {
                      var savedPos2 = pos;
                      if (input.substr(pos, 1) === "A") {
                        var result30 = "A";
                        pos += 1;
                      } else {
                        var result30 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"A\"");
                        }
                      }
                      if (result30 !== null) {
                        var result22 = result30;
                      } else {
                        if (input.substr(pos, 1) === "a") {
                          var result29 = "a";
                          pos += 1;
                        } else {
                          var result29 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"a\"");
                          }
                        }
                        if (result29 !== null) {
                          var result22 = result29;
                        } else {
                          var result22 = null;;
                        };
                      }
                      if (result22 !== null) {
                        if (input.substr(pos, 1) === "S") {
                          var result28 = "S";
                          pos += 1;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"S\"");
                          }
                        }
                        if (result28 !== null) {
                          var result23 = result28;
                        } else {
                          if (input.substr(pos, 1) === "s") {
                            var result27 = "s";
                            pos += 1;
                          } else {
                            var result27 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"s\"");
                            }
                          }
                          if (result27 !== null) {
                            var result23 = result27;
                          } else {
                            var result23 = null;;
                          };
                        }
                        if (result23 !== null) {
                          var result24 = [];
                          var result26 = parse_WS();
                          while (result26 !== null) {
                            result24.push(result26);
                            var result26 = parse_WS();
                          }
                          if (result24 !== null) {
                            var result25 = parse_Var();
                            if (result25 !== null) {
                              var result21 = [result22, result23, result24, result25];
                            } else {
                              var result21 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result21 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result21 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result21 = null;
                        pos = savedPos2;
                      }
                      var result15 = result21 !== null ? result21 : '';
                      if (result15 !== null) {
                        var result16 = [];
                        var result20 = parse_WS();
                        while (result20 !== null) {
                          result16.push(result20);
                          var result20 = parse_WS();
                        }
                        if (result16 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result17 = ")";
                            pos += 1;
                          } else {
                            var result17 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result17 !== null) {
                            var result18 = [];
                            var result19 = parse_WS();
                            while (result19 !== null) {
                              result18.push(result19);
                              var result19 = parse_WS();
                            }
                            if (result18 !== null) {
                              var result9 = [result10, result11, result12, result13, result14, result15, result16, result17, result18];
                            } else {
                              var result9 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
            var result8 = result9 !== null
              ? (function(e, alias) {
                    if(alias.length != 0) {
                        return {token: 'aliased_expression',
                                expression: e,
                                alias: alias[3] };
                    } else {
                        return e;
                    }
              })(result9[3], result9[5])
              : null;
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var savedPos0 = pos;
              var result3 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result3.push(result7);
                var result7 = parse_WS();
              }
              if (result3 !== null) {
                var result4 = parse_Var();
                if (result4 !== null) {
                  var result5 = [];
                  var result6 = parse_WS();
                  while (result6 !== null) {
                    result5.push(result6);
                    var result6 = parse_WS();
                  }
                  if (result5 !== null) {
                    var result2 = [result3, result4, result5];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function(v) {
                      return v;
                })(result2[1])
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[19] GroupCondition");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HavingClause() {
        var cacheKey = 'HavingClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "HAVING") {
          var result1 = "HAVING";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"HAVING\"");
          }
        }
        if (result1 !== null) {
          var result3 = parse_Constraint();
          if (result3 !== null) {
            var result2 = [];
            while (result3 !== null) {
              result2.push(result3);
              var result3 = parse_Constraint();
            }
          } else {
            var result2 = null;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[20] HavingClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrderClause() {
        var cacheKey = 'OrderClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "O") {
          var result30 = "O";
          pos += 1;
        } else {
          var result30 = null;
          if (reportMatchFailures) {
            matchFailed("\"O\"");
          }
        }
        if (result30 !== null) {
          var result2 = result30;
        } else {
          if (input.substr(pos, 1) === "o") {
            var result29 = "o";
            pos += 1;
          } else {
            var result29 = null;
            if (reportMatchFailures) {
              matchFailed("\"o\"");
            }
          }
          if (result29 !== null) {
            var result2 = result29;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result28 = "R";
            pos += 1;
          } else {
            var result28 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result28 !== null) {
            var result3 = result28;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result27 = "r";
              pos += 1;
            } else {
              var result27 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result27 !== null) {
              var result3 = result27;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "D") {
              var result26 = "D";
              pos += 1;
            } else {
              var result26 = null;
              if (reportMatchFailures) {
                matchFailed("\"D\"");
              }
            }
            if (result26 !== null) {
              var result4 = result26;
            } else {
              if (input.substr(pos, 1) === "d") {
                var result25 = "d";
                pos += 1;
              } else {
                var result25 = null;
                if (reportMatchFailures) {
                  matchFailed("\"d\"");
                }
              }
              if (result25 !== null) {
                var result4 = result25;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result24 = "E";
                pos += 1;
              } else {
                var result24 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result24 !== null) {
                var result5 = result24;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result23 = "e";
                  pos += 1;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result23 !== null) {
                  var result5 = result23;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "R") {
                  var result22 = "R";
                  pos += 1;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"R\"");
                  }
                }
                if (result22 !== null) {
                  var result6 = result22;
                } else {
                  if (input.substr(pos, 1) === "r") {
                    var result21 = "r";
                    pos += 1;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"r\"");
                    }
                  }
                  if (result21 !== null) {
                    var result6 = result21;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result20 = parse_WS();
                  while (result20 !== null) {
                    result7.push(result20);
                    var result20 = parse_WS();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "B") {
                      var result19 = "B";
                      pos += 1;
                    } else {
                      var result19 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"B\"");
                      }
                    }
                    if (result19 !== null) {
                      var result8 = result19;
                    } else {
                      if (input.substr(pos, 1) === "b") {
                        var result18 = "b";
                        pos += 1;
                      } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"b\"");
                        }
                      }
                      if (result18 !== null) {
                        var result8 = result18;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "Y") {
                        var result17 = "Y";
                        pos += 1;
                      } else {
                        var result17 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"Y\"");
                        }
                      }
                      if (result17 !== null) {
                        var result9 = result17;
                      } else {
                        if (input.substr(pos, 1) === "y") {
                          var result16 = "y";
                          pos += 1;
                        } else {
                          var result16 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"y\"");
                          }
                        }
                        if (result16 !== null) {
                          var result9 = result16;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        var result10 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                          result10.push(result15);
                          var result15 = parse_WS();
                        }
                        if (result10 !== null) {
                          var result14 = parse_OrderCondition();
                          if (result14 !== null) {
                            var result11 = [];
                            while (result14 !== null) {
                              result11.push(result14);
                              var result14 = parse_OrderCondition();
                            }
                          } else {
                            var result11 = null;
                          }
                          if (result11 !== null) {
                            var result12 = [];
                            var result13 = parse_WS();
                            while (result13 !== null) {
                              result12.push(result13);
                              var result13 = parse_WS();
                            }
                            if (result12 !== null) {
                              var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(os) {
                return os;
          })(result1[9])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[22] OrderClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OrderCondition() {
        var cacheKey = 'OrderCondition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "ASC") {
          var result17 = "ASC";
          pos += 3;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"ASC\"");
          }
        }
        if (result17 !== null) {
          var result10 = result17;
        } else {
          if (input.substr(pos, 4) === "DESC") {
            var result16 = "DESC";
            pos += 4;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"DESC\"");
            }
          }
          if (result16 !== null) {
            var result10 = result16;
          } else {
            var result10 = null;;
          };
        }
        if (result10 !== null) {
          var result11 = [];
          var result15 = parse_WS();
          while (result15 !== null) {
            result11.push(result15);
            var result15 = parse_WS();
          }
          if (result11 !== null) {
            var result12 = parse_BrackettedExpression();
            if (result12 !== null) {
              var result13 = [];
              var result14 = parse_WS();
              while (result14 !== null) {
                result13.push(result14);
                var result14 = parse_WS();
              }
              if (result13 !== null) {
                var result9 = [result10, result11, result12, result13];
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(direction, e) {
                return { direction: direction, expression:e };
          })(result9[0], result9[2])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result7 = parse_Constraint();
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_Var();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            var result4 = [];
            var result5 = parse_WS();
            while (result5 !== null) {
              result4.push(result5);
              var result5 = parse_WS();
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(e) {
                if(e.token === 'var') {
                    e = { token:'expression', 
                          expressionType:'atomic',
                          primaryexpression: 'var',
                          value: e };
                }
                return { direction: 'ASC', expression:e };
            })(result2[0])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[23] OrderCondition");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LimitOffsetClauses() {
        var cacheKey = 'LimitOffsetClauses@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result7 = parse_LimitClause();
        if (result7 !== null) {
          var result9 = parse_OffsetClause();
          var result8 = result9 !== null ? result9 : '';
          if (result8 !== null) {
            var result6 = [result7, result8];
          } else {
            var result6 = null;
            pos = savedPos1;
          }
        } else {
          var result6 = null;
          pos = savedPos1;
        }
        if (result6 !== null) {
          var result1 = result6;
        } else {
          var savedPos0 = pos;
          var result3 = parse_OffsetClause();
          if (result3 !== null) {
            var result5 = parse_LimitClause();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(cls) {
                var acum = {};
                for(var i=0; i<cls.length; i++) {
                    var cl = cls[i];
                    if(cl.limit != null) {
                        acum['limit'] = cl.limit;
                    } else if(cl.offset != null){
                        acum['offset'] = cl.offset;
                    }
                }
          
                return acum;
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[24] LimitOffsetClauses");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LimitClause() {
        var cacheKey = 'LimitClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "L") {
          var result21 = "L";
          pos += 1;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"L\"");
          }
        }
        if (result21 !== null) {
          var result2 = result21;
        } else {
          if (input.substr(pos, 1) === "l") {
            var result20 = "l";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"l\"");
            }
          }
          if (result20 !== null) {
            var result2 = result20;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "I") {
            var result19 = "I";
            pos += 1;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"I\"");
            }
          }
          if (result19 !== null) {
            var result3 = result19;
          } else {
            if (input.substr(pos, 1) === "i") {
              var result18 = "i";
              pos += 1;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("\"i\"");
              }
            }
            if (result18 !== null) {
              var result3 = result18;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "M") {
              var result17 = "M";
              pos += 1;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"M\"");
              }
            }
            if (result17 !== null) {
              var result4 = result17;
            } else {
              if (input.substr(pos, 1) === "m") {
                var result16 = "m";
                pos += 1;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"m\"");
                }
              }
              if (result16 !== null) {
                var result4 = result16;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "I") {
                var result15 = "I";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"I\"");
                }
              }
              if (result15 !== null) {
                var result5 = result15;
              } else {
                if (input.substr(pos, 1) === "i") {
                  var result14 = "i";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"i\"");
                  }
                }
                if (result14 !== null) {
                  var result5 = result14;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result13 = "T";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result13 !== null) {
                  var result6 = result13;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result12 = "t";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result12 !== null) {
                    var result6 = result12;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result11 = parse_WS();
                  while (result11 !== null) {
                    result7.push(result11);
                    var result11 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_INTEGER();
                    if (result8 !== null) {
                      var result9 = [];
                      var result10 = parse_WS();
                      while (result10 !== null) {
                        result9.push(result10);
                        var result10 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
            return { limit:parseInt(i.value) };
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[25] LimitClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OffsetClause() {
        var cacheKey = 'OffsetClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "O") {
          var result24 = "O";
          pos += 1;
        } else {
          var result24 = null;
          if (reportMatchFailures) {
            matchFailed("\"O\"");
          }
        }
        if (result24 !== null) {
          var result2 = result24;
        } else {
          if (input.substr(pos, 1) === "o") {
            var result23 = "o";
            pos += 1;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("\"o\"");
            }
          }
          if (result23 !== null) {
            var result2 = result23;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "F") {
            var result22 = "F";
            pos += 1;
          } else {
            var result22 = null;
            if (reportMatchFailures) {
              matchFailed("\"F\"");
            }
          }
          if (result22 !== null) {
            var result3 = result22;
          } else {
            if (input.substr(pos, 1) === "f") {
              var result21 = "f";
              pos += 1;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"f\"");
              }
            }
            if (result21 !== null) {
              var result3 = result21;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "F") {
              var result20 = "F";
              pos += 1;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"F\"");
              }
            }
            if (result20 !== null) {
              var result4 = result20;
            } else {
              if (input.substr(pos, 1) === "f") {
                var result19 = "f";
                pos += 1;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"f\"");
                }
              }
              if (result19 !== null) {
                var result4 = result19;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "S") {
                var result18 = "S";
                pos += 1;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"S\"");
                }
              }
              if (result18 !== null) {
                var result5 = result18;
              } else {
                if (input.substr(pos, 1) === "s") {
                  var result17 = "s";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"s\"");
                  }
                }
                if (result17 !== null) {
                  var result5 = result17;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "E") {
                  var result16 = "E";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"E\"");
                  }
                }
                if (result16 !== null) {
                  var result6 = result16;
                } else {
                  if (input.substr(pos, 1) === "e") {
                    var result15 = "e";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"e\"");
                    }
                  }
                  if (result15 !== null) {
                    var result6 = result15;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "T") {
                    var result14 = "T";
                    pos += 1;
                  } else {
                    var result14 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (result14 !== null) {
                    var result7 = result14;
                  } else {
                    if (input.substr(pos, 1) === "t") {
                      var result13 = "t";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"t\"");
                      }
                    }
                    if (result13 !== null) {
                      var result7 = result13;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result12 = parse_WS();
                    while (result12 !== null) {
                      result8.push(result12);
                      var result12 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result9 = parse_INTEGER();
                      if (result9 !== null) {
                        var result10 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                          result10.push(result11);
                          var result11 = parse_WS();
                        }
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
            return { offset:parseInt(i.value) };
          })(result1[7])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[26] OffsetClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BindingsClause() {
        var cacheKey = 'BindingsClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "BINDINGS") {
          var result2 = "BINDINGS";
          pos += 8;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"BINDINGS\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result14 = parse_Var();
          while (result14 !== null) {
            result3.push(result14);
            var result14 = parse_Var();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "{") {
              var result4 = "{";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"{\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result10 = "(";
                pos += 1;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result10 !== null) {
                var result13 = parse_BindingValue();
                if (result13 !== null) {
                  var result11 = [];
                  while (result13 !== null) {
                    result11.push(result13);
                    var result13 = parse_BindingValue();
                  }
                } else {
                  var result11 = null;
                }
                if (result11 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result12 = ")";
                    pos += 1;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result12 !== null) {
                    var result9 = [result10, result11, result12];
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
              if (result9 !== null) {
                var result7 = result9;
              } else {
                var result8 = parse_NIL();
                if (result8 !== null) {
                  var result7 = result8;
                } else {
                  var result7 = null;;
                };
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result10 = "(";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result10 !== null) {
                  var result13 = parse_BindingValue();
                  if (result13 !== null) {
                    var result11 = [];
                    while (result13 !== null) {
                      result11.push(result13);
                      var result13 = parse_BindingValue();
                    }
                  } else {
                    var result11 = null;
                  }
                  if (result11 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result12 = ")";
                      pos += 1;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result12 !== null) {
                      var result9 = [result10, result11, result12];
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
                if (result9 !== null) {
                  var result7 = result9;
                } else {
                  var result8 = parse_NIL();
                  if (result8 !== null) {
                    var result7 = result8;
                  } else {
                    var result7 = null;;
                  };
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[27] BindingsClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BindingValue() {
        var cacheKey = 'BindingValue@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result5 = parse_IRIref();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_RDFLiteral();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_NumericLiteral();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_BooleanLiteral();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 5) === "UNDEF") {
                  var result1 = "UNDEF";
                  pos += 5;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"UNDEF\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[28] BindingValue");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Update() {
        var cacheKey = 'Update@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Prologue();
        if (result2 !== null) {
          var result3 = [];
          var result14 = parse_WS();
          while (result14 !== null) {
            result3.push(result14);
            var result14 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_Update1();
            if (result4 !== null) {
              var savedPos1 = pos;
              var result7 = [];
              var result13 = parse_WS();
              while (result13 !== null) {
                result7.push(result13);
                var result13 = parse_WS();
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result12 = parse_WS();
                  while (result12 !== null) {
                    result9.push(result12);
                    var result12 = parse_WS();
                  }
                  if (result9 !== null) {
                    var result11 = parse_Update();
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, u, us) {
          
                var query = {};
                query.token = 'query';
                query.kind = 'update'
                query.prologue = p;
          
               var units = [u];
          
               if(us.length != null && us[3] != null && us[3].units != null) {
                   units = units.concat(us[3].units);
               }
          
               query.units = units;
               return query;
          })(result1[0], result1[2], result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[30] Update");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Update1() {
        var cacheKey = 'Update1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_Load();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_Clear();
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var result6 = parse_Drop();
            if (result6 !== null) {
              var result0 = result6;
            } else {
              var result5 = parse_Create();
              if (result5 !== null) {
                var result0 = result5;
              } else {
                var result4 = parse_InsertData();
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  var result3 = parse_DeleteData();
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_DeleteWhere();
                    if (result2 !== null) {
                      var result0 = result2;
                    } else {
                      var result1 = parse_Modify();
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[31] Update1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Load() {
        var cacheKey = 'Load@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "L") {
          var result35 = "L";
          pos += 1;
        } else {
          var result35 = null;
          if (reportMatchFailures) {
            matchFailed("\"L\"");
          }
        }
        if (result35 !== null) {
          var result2 = result35;
        } else {
          if (input.substr(pos, 1) === "l") {
            var result34 = "l";
            pos += 1;
          } else {
            var result34 = null;
            if (reportMatchFailures) {
              matchFailed("\"l\"");
            }
          }
          if (result34 !== null) {
            var result2 = result34;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "O") {
            var result33 = "O";
            pos += 1;
          } else {
            var result33 = null;
            if (reportMatchFailures) {
              matchFailed("\"O\"");
            }
          }
          if (result33 !== null) {
            var result3 = result33;
          } else {
            if (input.substr(pos, 1) === "o") {
              var result32 = "o";
              pos += 1;
            } else {
              var result32 = null;
              if (reportMatchFailures) {
                matchFailed("\"o\"");
              }
            }
            if (result32 !== null) {
              var result3 = result32;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "A") {
              var result31 = "A";
              pos += 1;
            } else {
              var result31 = null;
              if (reportMatchFailures) {
                matchFailed("\"A\"");
              }
            }
            if (result31 !== null) {
              var result4 = result31;
            } else {
              if (input.substr(pos, 1) === "a") {
                var result30 = "a";
                pos += 1;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              if (result30 !== null) {
                var result4 = result30;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "D") {
                var result29 = "D";
                pos += 1;
              } else {
                var result29 = null;
                if (reportMatchFailures) {
                  matchFailed("\"D\"");
                }
              }
              if (result29 !== null) {
                var result5 = result29;
              } else {
                if (input.substr(pos, 1) === "d") {
                  var result28 = "d";
                  pos += 1;
                } else {
                  var result28 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"d\"");
                  }
                }
                if (result28 !== null) {
                  var result5 = result28;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                var result6 = [];
                var result27 = parse_WS();
                while (result27 !== null) {
                  result6.push(result27);
                  var result27 = parse_WS();
                }
                if (result6 !== null) {
                  var result7 = parse_IRIref();
                  if (result7 !== null) {
                    var result8 = [];
                    var result26 = parse_WS();
                    while (result26 !== null) {
                      result8.push(result26);
                      var result26 = parse_WS();
                    }
                    if (result8 !== null) {
                      var savedPos1 = pos;
                      if (input.substr(pos, 1) === "I") {
                        var result25 = "I";
                        pos += 1;
                      } else {
                        var result25 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"I\"");
                        }
                      }
                      if (result25 !== null) {
                        var result11 = result25;
                      } else {
                        if (input.substr(pos, 1) === "i") {
                          var result24 = "i";
                          pos += 1;
                        } else {
                          var result24 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"i\"");
                          }
                        }
                        if (result24 !== null) {
                          var result11 = result24;
                        } else {
                          var result11 = null;;
                        };
                      }
                      if (result11 !== null) {
                        if (input.substr(pos, 1) === "N") {
                          var result23 = "N";
                          pos += 1;
                        } else {
                          var result23 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"N\"");
                          }
                        }
                        if (result23 !== null) {
                          var result12 = result23;
                        } else {
                          if (input.substr(pos, 1) === "n") {
                            var result22 = "n";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"n\"");
                            }
                          }
                          if (result22 !== null) {
                            var result12 = result22;
                          } else {
                            var result12 = null;;
                          };
                        }
                        if (result12 !== null) {
                          if (input.substr(pos, 1) === "T") {
                            var result21 = "T";
                            pos += 1;
                          } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"T\"");
                            }
                          }
                          if (result21 !== null) {
                            var result13 = result21;
                          } else {
                            if (input.substr(pos, 1) === "t") {
                              var result20 = "t";
                              pos += 1;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"t\"");
                              }
                            }
                            if (result20 !== null) {
                              var result13 = result20;
                            } else {
                              var result13 = null;;
                            };
                          }
                          if (result13 !== null) {
                            if (input.substr(pos, 1) === "O") {
                              var result19 = "O";
                              pos += 1;
                            } else {
                              var result19 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"O\"");
                              }
                            }
                            if (result19 !== null) {
                              var result14 = result19;
                            } else {
                              if (input.substr(pos, 1) === "o") {
                                var result18 = "o";
                                pos += 1;
                              } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"o\"");
                                }
                              }
                              if (result18 !== null) {
                                var result14 = result18;
                              } else {
                                var result14 = null;;
                              };
                            }
                            if (result14 !== null) {
                              var result15 = [];
                              var result17 = parse_WS();
                              while (result17 !== null) {
                                result15.push(result17);
                                var result17 = parse_WS();
                              }
                              if (result15 !== null) {
                                var result16 = parse_GraphRef();
                                if (result16 !== null) {
                                  var result10 = [result11, result12, result13, result14, result15, result16];
                                } else {
                                  var result10 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result10 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result10 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result10 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                      var result9 = result10 !== null ? result10 : '';
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sg, dg) {
                var query = {};
                query.kind = 'load';
                query.token = 'executableunit'
                query.sourceGraph = sg;
                query.destinyGraph = dg[5];
                
                return query;
          })(result1[5], result1[7])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[32] Load");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Clear() {
        var cacheKey = 'Clear@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "C") {
          var result41 = "C";
          pos += 1;
        } else {
          var result41 = null;
          if (reportMatchFailures) {
            matchFailed("\"C\"");
          }
        }
        if (result41 !== null) {
          var result2 = result41;
        } else {
          if (input.substr(pos, 1) === "c") {
            var result40 = "c";
            pos += 1;
          } else {
            var result40 = null;
            if (reportMatchFailures) {
              matchFailed("\"c\"");
            }
          }
          if (result40 !== null) {
            var result2 = result40;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "L") {
            var result39 = "L";
            pos += 1;
          } else {
            var result39 = null;
            if (reportMatchFailures) {
              matchFailed("\"L\"");
            }
          }
          if (result39 !== null) {
            var result3 = result39;
          } else {
            if (input.substr(pos, 1) === "l") {
              var result38 = "l";
              pos += 1;
            } else {
              var result38 = null;
              if (reportMatchFailures) {
                matchFailed("\"l\"");
              }
            }
            if (result38 !== null) {
              var result3 = result38;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "E") {
              var result37 = "E";
              pos += 1;
            } else {
              var result37 = null;
              if (reportMatchFailures) {
                matchFailed("\"E\"");
              }
            }
            if (result37 !== null) {
              var result4 = result37;
            } else {
              if (input.substr(pos, 1) === "e") {
                var result36 = "e";
                pos += 1;
              } else {
                var result36 = null;
                if (reportMatchFailures) {
                  matchFailed("\"e\"");
                }
              }
              if (result36 !== null) {
                var result4 = result36;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "A") {
                var result35 = "A";
                pos += 1;
              } else {
                var result35 = null;
                if (reportMatchFailures) {
                  matchFailed("\"A\"");
                }
              }
              if (result35 !== null) {
                var result5 = result35;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result34 = "a";
                  pos += 1;
                } else {
                  var result34 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result34 !== null) {
                  var result5 = result34;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "R") {
                  var result33 = "R";
                  pos += 1;
                } else {
                  var result33 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"R\"");
                  }
                }
                if (result33 !== null) {
                  var result6 = result33;
                } else {
                  if (input.substr(pos, 1) === "r") {
                    var result32 = "r";
                    pos += 1;
                  } else {
                    var result32 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"r\"");
                    }
                  }
                  if (result32 !== null) {
                    var result6 = result32;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result31 = parse_WS();
                  while (result31 !== null) {
                    result7.push(result31);
                    var result31 = parse_WS();
                  }
                  if (result7 !== null) {
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "S") {
                      var result30 = "S";
                      pos += 1;
                    } else {
                      var result30 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"S\"");
                      }
                    }
                    if (result30 !== null) {
                      var result13 = result30;
                    } else {
                      if (input.substr(pos, 1) === "s") {
                        var result29 = "s";
                        pos += 1;
                      } else {
                        var result29 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"s\"");
                        }
                      }
                      if (result29 !== null) {
                        var result13 = result29;
                      } else {
                        var result13 = null;;
                      };
                    }
                    if (result13 !== null) {
                      if (input.substr(pos, 1) === "I") {
                        var result28 = "I";
                        pos += 1;
                      } else {
                        var result28 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"I\"");
                        }
                      }
                      if (result28 !== null) {
                        var result14 = result28;
                      } else {
                        if (input.substr(pos, 1) === "i") {
                          var result27 = "i";
                          pos += 1;
                        } else {
                          var result27 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"i\"");
                          }
                        }
                        if (result27 !== null) {
                          var result14 = result27;
                        } else {
                          var result14 = null;;
                        };
                      }
                      if (result14 !== null) {
                        if (input.substr(pos, 1) === "L") {
                          var result26 = "L";
                          pos += 1;
                        } else {
                          var result26 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"L\"");
                          }
                        }
                        if (result26 !== null) {
                          var result15 = result26;
                        } else {
                          if (input.substr(pos, 1) === "l") {
                            var result25 = "l";
                            pos += 1;
                          } else {
                            var result25 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"l\"");
                            }
                          }
                          if (result25 !== null) {
                            var result15 = result25;
                          } else {
                            var result15 = null;;
                          };
                        }
                        if (result15 !== null) {
                          if (input.substr(pos, 1) === "E") {
                            var result24 = "E";
                            pos += 1;
                          } else {
                            var result24 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"E\"");
                            }
                          }
                          if (result24 !== null) {
                            var result16 = result24;
                          } else {
                            if (input.substr(pos, 1) === "e") {
                              var result23 = "e";
                              pos += 1;
                            } else {
                              var result23 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"e\"");
                              }
                            }
                            if (result23 !== null) {
                              var result16 = result23;
                            } else {
                              var result16 = null;;
                            };
                          }
                          if (result16 !== null) {
                            if (input.substr(pos, 1) === "N") {
                              var result22 = "N";
                              pos += 1;
                            } else {
                              var result22 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"N\"");
                              }
                            }
                            if (result22 !== null) {
                              var result17 = result22;
                            } else {
                              if (input.substr(pos, 1) === "n") {
                                var result21 = "n";
                                pos += 1;
                              } else {
                                var result21 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"n\"");
                                }
                              }
                              if (result21 !== null) {
                                var result17 = result21;
                              } else {
                                var result17 = null;;
                              };
                            }
                            if (result17 !== null) {
                              if (input.substr(pos, 1) === "T") {
                                var result20 = "T";
                                pos += 1;
                              } else {
                                var result20 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"T\"");
                                }
                              }
                              if (result20 !== null) {
                                var result18 = result20;
                              } else {
                                if (input.substr(pos, 1) === "t") {
                                  var result19 = "t";
                                  pos += 1;
                                } else {
                                  var result19 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"t\"");
                                  }
                                }
                                if (result19 !== null) {
                                  var result18 = result19;
                                } else {
                                  var result18 = null;;
                                };
                              }
                              if (result18 !== null) {
                                var result12 = [result13, result14, result15, result16, result17, result18];
                              } else {
                                var result12 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result12 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result12 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result12 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos1;
                    }
                    var result8 = result12 !== null ? result12 : '';
                    if (result8 !== null) {
                      var result9 = [];
                      var result11 = parse_WS();
                      while (result11 !== null) {
                        result9.push(result11);
                        var result11 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result10 = parse_GraphRefAll();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'clear';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[8])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[33] Clear");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Drop() {
        var cacheKey = 'Drop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "D") {
          var result38 = "D";
          pos += 1;
        } else {
          var result38 = null;
          if (reportMatchFailures) {
            matchFailed("\"D\"");
          }
        }
        if (result38 !== null) {
          var result2 = result38;
        } else {
          if (input.substr(pos, 1) === "d") {
            var result37 = "d";
            pos += 1;
          } else {
            var result37 = null;
            if (reportMatchFailures) {
              matchFailed("\"d\"");
            }
          }
          if (result37 !== null) {
            var result2 = result37;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result36 = "R";
            pos += 1;
          } else {
            var result36 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result36 !== null) {
            var result3 = result36;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result35 = "r";
              pos += 1;
            } else {
              var result35 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result35 !== null) {
              var result3 = result35;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "O") {
              var result34 = "O";
              pos += 1;
            } else {
              var result34 = null;
              if (reportMatchFailures) {
                matchFailed("\"O\"");
              }
            }
            if (result34 !== null) {
              var result4 = result34;
            } else {
              if (input.substr(pos, 1) === "o") {
                var result33 = "o";
                pos += 1;
              } else {
                var result33 = null;
                if (reportMatchFailures) {
                  matchFailed("\"o\"");
                }
              }
              if (result33 !== null) {
                var result4 = result33;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "P") {
                var result32 = "P";
                pos += 1;
              } else {
                var result32 = null;
                if (reportMatchFailures) {
                  matchFailed("\"P\"");
                }
              }
              if (result32 !== null) {
                var result5 = result32;
              } else {
                if (input.substr(pos, 1) === "p") {
                  var result31 = "p";
                  pos += 1;
                } else {
                  var result31 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"p\"");
                  }
                }
                if (result31 !== null) {
                  var result5 = result31;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                var result6 = [];
                var result30 = parse_WS();
                while (result30 !== null) {
                  result6.push(result30);
                  var result30 = parse_WS();
                }
                if (result6 !== null) {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === "S") {
                    var result29 = "S";
                    pos += 1;
                  } else {
                    var result29 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"S\"");
                    }
                  }
                  if (result29 !== null) {
                    var result12 = result29;
                  } else {
                    if (input.substr(pos, 1) === "s") {
                      var result28 = "s";
                      pos += 1;
                    } else {
                      var result28 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"s\"");
                      }
                    }
                    if (result28 !== null) {
                      var result12 = result28;
                    } else {
                      var result12 = null;;
                    };
                  }
                  if (result12 !== null) {
                    if (input.substr(pos, 1) === "I") {
                      var result27 = "I";
                      pos += 1;
                    } else {
                      var result27 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"I\"");
                      }
                    }
                    if (result27 !== null) {
                      var result13 = result27;
                    } else {
                      if (input.substr(pos, 1) === "i") {
                        var result26 = "i";
                        pos += 1;
                      } else {
                        var result26 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"i\"");
                        }
                      }
                      if (result26 !== null) {
                        var result13 = result26;
                      } else {
                        var result13 = null;;
                      };
                    }
                    if (result13 !== null) {
                      if (input.substr(pos, 1) === "L") {
                        var result25 = "L";
                        pos += 1;
                      } else {
                        var result25 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"L\"");
                        }
                      }
                      if (result25 !== null) {
                        var result14 = result25;
                      } else {
                        if (input.substr(pos, 1) === "l") {
                          var result24 = "l";
                          pos += 1;
                        } else {
                          var result24 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"l\"");
                          }
                        }
                        if (result24 !== null) {
                          var result14 = result24;
                        } else {
                          var result14 = null;;
                        };
                      }
                      if (result14 !== null) {
                        if (input.substr(pos, 1) === "E") {
                          var result23 = "E";
                          pos += 1;
                        } else {
                          var result23 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"E\"");
                          }
                        }
                        if (result23 !== null) {
                          var result15 = result23;
                        } else {
                          if (input.substr(pos, 1) === "e") {
                            var result22 = "e";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"e\"");
                            }
                          }
                          if (result22 !== null) {
                            var result15 = result22;
                          } else {
                            var result15 = null;;
                          };
                        }
                        if (result15 !== null) {
                          if (input.substr(pos, 1) === "N") {
                            var result21 = "N";
                            pos += 1;
                          } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"N\"");
                            }
                          }
                          if (result21 !== null) {
                            var result16 = result21;
                          } else {
                            if (input.substr(pos, 1) === "n") {
                              var result20 = "n";
                              pos += 1;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"n\"");
                              }
                            }
                            if (result20 !== null) {
                              var result16 = result20;
                            } else {
                              var result16 = null;;
                            };
                          }
                          if (result16 !== null) {
                            if (input.substr(pos, 1) === "T") {
                              var result19 = "T";
                              pos += 1;
                            } else {
                              var result19 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"T\"");
                              }
                            }
                            if (result19 !== null) {
                              var result17 = result19;
                            } else {
                              if (input.substr(pos, 1) === "t") {
                                var result18 = "t";
                                pos += 1;
                              } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"t\"");
                                }
                              }
                              if (result18 !== null) {
                                var result17 = result18;
                              } else {
                                var result17 = null;;
                              };
                            }
                            if (result17 !== null) {
                              var result11 = [result12, result13, result14, result15, result16, result17];
                            } else {
                              var result11 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result11 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos1;
                  }
                  var result7 = result11 !== null ? result11 : '';
                  if (result7 !== null) {
                    var result8 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                      result8.push(result10);
                      var result10 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result9 = parse_GraphRefAll();
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'drop';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[7])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[34] Drop");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Create() {
        var cacheKey = 'Create@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "C") {
          var result44 = "C";
          pos += 1;
        } else {
          var result44 = null;
          if (reportMatchFailures) {
            matchFailed("\"C\"");
          }
        }
        if (result44 !== null) {
          var result2 = result44;
        } else {
          if (input.substr(pos, 1) === "c") {
            var result43 = "c";
            pos += 1;
          } else {
            var result43 = null;
            if (reportMatchFailures) {
              matchFailed("\"c\"");
            }
          }
          if (result43 !== null) {
            var result2 = result43;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result42 = "R";
            pos += 1;
          } else {
            var result42 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result42 !== null) {
            var result3 = result42;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result41 = "r";
              pos += 1;
            } else {
              var result41 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result41 !== null) {
              var result3 = result41;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "E") {
              var result40 = "E";
              pos += 1;
            } else {
              var result40 = null;
              if (reportMatchFailures) {
                matchFailed("\"E\"");
              }
            }
            if (result40 !== null) {
              var result4 = result40;
            } else {
              if (input.substr(pos, 1) === "e") {
                var result39 = "e";
                pos += 1;
              } else {
                var result39 = null;
                if (reportMatchFailures) {
                  matchFailed("\"e\"");
                }
              }
              if (result39 !== null) {
                var result4 = result39;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "A") {
                var result38 = "A";
                pos += 1;
              } else {
                var result38 = null;
                if (reportMatchFailures) {
                  matchFailed("\"A\"");
                }
              }
              if (result38 !== null) {
                var result5 = result38;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result37 = "a";
                  pos += 1;
                } else {
                  var result37 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result37 !== null) {
                  var result5 = result37;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result36 = "T";
                  pos += 1;
                } else {
                  var result36 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result36 !== null) {
                  var result6 = result36;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result35 = "t";
                    pos += 1;
                  } else {
                    var result35 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result35 !== null) {
                    var result6 = result35;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result34 = "E";
                    pos += 1;
                  } else {
                    var result34 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result34 !== null) {
                    var result7 = result34;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result33 = "e";
                      pos += 1;
                    } else {
                      var result33 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result33 !== null) {
                      var result7 = result33;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result32 = parse_WS();
                    while (result32 !== null) {
                      result8.push(result32);
                      var result32 = parse_WS();
                    }
                    if (result8 !== null) {
                      var savedPos1 = pos;
                      if (input.substr(pos, 1) === "S") {
                        var result31 = "S";
                        pos += 1;
                      } else {
                        var result31 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"S\"");
                        }
                      }
                      if (result31 !== null) {
                        var result14 = result31;
                      } else {
                        if (input.substr(pos, 1) === "s") {
                          var result30 = "s";
                          pos += 1;
                        } else {
                          var result30 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"s\"");
                          }
                        }
                        if (result30 !== null) {
                          var result14 = result30;
                        } else {
                          var result14 = null;;
                        };
                      }
                      if (result14 !== null) {
                        if (input.substr(pos, 1) === "I") {
                          var result29 = "I";
                          pos += 1;
                        } else {
                          var result29 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"I\"");
                          }
                        }
                        if (result29 !== null) {
                          var result15 = result29;
                        } else {
                          if (input.substr(pos, 1) === "i") {
                            var result28 = "i";
                            pos += 1;
                          } else {
                            var result28 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"i\"");
                            }
                          }
                          if (result28 !== null) {
                            var result15 = result28;
                          } else {
                            var result15 = null;;
                          };
                        }
                        if (result15 !== null) {
                          if (input.substr(pos, 1) === "L") {
                            var result27 = "L";
                            pos += 1;
                          } else {
                            var result27 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"L\"");
                            }
                          }
                          if (result27 !== null) {
                            var result16 = result27;
                          } else {
                            if (input.substr(pos, 1) === "l") {
                              var result26 = "l";
                              pos += 1;
                            } else {
                              var result26 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"l\"");
                              }
                            }
                            if (result26 !== null) {
                              var result16 = result26;
                            } else {
                              var result16 = null;;
                            };
                          }
                          if (result16 !== null) {
                            if (input.substr(pos, 1) === "E") {
                              var result25 = "E";
                              pos += 1;
                            } else {
                              var result25 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"E\"");
                              }
                            }
                            if (result25 !== null) {
                              var result17 = result25;
                            } else {
                              if (input.substr(pos, 1) === "e") {
                                var result24 = "e";
                                pos += 1;
                              } else {
                                var result24 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"e\"");
                                }
                              }
                              if (result24 !== null) {
                                var result17 = result24;
                              } else {
                                var result17 = null;;
                              };
                            }
                            if (result17 !== null) {
                              if (input.substr(pos, 1) === "N") {
                                var result23 = "N";
                                pos += 1;
                              } else {
                                var result23 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"N\"");
                                }
                              }
                              if (result23 !== null) {
                                var result18 = result23;
                              } else {
                                if (input.substr(pos, 1) === "n") {
                                  var result22 = "n";
                                  pos += 1;
                                } else {
                                  var result22 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"n\"");
                                  }
                                }
                                if (result22 !== null) {
                                  var result18 = result22;
                                } else {
                                  var result18 = null;;
                                };
                              }
                              if (result18 !== null) {
                                if (input.substr(pos, 1) === "T") {
                                  var result21 = "T";
                                  pos += 1;
                                } else {
                                  var result21 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"T\"");
                                  }
                                }
                                if (result21 !== null) {
                                  var result19 = result21;
                                } else {
                                  if (input.substr(pos, 1) === "t") {
                                    var result20 = "t";
                                    pos += 1;
                                  } else {
                                    var result20 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"t\"");
                                    }
                                  }
                                  if (result20 !== null) {
                                    var result19 = result20;
                                  } else {
                                    var result19 = null;;
                                  };
                                }
                                if (result19 !== null) {
                                  var result13 = [result14, result15, result16, result17, result18, result19];
                                } else {
                                  var result13 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result13 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos1;
                      }
                      var result9 = result13 !== null ? result13 : '';
                      if (result9 !== null) {
                        var result10 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                          result10.push(result12);
                          var result12 = parse_WS();
                        }
                        if (result10 !== null) {
                          var result11 = parse_GraphRef();
                          if (result11 !== null) {
                            var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ref) {
                var query = {};
                query.kind = 'create';
                query.token = 'executableunit'
                query.destinyGraph = ref;
                
                return query;
          })(result1[9])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[35] Create");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_InsertData() {
        var cacheKey = 'InsertData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "I") {
          var result36 = "I";
          pos += 1;
        } else {
          var result36 = null;
          if (reportMatchFailures) {
            matchFailed("\"I\"");
          }
        }
        if (result36 !== null) {
          var result2 = result36;
        } else {
          if (input.substr(pos, 1) === "i") {
            var result35 = "i";
            pos += 1;
          } else {
            var result35 = null;
            if (reportMatchFailures) {
              matchFailed("\"i\"");
            }
          }
          if (result35 !== null) {
            var result2 = result35;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "N") {
            var result34 = "N";
            pos += 1;
          } else {
            var result34 = null;
            if (reportMatchFailures) {
              matchFailed("\"N\"");
            }
          }
          if (result34 !== null) {
            var result3 = result34;
          } else {
            if (input.substr(pos, 1) === "n") {
              var result33 = "n";
              pos += 1;
            } else {
              var result33 = null;
              if (reportMatchFailures) {
                matchFailed("\"n\"");
              }
            }
            if (result33 !== null) {
              var result3 = result33;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "S") {
              var result32 = "S";
              pos += 1;
            } else {
              var result32 = null;
              if (reportMatchFailures) {
                matchFailed("\"S\"");
              }
            }
            if (result32 !== null) {
              var result4 = result32;
            } else {
              if (input.substr(pos, 1) === "s") {
                var result31 = "s";
                pos += 1;
              } else {
                var result31 = null;
                if (reportMatchFailures) {
                  matchFailed("\"s\"");
                }
              }
              if (result31 !== null) {
                var result4 = result31;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result30 = "E";
                pos += 1;
              } else {
                var result30 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result30 !== null) {
                var result5 = result30;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result29 = "e";
                  pos += 1;
                } else {
                  var result29 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result29 !== null) {
                  var result5 = result29;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "R") {
                  var result28 = "R";
                  pos += 1;
                } else {
                  var result28 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"R\"");
                  }
                }
                if (result28 !== null) {
                  var result6 = result28;
                } else {
                  if (input.substr(pos, 1) === "r") {
                    var result27 = "r";
                    pos += 1;
                  } else {
                    var result27 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"r\"");
                    }
                  }
                  if (result27 !== null) {
                    var result6 = result27;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "T") {
                    var result26 = "T";
                    pos += 1;
                  } else {
                    var result26 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (result26 !== null) {
                    var result7 = result26;
                  } else {
                    if (input.substr(pos, 1) === "t") {
                      var result25 = "t";
                      pos += 1;
                    } else {
                      var result25 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"t\"");
                      }
                    }
                    if (result25 !== null) {
                      var result7 = result25;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result24 = parse_WS();
                    while (result24 !== null) {
                      result8.push(result24);
                      var result24 = parse_WS();
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "D") {
                        var result23 = "D";
                        pos += 1;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"D\"");
                        }
                      }
                      if (result23 !== null) {
                        var result9 = result23;
                      } else {
                        if (input.substr(pos, 1) === "d") {
                          var result22 = "d";
                          pos += 1;
                        } else {
                          var result22 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"d\"");
                          }
                        }
                        if (result22 !== null) {
                          var result9 = result22;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "A") {
                          var result21 = "A";
                          pos += 1;
                        } else {
                          var result21 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"A\"");
                          }
                        }
                        if (result21 !== null) {
                          var result10 = result21;
                        } else {
                          if (input.substr(pos, 1) === "a") {
                            var result20 = "a";
                            pos += 1;
                          } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"a\"");
                            }
                          }
                          if (result20 !== null) {
                            var result10 = result20;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "T") {
                            var result19 = "T";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"T\"");
                            }
                          }
                          if (result19 !== null) {
                            var result11 = result19;
                          } else {
                            if (input.substr(pos, 1) === "t") {
                              var result18 = "t";
                              pos += 1;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"t\"");
                              }
                            }
                            if (result18 !== null) {
                              var result11 = result18;
                            } else {
                              var result11 = null;;
                            };
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "A") {
                              var result17 = "A";
                              pos += 1;
                            } else {
                              var result17 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"A\"");
                              }
                            }
                            if (result17 !== null) {
                              var result12 = result17;
                            } else {
                              if (input.substr(pos, 1) === "a") {
                                var result16 = "a";
                                pos += 1;
                              } else {
                                var result16 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"a\"");
                                }
                              }
                              if (result16 !== null) {
                                var result12 = result16;
                              } else {
                                var result12 = null;;
                              };
                            }
                            if (result12 !== null) {
                              var result13 = [];
                              var result15 = parse_WS();
                              while (result15 !== null) {
                                result13.push(result15);
                                var result15 = parse_WS();
                              }
                              if (result13 !== null) {
                                var result14 = parse_QuadData();
                                if (result14 !== null) {
                                  var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'insertdata';
                query.token = 'executableunit'
                query.quads = qs;
          
                return query;
          })(result1[12])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[36] InsertData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteData() {
        var cacheKey = 'DeleteData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "D") {
          var result34 = "D";
          pos += 1;
        } else {
          var result34 = null;
          if (reportMatchFailures) {
            matchFailed("\"D\"");
          }
        }
        if (result34 !== null) {
          var result2 = result34;
        } else {
          if (input.substr(pos, 1) === "d") {
            var result33 = "d";
            pos += 1;
          } else {
            var result33 = null;
            if (reportMatchFailures) {
              matchFailed("\"d\"");
            }
          }
          if (result33 !== null) {
            var result2 = result33;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "E") {
            var result32 = "E";
            pos += 1;
          } else {
            var result32 = null;
            if (reportMatchFailures) {
              matchFailed("\"E\"");
            }
          }
          if (result32 !== null) {
            var result3 = result32;
          } else {
            if (input.substr(pos, 1) === "e") {
              var result31 = "e";
              pos += 1;
            } else {
              var result31 = null;
              if (reportMatchFailures) {
                matchFailed("\"e\"");
              }
            }
            if (result31 !== null) {
              var result3 = result31;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "L") {
              var result30 = "L";
              pos += 1;
            } else {
              var result30 = null;
              if (reportMatchFailures) {
                matchFailed("\"L\"");
              }
            }
            if (result30 !== null) {
              var result4 = result30;
            } else {
              if (input.substr(pos, 1) === "l") {
                var result29 = "l";
                pos += 1;
              } else {
                var result29 = null;
                if (reportMatchFailures) {
                  matchFailed("\"l\"");
                }
              }
              if (result29 !== null) {
                var result4 = result29;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result28 = "E";
                pos += 1;
              } else {
                var result28 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result28 !== null) {
                var result5 = result28;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result27 = "e";
                  pos += 1;
                } else {
                  var result27 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result27 !== null) {
                  var result5 = result27;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result26 = "T";
                  pos += 1;
                } else {
                  var result26 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result26 !== null) {
                  var result6 = result26;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result25 = "t";
                    pos += 1;
                  } else {
                    var result25 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result25 !== null) {
                    var result6 = result25;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result24 = "E";
                    pos += 1;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result24 !== null) {
                    var result7 = result24;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result23 = "e";
                      pos += 1;
                    } else {
                      var result23 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result23 !== null) {
                      var result7 = result23;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result22 = parse_WS();
                    while (result22 !== null) {
                      result8.push(result22);
                      var result22 = parse_WS();
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "D") {
                        var result21 = "D";
                        pos += 1;
                      } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"D\"");
                        }
                      }
                      if (result21 !== null) {
                        var result9 = result21;
                      } else {
                        if (input.substr(pos, 1) === "d") {
                          var result20 = "d";
                          pos += 1;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"d\"");
                          }
                        }
                        if (result20 !== null) {
                          var result9 = result20;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "A") {
                          var result19 = "A";
                          pos += 1;
                        } else {
                          var result19 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"A\"");
                          }
                        }
                        if (result19 !== null) {
                          var result10 = result19;
                        } else {
                          if (input.substr(pos, 1) === "a") {
                            var result18 = "a";
                            pos += 1;
                          } else {
                            var result18 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"a\"");
                            }
                          }
                          if (result18 !== null) {
                            var result10 = result18;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "T") {
                            var result17 = "T";
                            pos += 1;
                          } else {
                            var result17 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"T\"");
                            }
                          }
                          if (result17 !== null) {
                            var result11 = result17;
                          } else {
                            if (input.substr(pos, 1) === "t") {
                              var result16 = "t";
                              pos += 1;
                            } else {
                              var result16 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"t\"");
                              }
                            }
                            if (result16 !== null) {
                              var result11 = result16;
                            } else {
                              var result11 = null;;
                            };
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "A") {
                              var result15 = "A";
                              pos += 1;
                            } else {
                              var result15 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"A\"");
                              }
                            }
                            if (result15 !== null) {
                              var result12 = result15;
                            } else {
                              if (input.substr(pos, 1) === "a") {
                                var result14 = "a";
                                pos += 1;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"a\"");
                                }
                              }
                              if (result14 !== null) {
                                var result12 = result14;
                              } else {
                                var result12 = null;;
                              };
                            }
                            if (result12 !== null) {
                              var result13 = parse_QuadData();
                              if (result13 !== null) {
                                var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                var query = {};
                query.kind = 'deletedata';
                query.token = 'executableunit'
                query.quads = qs;
          
                return query;
          })(result1[11])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[37] DeleteData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteWhere() {
        var cacheKey = 'DeleteWhere@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "D") {
          var result39 = "D";
          pos += 1;
        } else {
          var result39 = null;
          if (reportMatchFailures) {
            matchFailed("\"D\"");
          }
        }
        if (result39 !== null) {
          var result2 = result39;
        } else {
          if (input.substr(pos, 1) === "d") {
            var result38 = "d";
            pos += 1;
          } else {
            var result38 = null;
            if (reportMatchFailures) {
              matchFailed("\"d\"");
            }
          }
          if (result38 !== null) {
            var result2 = result38;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "E") {
            var result37 = "E";
            pos += 1;
          } else {
            var result37 = null;
            if (reportMatchFailures) {
              matchFailed("\"E\"");
            }
          }
          if (result37 !== null) {
            var result3 = result37;
          } else {
            if (input.substr(pos, 1) === "e") {
              var result36 = "e";
              pos += 1;
            } else {
              var result36 = null;
              if (reportMatchFailures) {
                matchFailed("\"e\"");
              }
            }
            if (result36 !== null) {
              var result3 = result36;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "L") {
              var result35 = "L";
              pos += 1;
            } else {
              var result35 = null;
              if (reportMatchFailures) {
                matchFailed("\"L\"");
              }
            }
            if (result35 !== null) {
              var result4 = result35;
            } else {
              if (input.substr(pos, 1) === "l") {
                var result34 = "l";
                pos += 1;
              } else {
                var result34 = null;
                if (reportMatchFailures) {
                  matchFailed("\"l\"");
                }
              }
              if (result34 !== null) {
                var result4 = result34;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result33 = "E";
                pos += 1;
              } else {
                var result33 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result33 !== null) {
                var result5 = result33;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result32 = "e";
                  pos += 1;
                } else {
                  var result32 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result32 !== null) {
                  var result5 = result32;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result31 = "T";
                  pos += 1;
                } else {
                  var result31 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result31 !== null) {
                  var result6 = result31;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result30 = "t";
                    pos += 1;
                  } else {
                    var result30 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result30 !== null) {
                    var result6 = result30;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result29 = "E";
                    pos += 1;
                  } else {
                    var result29 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result29 !== null) {
                    var result7 = result29;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result28 = "e";
                      pos += 1;
                    } else {
                      var result28 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result28 !== null) {
                      var result7 = result28;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result27 = parse_WS();
                    while (result27 !== null) {
                      result8.push(result27);
                      var result27 = parse_WS();
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "W") {
                        var result26 = "W";
                        pos += 1;
                      } else {
                        var result26 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"W\"");
                        }
                      }
                      if (result26 !== null) {
                        var result9 = result26;
                      } else {
                        if (input.substr(pos, 1) === "w") {
                          var result25 = "w";
                          pos += 1;
                        } else {
                          var result25 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"w\"");
                          }
                        }
                        if (result25 !== null) {
                          var result9 = result25;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "H") {
                          var result24 = "H";
                          pos += 1;
                        } else {
                          var result24 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"H\"");
                          }
                        }
                        if (result24 !== null) {
                          var result10 = result24;
                        } else {
                          if (input.substr(pos, 1) === "h") {
                            var result23 = "h";
                            pos += 1;
                          } else {
                            var result23 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"h\"");
                            }
                          }
                          if (result23 !== null) {
                            var result10 = result23;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "E") {
                            var result22 = "E";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"E\"");
                            }
                          }
                          if (result22 !== null) {
                            var result11 = result22;
                          } else {
                            if (input.substr(pos, 1) === "e") {
                              var result21 = "e";
                              pos += 1;
                            } else {
                              var result21 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"e\"");
                              }
                            }
                            if (result21 !== null) {
                              var result11 = result21;
                            } else {
                              var result11 = null;;
                            };
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "R") {
                              var result20 = "R";
                              pos += 1;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"R\"");
                              }
                            }
                            if (result20 !== null) {
                              var result12 = result20;
                            } else {
                              if (input.substr(pos, 1) === "r") {
                                var result19 = "r";
                                pos += 1;
                              } else {
                                var result19 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"r\"");
                                }
                              }
                              if (result19 !== null) {
                                var result12 = result19;
                              } else {
                                var result12 = null;;
                              };
                            }
                            if (result12 !== null) {
                              if (input.substr(pos, 1) === "E") {
                                var result18 = "E";
                                pos += 1;
                              } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"E\"");
                                }
                              }
                              if (result18 !== null) {
                                var result13 = result18;
                              } else {
                                if (input.substr(pos, 1) === "e") {
                                  var result17 = "e";
                                  pos += 1;
                                } else {
                                  var result17 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"e\"");
                                  }
                                }
                                if (result17 !== null) {
                                  var result13 = result17;
                                } else {
                                  var result13 = null;;
                                };
                              }
                              if (result13 !== null) {
                                var result14 = [];
                                var result16 = parse_WS();
                                while (result16 !== null) {
                                  result14.push(result16);
                                  var result16 = parse_WS();
                                }
                                if (result14 !== null) {
                                  var result15 = parse_GroupGraphPattern();
                                  if (result15 !== null) {
                                    var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) {
                var query = {};
                query.kind = 'modify';
                query.pattern = p;
                query['with'] = null;
                query['using'] = null;
          
                var quads = [];
          
          
                var patternsCollection = p.patterns[0];
                if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
                    patternsCollection = patternsCollection.patterns[0].triplesContext;
                } else {
                    patternsCollection = patternsCollection.triplesContext;
                }
          
                for(var i=0; i<patternsCollection.length; i++) {
                    var quad = {};
                    var contextQuad = patternsCollection[i];
          
                    quad['subject'] = contextQuad['subject'];
                    quad['predicate'] = contextQuad['predicate'];
                    quad['object'] = contextQuad['object'];
                    quad['graph'] = contextQuad['graph'];
          
                    quads.push(quad);
                }
          
                query['delete'] = quads;
          
                return query;
          })(result1[13])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[38] DeleteWhere");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Modify() {
        var cacheKey = 'Modify@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "W") {
          var result54 = "W";
          pos += 1;
        } else {
          var result54 = null;
          if (reportMatchFailures) {
            matchFailed("\"W\"");
          }
        }
        if (result54 !== null) {
          var result40 = result54;
        } else {
          if (input.substr(pos, 1) === "w") {
            var result53 = "w";
            pos += 1;
          } else {
            var result53 = null;
            if (reportMatchFailures) {
              matchFailed("\"w\"");
            }
          }
          if (result53 !== null) {
            var result40 = result53;
          } else {
            var result40 = null;;
          };
        }
        if (result40 !== null) {
          if (input.substr(pos, 1) === "I") {
            var result52 = "I";
            pos += 1;
          } else {
            var result52 = null;
            if (reportMatchFailures) {
              matchFailed("\"I\"");
            }
          }
          if (result52 !== null) {
            var result41 = result52;
          } else {
            if (input.substr(pos, 1) === "i") {
              var result51 = "i";
              pos += 1;
            } else {
              var result51 = null;
              if (reportMatchFailures) {
                matchFailed("\"i\"");
              }
            }
            if (result51 !== null) {
              var result41 = result51;
            } else {
              var result41 = null;;
            };
          }
          if (result41 !== null) {
            if (input.substr(pos, 1) === "T") {
              var result50 = "T";
              pos += 1;
            } else {
              var result50 = null;
              if (reportMatchFailures) {
                matchFailed("\"T\"");
              }
            }
            if (result50 !== null) {
              var result42 = result50;
            } else {
              if (input.substr(pos, 1) === "t") {
                var result49 = "t";
                pos += 1;
              } else {
                var result49 = null;
                if (reportMatchFailures) {
                  matchFailed("\"t\"");
                }
              }
              if (result49 !== null) {
                var result42 = result49;
              } else {
                var result42 = null;;
              };
            }
            if (result42 !== null) {
              if (input.substr(pos, 1) === "H") {
                var result48 = "H";
                pos += 1;
              } else {
                var result48 = null;
                if (reportMatchFailures) {
                  matchFailed("\"H\"");
                }
              }
              if (result48 !== null) {
                var result43 = result48;
              } else {
                if (input.substr(pos, 1) === "h") {
                  var result47 = "h";
                  pos += 1;
                } else {
                  var result47 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"h\"");
                  }
                }
                if (result47 !== null) {
                  var result43 = result47;
                } else {
                  var result43 = null;;
                };
              }
              if (result43 !== null) {
                var result44 = [];
                var result46 = parse_WS();
                while (result46 !== null) {
                  result44.push(result46);
                  var result46 = parse_WS();
                }
                if (result44 !== null) {
                  var result45 = parse_IRIref();
                  if (result45 !== null) {
                    var result39 = [result40, result41, result42, result43, result44, result45];
                  } else {
                    var result39 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result39 = null;
                  pos = savedPos2;
                }
              } else {
                var result39 = null;
                pos = savedPos2;
              }
            } else {
              var result39 = null;
              pos = savedPos2;
            }
          } else {
            var result39 = null;
            pos = savedPos2;
          }
        } else {
          var result39 = null;
          pos = savedPos2;
        }
        var result2 = result39 !== null ? result39 : '';
        if (result2 !== null) {
          var result3 = [];
          var result38 = parse_WS();
          while (result38 !== null) {
            result3.push(result38);
            var result38 = parse_WS();
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var result33 = parse_DeleteClause();
            if (result33 !== null) {
              var result34 = [];
              var result37 = parse_WS();
              while (result37 !== null) {
                result34.push(result37);
                var result37 = parse_WS();
              }
              if (result34 !== null) {
                var result36 = parse_InsertClause();
                var result35 = result36 !== null ? result36 : '';
                if (result35 !== null) {
                  var result32 = [result33, result34, result35];
                } else {
                  var result32 = null;
                  pos = savedPos1;
                }
              } else {
                var result32 = null;
                pos = savedPos1;
              }
            } else {
              var result32 = null;
              pos = savedPos1;
            }
            if (result32 !== null) {
              var result4 = result32;
            } else {
              var result31 = parse_InsertClause();
              if (result31 !== null) {
                var result4 = result31;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result5 = [];
              var result30 = parse_WS();
              while (result30 !== null) {
                result5.push(result30);
                var result30 = parse_WS();
              }
              if (result5 !== null) {
                var result6 = [];
                var result29 = parse_UsingClause();
                while (result29 !== null) {
                  result6.push(result29);
                  var result29 = parse_UsingClause();
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result28 = parse_WS();
                  while (result28 !== null) {
                    result7.push(result28);
                    var result28 = parse_WS();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "W") {
                      var result27 = "W";
                      pos += 1;
                    } else {
                      var result27 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"W\"");
                      }
                    }
                    if (result27 !== null) {
                      var result8 = result27;
                    } else {
                      if (input.substr(pos, 1) === "w") {
                        var result26 = "w";
                        pos += 1;
                      } else {
                        var result26 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"w\"");
                        }
                      }
                      if (result26 !== null) {
                        var result8 = result26;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      if (input.substr(pos, 1) === "H") {
                        var result25 = "H";
                        pos += 1;
                      } else {
                        var result25 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"H\"");
                        }
                      }
                      if (result25 !== null) {
                        var result9 = result25;
                      } else {
                        if (input.substr(pos, 1) === "h") {
                          var result24 = "h";
                          pos += 1;
                        } else {
                          var result24 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"h\"");
                          }
                        }
                        if (result24 !== null) {
                          var result9 = result24;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === "E") {
                          var result23 = "E";
                          pos += 1;
                        } else {
                          var result23 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"E\"");
                          }
                        }
                        if (result23 !== null) {
                          var result10 = result23;
                        } else {
                          if (input.substr(pos, 1) === "e") {
                            var result22 = "e";
                            pos += 1;
                          } else {
                            var result22 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"e\"");
                            }
                          }
                          if (result22 !== null) {
                            var result10 = result22;
                          } else {
                            var result10 = null;;
                          };
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "R") {
                            var result21 = "R";
                            pos += 1;
                          } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"R\"");
                            }
                          }
                          if (result21 !== null) {
                            var result11 = result21;
                          } else {
                            if (input.substr(pos, 1) === "r") {
                              var result20 = "r";
                              pos += 1;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"r\"");
                              }
                            }
                            if (result20 !== null) {
                              var result11 = result20;
                            } else {
                              var result11 = null;;
                            };
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === "E") {
                              var result19 = "E";
                              pos += 1;
                            } else {
                              var result19 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"E\"");
                              }
                            }
                            if (result19 !== null) {
                              var result12 = result19;
                            } else {
                              if (input.substr(pos, 1) === "e") {
                                var result18 = "e";
                                pos += 1;
                              } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"e\"");
                                }
                              }
                              if (result18 !== null) {
                                var result12 = result18;
                              } else {
                                var result12 = null;;
                              };
                            }
                            if (result12 !== null) {
                              var result13 = [];
                              var result17 = parse_WS();
                              while (result17 !== null) {
                                result13.push(result17);
                                var result17 = parse_WS();
                              }
                              if (result13 !== null) {
                                var result14 = parse_GroupGraphPattern();
                                if (result14 !== null) {
                                  var result15 = [];
                                  var result16 = parse_WS();
                                  while (result16 !== null) {
                                    result15.push(result16);
                                    var result16 = parse_WS();
                                  }
                                  if (result15 !== null) {
                                    var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(wg, dic, uc, p) {
                var query = {};
                query.kind = 'modify';
          
                if(wg != "") {
                    query['with'] = wg[5];
                } else {
                    query['with'] = null;
                }
          
          
                if(dic.length === 3 && dic[2] === '') {
                    query['delete'] = dic[0];
                    query.insert = null;
                } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
                    query['delete'] = dic[0];
                    query.insert = dic[2];
                } else  {
                    query.insert = dic;
                    query['delete'] = null;
                }
          
                if(uc != '') {
                    query['using'] = uc;
                }
          
                query.pattern = p;
          
                return query;
          })(result1[0], result1[2], result1[4], result1[12])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[39] Modify");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteClause() {
        var cacheKey = 'DeleteClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "D") {
          var result20 = "D";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"D\"");
          }
        }
        if (result20 !== null) {
          var result2 = result20;
        } else {
          if (input.substr(pos, 1) === "d") {
            var result19 = "d";
            pos += 1;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"d\"");
            }
          }
          if (result19 !== null) {
            var result2 = result19;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "E") {
            var result18 = "E";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"E\"");
            }
          }
          if (result18 !== null) {
            var result3 = result18;
          } else {
            if (input.substr(pos, 1) === "e") {
              var result17 = "e";
              pos += 1;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"e\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "L") {
              var result16 = "L";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"L\"");
              }
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              if (input.substr(pos, 1) === "l") {
                var result15 = "l";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"l\"");
                }
              }
              if (result15 !== null) {
                var result4 = result15;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result14 = "E";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result14 !== null) {
                var result5 = result14;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result13 = "e";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result13 !== null) {
                  var result5 = result13;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result12 = "T";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result12 !== null) {
                  var result6 = result12;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result11 = "t";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result11 !== null) {
                    var result6 = result11;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result10 = "E";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result9 = "e";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = parse_QuadPattern();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(q) {
                return q;
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[40] DeleteClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_InsertClause() {
        var cacheKey = 'InsertClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "I") {
          var result20 = "I";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"I\"");
          }
        }
        if (result20 !== null) {
          var result2 = result20;
        } else {
          if (input.substr(pos, 1) === "i") {
            var result19 = "i";
            pos += 1;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"i\"");
            }
          }
          if (result19 !== null) {
            var result2 = result19;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "N") {
            var result18 = "N";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"N\"");
            }
          }
          if (result18 !== null) {
            var result3 = result18;
          } else {
            if (input.substr(pos, 1) === "n") {
              var result17 = "n";
              pos += 1;
            } else {
              var result17 = null;
              if (reportMatchFailures) {
                matchFailed("\"n\"");
              }
            }
            if (result17 !== null) {
              var result3 = result17;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "S") {
              var result16 = "S";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"S\"");
              }
            }
            if (result16 !== null) {
              var result4 = result16;
            } else {
              if (input.substr(pos, 1) === "s") {
                var result15 = "s";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"s\"");
                }
              }
              if (result15 !== null) {
                var result4 = result15;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result14 = "E";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result14 !== null) {
                var result5 = result14;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result13 = "e";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result13 !== null) {
                  var result5 = result13;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "R") {
                  var result12 = "R";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"R\"");
                  }
                }
                if (result12 !== null) {
                  var result6 = result12;
                } else {
                  if (input.substr(pos, 1) === "r") {
                    var result11 = "r";
                    pos += 1;
                  } else {
                    var result11 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"r\"");
                    }
                  }
                  if (result11 !== null) {
                    var result6 = result11;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "T") {
                    var result10 = "T";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (result10 !== null) {
                    var result7 = result10;
                  } else {
                    if (input.substr(pos, 1) === "t") {
                      var result9 = "t";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"t\"");
                      }
                    }
                    if (result9 !== null) {
                      var result7 = result9;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = parse_QuadPattern();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(q) {
            return q;
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[41] InsertClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UsingClause() {
        var cacheKey = 'UsingClause@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result41 = parse_WS();
        while (result41 !== null) {
          result2.push(result41);
          var result41 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "U") {
            var result40 = "U";
            pos += 1;
          } else {
            var result40 = null;
            if (reportMatchFailures) {
              matchFailed("\"U\"");
            }
          }
          if (result40 !== null) {
            var result3 = result40;
          } else {
            if (input.substr(pos, 1) === "u") {
              var result39 = "u";
              pos += 1;
            } else {
              var result39 = null;
              if (reportMatchFailures) {
                matchFailed("\"u\"");
              }
            }
            if (result39 !== null) {
              var result3 = result39;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "S") {
              var result38 = "S";
              pos += 1;
            } else {
              var result38 = null;
              if (reportMatchFailures) {
                matchFailed("\"S\"");
              }
            }
            if (result38 !== null) {
              var result4 = result38;
            } else {
              if (input.substr(pos, 1) === "s") {
                var result37 = "s";
                pos += 1;
              } else {
                var result37 = null;
                if (reportMatchFailures) {
                  matchFailed("\"s\"");
                }
              }
              if (result37 !== null) {
                var result4 = result37;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "I") {
                var result36 = "I";
                pos += 1;
              } else {
                var result36 = null;
                if (reportMatchFailures) {
                  matchFailed("\"I\"");
                }
              }
              if (result36 !== null) {
                var result5 = result36;
              } else {
                if (input.substr(pos, 1) === "i") {
                  var result35 = "i";
                  pos += 1;
                } else {
                  var result35 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"i\"");
                  }
                }
                if (result35 !== null) {
                  var result5 = result35;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "N") {
                  var result34 = "N";
                  pos += 1;
                } else {
                  var result34 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"N\"");
                  }
                }
                if (result34 !== null) {
                  var result6 = result34;
                } else {
                  if (input.substr(pos, 1) === "n") {
                    var result33 = "n";
                    pos += 1;
                  } else {
                    var result33 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"n\"");
                    }
                  }
                  if (result33 !== null) {
                    var result6 = result33;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "G") {
                    var result32 = "G";
                    pos += 1;
                  } else {
                    var result32 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"G\"");
                    }
                  }
                  if (result32 !== null) {
                    var result7 = result32;
                  } else {
                    if (input.substr(pos, 1) === "g") {
                      var result31 = "g";
                      pos += 1;
                    } else {
                      var result31 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"g\"");
                      }
                    }
                    if (result31 !== null) {
                      var result7 = result31;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result30 = parse_WS();
                    while (result30 !== null) {
                      result8.push(result30);
                      var result30 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result29 = parse_IRIref();
                      if (result29 !== null) {
                        var result9 = result29;
                      } else {
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "N") {
                          var result28 = "N";
                          pos += 1;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"N\"");
                          }
                        }
                        if (result28 !== null) {
                          var result11 = result28;
                        } else {
                          if (input.substr(pos, 1) === "n") {
                            var result27 = "n";
                            pos += 1;
                          } else {
                            var result27 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"n\"");
                            }
                          }
                          if (result27 !== null) {
                            var result11 = result27;
                          } else {
                            var result11 = null;;
                          };
                        }
                        if (result11 !== null) {
                          if (input.substr(pos, 1) === "A") {
                            var result26 = "A";
                            pos += 1;
                          } else {
                            var result26 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"A\"");
                            }
                          }
                          if (result26 !== null) {
                            var result12 = result26;
                          } else {
                            if (input.substr(pos, 1) === "a") {
                              var result25 = "a";
                              pos += 1;
                            } else {
                              var result25 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"a\"");
                              }
                            }
                            if (result25 !== null) {
                              var result12 = result25;
                            } else {
                              var result12 = null;;
                            };
                          }
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === "M") {
                              var result24 = "M";
                              pos += 1;
                            } else {
                              var result24 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"M\"");
                              }
                            }
                            if (result24 !== null) {
                              var result13 = result24;
                            } else {
                              if (input.substr(pos, 1) === "m") {
                                var result23 = "m";
                                pos += 1;
                              } else {
                                var result23 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"m\"");
                                }
                              }
                              if (result23 !== null) {
                                var result13 = result23;
                              } else {
                                var result13 = null;;
                              };
                            }
                            if (result13 !== null) {
                              if (input.substr(pos, 1) === "E") {
                                var result22 = "E";
                                pos += 1;
                              } else {
                                var result22 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"E\"");
                                }
                              }
                              if (result22 !== null) {
                                var result14 = result22;
                              } else {
                                if (input.substr(pos, 1) === "e") {
                                  var result21 = "e";
                                  pos += 1;
                                } else {
                                  var result21 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"e\"");
                                  }
                                }
                                if (result21 !== null) {
                                  var result14 = result21;
                                } else {
                                  var result14 = null;;
                                };
                              }
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === "D") {
                                  var result20 = "D";
                                  pos += 1;
                                } else {
                                  var result20 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"D\"");
                                  }
                                }
                                if (result20 !== null) {
                                  var result15 = result20;
                                } else {
                                  if (input.substr(pos, 1) === "d") {
                                    var result19 = "d";
                                    pos += 1;
                                  } else {
                                    var result19 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"d\"");
                                    }
                                  }
                                  if (result19 !== null) {
                                    var result15 = result19;
                                  } else {
                                    var result15 = null;;
                                  };
                                }
                                if (result15 !== null) {
                                  var result16 = [];
                                  var result18 = parse_WS();
                                  while (result18 !== null) {
                                    result16.push(result18);
                                    var result18 = parse_WS();
                                  }
                                  if (result16 !== null) {
                                    var result17 = parse_IRIref();
                                    if (result17 !== null) {
                                      var result10 = [result11, result12, result13, result14, result15, result16, result17];
                                    } else {
                                      var result10 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result10 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result10 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result10 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result10 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result10 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result10 = null;
                          pos = savedPos1;
                        }
                        if (result10 !== null) {
                          var result9 = result10;
                        } else {
                          var result9 = null;;
                        };
                      }
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g) {
                if(g.length!=null) {
                    return {kind: 'named', uri: g[6]};
                } else {
                    return {kind: 'default', uri: g};
                }
          })(result1[7])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[42] UsingClause");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphRef() {
        var cacheKey = 'GraphRef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "G") {
          var result19 = "G";
          pos += 1;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("\"G\"");
          }
        }
        if (result19 !== null) {
          var result2 = result19;
        } else {
          if (input.substr(pos, 1) === "g") {
            var result18 = "g";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\"g\"");
            }
          }
          if (result18 !== null) {
            var result2 = result18;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result17 = "R";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result16 = "r";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result16 !== null) {
              var result3 = result16;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "A") {
              var result15 = "A";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"A\"");
              }
            }
            if (result15 !== null) {
              var result4 = result15;
            } else {
              if (input.substr(pos, 1) === "a") {
                var result14 = "a";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "P") {
                var result13 = "P";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"P\"");
                }
              }
              if (result13 !== null) {
                var result5 = result13;
              } else {
                if (input.substr(pos, 1) === "p") {
                  var result12 = "p";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"p\"");
                  }
                }
                if (result12 !== null) {
                  var result5 = result12;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "H") {
                  var result11 = "H";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"H\"");
                  }
                }
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  if (input.substr(pos, 1) === "h") {
                    var result10 = "h";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"h\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result9 = parse_WS();
                  while (result9 !== null) {
                    result7.push(result9);
                    var result9 = parse_WS();
                  }
                  if (result7 !== null) {
                    var result8 = parse_IRIref();
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i) {
                return i;
          })(result1[6])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[43] GraphRef");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphRefAll() {
        var cacheKey = 'GraphRefAll@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result53 = parse_GraphRef();
        var result52 = result53 !== null
          ? (function(g) {
                return g;
          })(result53)
          : null;
        if (result52 !== null) {
          var result0 = result52;
        } else {
          var savedPos2 = pos;
          if (input.substr(pos, 1) === "D") {
            var result51 = "D";
            pos += 1;
          } else {
            var result51 = null;
            if (reportMatchFailures) {
              matchFailed("\"D\"");
            }
          }
          if (result51 !== null) {
            var result31 = result51;
          } else {
            if (input.substr(pos, 1) === "d") {
              var result50 = "d";
              pos += 1;
            } else {
              var result50 = null;
              if (reportMatchFailures) {
                matchFailed("\"d\"");
              }
            }
            if (result50 !== null) {
              var result31 = result50;
            } else {
              var result31 = null;;
            };
          }
          if (result31 !== null) {
            if (input.substr(pos, 1) === "E") {
              var result49 = "E";
              pos += 1;
            } else {
              var result49 = null;
              if (reportMatchFailures) {
                matchFailed("\"E\"");
              }
            }
            if (result49 !== null) {
              var result32 = result49;
            } else {
              if (input.substr(pos, 1) === "e") {
                var result48 = "e";
                pos += 1;
              } else {
                var result48 = null;
                if (reportMatchFailures) {
                  matchFailed("\"e\"");
                }
              }
              if (result48 !== null) {
                var result32 = result48;
              } else {
                var result32 = null;;
              };
            }
            if (result32 !== null) {
              if (input.substr(pos, 1) === "F") {
                var result47 = "F";
                pos += 1;
              } else {
                var result47 = null;
                if (reportMatchFailures) {
                  matchFailed("\"F\"");
                }
              }
              if (result47 !== null) {
                var result33 = result47;
              } else {
                if (input.substr(pos, 1) === "f") {
                  var result46 = "f";
                  pos += 1;
                } else {
                  var result46 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"f\"");
                  }
                }
                if (result46 !== null) {
                  var result33 = result46;
                } else {
                  var result33 = null;;
                };
              }
              if (result33 !== null) {
                if (input.substr(pos, 1) === "A") {
                  var result45 = "A";
                  pos += 1;
                } else {
                  var result45 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"A\"");
                  }
                }
                if (result45 !== null) {
                  var result34 = result45;
                } else {
                  if (input.substr(pos, 1) === "a") {
                    var result44 = "a";
                    pos += 1;
                  } else {
                    var result44 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"a\"");
                    }
                  }
                  if (result44 !== null) {
                    var result34 = result44;
                  } else {
                    var result34 = null;;
                  };
                }
                if (result34 !== null) {
                  if (input.substr(pos, 1) === "U") {
                    var result43 = "U";
                    pos += 1;
                  } else {
                    var result43 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"U\"");
                    }
                  }
                  if (result43 !== null) {
                    var result35 = result43;
                  } else {
                    if (input.substr(pos, 1) === "u") {
                      var result42 = "u";
                      pos += 1;
                    } else {
                      var result42 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"u\"");
                      }
                    }
                    if (result42 !== null) {
                      var result35 = result42;
                    } else {
                      var result35 = null;;
                    };
                  }
                  if (result35 !== null) {
                    if (input.substr(pos, 1) === "L") {
                      var result41 = "L";
                      pos += 1;
                    } else {
                      var result41 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"L\"");
                      }
                    }
                    if (result41 !== null) {
                      var result36 = result41;
                    } else {
                      if (input.substr(pos, 1) === "l") {
                        var result40 = "l";
                        pos += 1;
                      } else {
                        var result40 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"l\"");
                        }
                      }
                      if (result40 !== null) {
                        var result36 = result40;
                      } else {
                        var result36 = null;;
                      };
                    }
                    if (result36 !== null) {
                      if (input.substr(pos, 1) === "T") {
                        var result39 = "T";
                        pos += 1;
                      } else {
                        var result39 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"T\"");
                        }
                      }
                      if (result39 !== null) {
                        var result37 = result39;
                      } else {
                        if (input.substr(pos, 1) === "t") {
                          var result38 = "t";
                          pos += 1;
                        } else {
                          var result38 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"t\"");
                          }
                        }
                        if (result38 !== null) {
                          var result37 = result38;
                        } else {
                          var result37 = null;;
                        };
                      }
                      if (result37 !== null) {
                        var result30 = [result31, result32, result33, result34, result35, result36, result37];
                      } else {
                        var result30 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result30 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result30 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result30 = null;
                  pos = savedPos2;
                }
              } else {
                var result30 = null;
                pos = savedPos2;
              }
            } else {
              var result30 = null;
              pos = savedPos2;
            }
          } else {
            var result30 = null;
            pos = savedPos2;
          }
          var result29 = result30 !== null
            ? (function() {
                  return 'default';
            })()
            : null;
          if (result29 !== null) {
            var result0 = result29;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "N") {
              var result28 = "N";
              pos += 1;
            } else {
              var result28 = null;
              if (reportMatchFailures) {
                matchFailed("\"N\"");
              }
            }
            if (result28 !== null) {
              var result14 = result28;
            } else {
              if (input.substr(pos, 1) === "n") {
                var result27 = "n";
                pos += 1;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"n\"");
                }
              }
              if (result27 !== null) {
                var result14 = result27;
              } else {
                var result14 = null;;
              };
            }
            if (result14 !== null) {
              if (input.substr(pos, 1) === "A") {
                var result26 = "A";
                pos += 1;
              } else {
                var result26 = null;
                if (reportMatchFailures) {
                  matchFailed("\"A\"");
                }
              }
              if (result26 !== null) {
                var result15 = result26;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result25 = "a";
                  pos += 1;
                } else {
                  var result25 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result25 !== null) {
                  var result15 = result25;
                } else {
                  var result15 = null;;
                };
              }
              if (result15 !== null) {
                if (input.substr(pos, 1) === "M") {
                  var result24 = "M";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"M\"");
                  }
                }
                if (result24 !== null) {
                  var result16 = result24;
                } else {
                  if (input.substr(pos, 1) === "m") {
                    var result23 = "m";
                    pos += 1;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"m\"");
                    }
                  }
                  if (result23 !== null) {
                    var result16 = result23;
                  } else {
                    var result16 = null;;
                  };
                }
                if (result16 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result22 = "E";
                    pos += 1;
                  } else {
                    var result22 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result22 !== null) {
                    var result17 = result22;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result21 = "e";
                      pos += 1;
                    } else {
                      var result21 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result21 !== null) {
                      var result17 = result21;
                    } else {
                      var result17 = null;;
                    };
                  }
                  if (result17 !== null) {
                    if (input.substr(pos, 1) === "D") {
                      var result20 = "D";
                      pos += 1;
                    } else {
                      var result20 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"D\"");
                      }
                    }
                    if (result20 !== null) {
                      var result18 = result20;
                    } else {
                      if (input.substr(pos, 1) === "d") {
                        var result19 = "d";
                        pos += 1;
                      } else {
                        var result19 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"d\"");
                        }
                      }
                      if (result19 !== null) {
                        var result18 = result19;
                      } else {
                        var result18 = null;;
                      };
                    }
                    if (result18 !== null) {
                      var result13 = [result14, result15, result16, result17, result18];
                    } else {
                      var result13 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos1;
                }
              } else {
                var result13 = null;
                pos = savedPos1;
              }
            } else {
              var result13 = null;
              pos = savedPos1;
            }
            var result12 = result13 !== null
              ? (function() {
                    return 'named';
              })()
              : null;
            if (result12 !== null) {
              var result0 = result12;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "A") {
                var result11 = "A";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"A\"");
                }
              }
              if (result11 !== null) {
                var result3 = result11;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result10 = "a";
                  pos += 1;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result10 !== null) {
                  var result3 = result10;
                } else {
                  var result3 = null;;
                };
              }
              if (result3 !== null) {
                if (input.substr(pos, 1) === "L") {
                  var result9 = "L";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"L\"");
                  }
                }
                if (result9 !== null) {
                  var result4 = result9;
                } else {
                  if (input.substr(pos, 1) === "l") {
                    var result8 = "l";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"l\"");
                    }
                  }
                  if (result8 !== null) {
                    var result4 = result8;
                  } else {
                    var result4 = null;;
                  };
                }
                if (result4 !== null) {
                  if (input.substr(pos, 1) === "L") {
                    var result7 = "L";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"L\"");
                    }
                  }
                  if (result7 !== null) {
                    var result5 = result7;
                  } else {
                    if (input.substr(pos, 1) === "l") {
                      var result6 = "l";
                      pos += 1;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"l\"");
                      }
                    }
                    if (result6 !== null) {
                      var result5 = result6;
                    } else {
                      var result5 = null;;
                    };
                  }
                  if (result5 !== null) {
                    var result2 = [result3, result4, result5];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function() {
                      return 'all';
                })()
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[44] GraphRefAll");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadPattern() {
        var cacheKey = 'QuadPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_Quads();
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[45] QuadPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadData() {
        var cacheKey = 'QuadData@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_Quads();
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qs) {
                return qs.quadsContext;
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[46] QuadData");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Quads() {
        var cacheKey = 'Quads@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result10 = parse_TriplesTemplate();
        var result2 = result10 !== null ? result10 : '';
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_QuadsNotTriples();
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result9 = ".";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            var result6 = result9 !== null ? result9 : '';
            if (result6 !== null) {
              var result8 = parse_TriplesTemplate();
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_QuadsNotTriples();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ".") {
                var result9 = ".";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                var result8 = parse_TriplesTemplate();
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result4 = [result5, result6, result7];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ts, qs) {
                var quads = []
                if(ts.triplesContext != null && ts.triplesContext != null) {
                  for(var i=0; i<ts.triplesContext.length; i++) {
                      var triple = ts.triplesContext[i]
                      triple.graph = null;
                      quads.push(triple)
                  }
                }
          
                if(qs && qs.length>0 && qs[0].length > 0) {
                    quads = quads.concat(qs[0][0].quadsContext);
          
                    if( qs[0][2] != null && qs[0][2].triplesContext != null) {
                      for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                          var triple = qs[0][2].triplesContext[i]
                          triple.graph = null;
                          quads.push(triple)
                      }
                    }
                }
          
                return {token:'quads',
                        quadsContext: quads}
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[47] Quads");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_QuadsNotTriples() {
        var cacheKey = 'QuadsNotTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result33 = parse_WS();
        while (result33 !== null) {
          result2.push(result33);
          var result33 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "G") {
            var result32 = "G";
            pos += 1;
          } else {
            var result32 = null;
            if (reportMatchFailures) {
              matchFailed("\"G\"");
            }
          }
          if (result32 !== null) {
            var result3 = result32;
          } else {
            if (input.substr(pos, 1) === "g") {
              var result31 = "g";
              pos += 1;
            } else {
              var result31 = null;
              if (reportMatchFailures) {
                matchFailed("\"g\"");
              }
            }
            if (result31 !== null) {
              var result3 = result31;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "R") {
              var result30 = "R";
              pos += 1;
            } else {
              var result30 = null;
              if (reportMatchFailures) {
                matchFailed("\"R\"");
              }
            }
            if (result30 !== null) {
              var result4 = result30;
            } else {
              if (input.substr(pos, 1) === "r") {
                var result29 = "r";
                pos += 1;
              } else {
                var result29 = null;
                if (reportMatchFailures) {
                  matchFailed("\"r\"");
                }
              }
              if (result29 !== null) {
                var result4 = result29;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "A") {
                var result28 = "A";
                pos += 1;
              } else {
                var result28 = null;
                if (reportMatchFailures) {
                  matchFailed("\"A\"");
                }
              }
              if (result28 !== null) {
                var result5 = result28;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result27 = "a";
                  pos += 1;
                } else {
                  var result27 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result27 !== null) {
                  var result5 = result27;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "P") {
                  var result26 = "P";
                  pos += 1;
                } else {
                  var result26 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"P\"");
                  }
                }
                if (result26 !== null) {
                  var result6 = result26;
                } else {
                  if (input.substr(pos, 1) === "p") {
                    var result25 = "p";
                    pos += 1;
                  } else {
                    var result25 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"p\"");
                    }
                  }
                  if (result25 !== null) {
                    var result6 = result25;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "H") {
                    var result24 = "H";
                    pos += 1;
                  } else {
                    var result24 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"H\"");
                    }
                  }
                  if (result24 !== null) {
                    var result7 = result24;
                  } else {
                    if (input.substr(pos, 1) === "h") {
                      var result23 = "h";
                      pos += 1;
                    } else {
                      var result23 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"h\"");
                      }
                    }
                    if (result23 !== null) {
                      var result7 = result23;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result22 = parse_WS();
                    while (result22 !== null) {
                      result8.push(result22);
                      var result22 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result9 = parse_VarOrIRIref();
                      if (result9 !== null) {
                        var result10 = [];
                        var result21 = parse_WS();
                        while (result21 !== null) {
                          result10.push(result21);
                          var result21 = parse_WS();
                        }
                        if (result10 !== null) {
                          if (input.substr(pos, 1) === "{") {
                            var result11 = "{";
                            pos += 1;
                          } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"{\"");
                            }
                          }
                          if (result11 !== null) {
                            var result12 = [];
                            var result20 = parse_WS();
                            while (result20 !== null) {
                              result12.push(result20);
                              var result20 = parse_WS();
                            }
                            if (result12 !== null) {
                              var result19 = parse_TriplesTemplate();
                              var result13 = result19 !== null ? result19 : '';
                              if (result13 !== null) {
                                var result14 = [];
                                var result18 = parse_WS();
                                while (result18 !== null) {
                                  result14.push(result18);
                                  var result18 = parse_WS();
                                }
                                if (result14 !== null) {
                                  if (input.substr(pos, 1) === "}") {
                                    var result15 = "}";
                                    pos += 1;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result16 = [];
                                    var result17 = parse_WS();
                                    while (result17 !== null) {
                                      result16.push(result17);
                                      var result17 = parse_WS();
                                    }
                                    if (result16 !== null) {
                                      var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g, ts) {
                var quads = []
                for(var i=0; i<ts.triplesContext.length; i++) {
                    var triple = ts.triplesContext[i]
                    triple.graph = g;
                    quads.push(triple)
                }
          
                return {token:'quadsnottriples',
                        quadsContext: quads}
          })(result1[7], result1[11])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[48] QuadsNotTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesTemplate() {
        var cacheKey = 'TriplesTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject();
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result5.push(result11);
            var result11 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result7.push(result10);
                var result10 = parse_WS();
              }
              if (result7 !== null) {
                var result9 = parse_TriplesTemplate();
                var result8 = result9 !== null ? result9 : '';
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[3].triplesContext!=null) {
                               triples = triples.concat(bs[3].triplesContext);
                        }
                     }
                }
          
               return {token:'triplestemplate',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[49] TriplesTemplate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupGraphPattern() {
        var cacheKey = 'GroupGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result12 = "{";
          pos += 1;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result12 !== null) {
          var result13 = [];
          var result18 = parse_WS();
          while (result18 !== null) {
            result13.push(result18);
            var result18 = parse_WS();
          }
          if (result13 !== null) {
            var result14 = parse_SubSelect();
            if (result14 !== null) {
              var result15 = [];
              var result17 = parse_WS();
              while (result17 !== null) {
                result15.push(result17);
                var result17 = parse_WS();
              }
              if (result15 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result16 = "}";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result16 !== null) {
                  var result11 = [result12, result13, result14, result15, result16];
                } else {
                  var result11 = null;
                  pos = savedPos1;
                }
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
        } else {
          var result11 = null;
          pos = savedPos1;
        }
        var result10 = result11 !== null
          ? (function(p) {
                return p;
          })(result11[2])
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "{") {
            var result3 = "{";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_WS();
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_GroupGraphPatternSub();
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_WS();
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "}") {
                    var result7 = "}";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(p) {
                  return p;
            })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[50] GroupGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupGraphPatternSub() {
        var cacheKey = 'GroupGraphPatternSub@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result16 = parse_TriplesBlock();
        var result2 = result16 !== null ? result16 : '';
        if (result2 !== null) {
          var result3 = [];
          var result15 = parse_WS();
          while (result15 !== null) {
            result3.push(result15);
            var result15 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result6 = parse_GraphPatternNotTriples();
            if (result6 !== null) {
              var result7 = [];
              var result14 = parse_WS();
              while (result14 !== null) {
                result7.push(result14);
                var result14 = parse_WS();
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ".") {
                  var result13 = ".";
                  pos += 1;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\".\"");
                  }
                }
                var result8 = result13 !== null ? result13 : '';
                if (result8 !== null) {
                  var result9 = [];
                  var result12 = parse_WS();
                  while (result12 !== null) {
                    result9.push(result12);
                    var result12 = parse_WS();
                  }
                  if (result9 !== null) {
                    var result11 = parse_TriplesBlock();
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result5 = [result6, result7, result8, result9, result10];
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              var result6 = parse_GraphPatternNotTriples();
              if (result6 !== null) {
                var result7 = [];
                var result14 = parse_WS();
                while (result14 !== null) {
                  result7.push(result14);
                  var result14 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ".") {
                    var result13 = ".";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\".\"");
                    }
                  }
                  var result8 = result13 !== null ? result13 : '';
                  if (result8 !== null) {
                    var result9 = [];
                    var result12 = parse_WS();
                    while (result12 !== null) {
                      result9.push(result12);
                      var result12 = parse_WS();
                    }
                    if (result9 !== null) {
                      var result11 = parse_TriplesBlock();
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result5 = [result6, result7, result8, result9, result10];
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(tb, tbs) {
                var subpatterns = [];
                if(tb != null && tb != []) {
                    subpatterns.push(tb);
                }
          
                for(var i=0; i<tbs.length; i++) {
                    for(var j=0; j< tbs[i].length; j++) {
                        if(tbs[i][j].token != null) {
                            subpatterns.push(tbs[i][j]);
                        }
                    }
                }
          
                var compactedSubpatterns = [];
          
                var currentBasicGraphPatterns = [];
                var currentFilters = [];
          
                for(var i=0; i<subpatterns.length; i++) {
                    if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                        if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                            var triplesContext = [];
                            for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                                triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                            }
                            if(triplesContext.length > 0) {  
                                compactedSubpatterns.push({token: 'basicgraphpattern',
                                                           triplesContext: triplesContext});
                            }
                            currentBasicGraphPatterns = [];
                        }
                        compactedSubpatterns.push(subpatterns[i]);
                    } else {
                        if(subpatterns[i].token === 'triplespattern') {
                            currentBasicGraphPatterns.push(subpatterns[i]);
                        } else {
                            currentFilters.push(subpatterns[i]);
                        }
                    }
                }
          
                if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                    var triplesContext = [];
                    for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                        triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                    }
                    if(triplesContext.length > 0) {
                      compactedSubpatterns.push({token: 'basicgraphpattern',
                                                 triplesContext: triplesContext});
                    }
                }
          
          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
                    return { token: 'groupgraphpattern',
                             patterns: compactedSubpatterns,
                             filters: currentFilters }
          //      }
          })(result1[0], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[51] GroupGraphPatternSub");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesBlock() {
        var cacheKey = 'TriplesBlock@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject();
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result5.push(result9);
            var result9 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result8 = parse_TriplesBlock();
              var result7 = result8 !== null ? result8 : '';
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[2].triplesContext!=null) {
                               triples = triples.concat(bs[2].triplesContext);
                        }
                     }
                }
          
               return {token:'triplespattern',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[54] TriplesBlock");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphPatternNotTriples() {
        var cacheKey = 'GraphPatternNotTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_GroupOrUnionGraphPattern();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_OptionalGraphPattern();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_MinusGraphPattern();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_GraphGraphPattern();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_ServiceGraphPattern();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_Filter();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[53] GraphPatternNotTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OptionalGraphPattern() {
        var cacheKey = 'OptionalGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result7 = parse_WS();
        while (result7 !== null) {
          result2.push(result7);
          var result7 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 8) === "OPTIONAL") {
            var result3 = "OPTIONAL";
            pos += 8;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"OPTIONAL\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result6 = parse_WS();
            while (result6 !== null) {
              result4.push(result6);
              var result6 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_GroupGraphPattern();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) {
                return { token: 'optionalgraphpattern',
                         value: v }
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[54] OptionalGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphGraphPattern() {
        var cacheKey = 'GraphGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result10 = parse_WS();
        while (result10 !== null) {
          result2.push(result10);
          var result10 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "GRAPH") {
            var result3 = "GRAPH";
            pos += 5;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"GRAPH\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result9 = parse_WS();
            while (result9 !== null) {
              result4.push(result9);
              var result9 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_VarOrIRIref();
              if (result5 !== null) {
                var result6 = [];
                var result8 = parse_WS();
                while (result8 !== null) {
                  result6.push(result8);
                  var result8 = parse_WS();
                }
                if (result6 !== null) {
                  var result7 = parse_GroupGraphPattern();
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(g, gg) {
                for(var i=0; i<gg.patterns.length; i++) {
                  var quads = []
                  var ts = gg.patterns[i];
                  for(var j=0; j<ts.triplesContext.length; j++) {
                      var triple = ts.triplesContext[j]
                      triple.graph = g;
                  }
                }
          
                gg.token = 'groupgraphpattern'
                return gg;
          })(result1[3], result1[5])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[55] GraphGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ServiceGraphPattern() {
        var cacheKey = 'ServiceGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 7) === "SERVICE") {
          var result2 = "SERVICE";
          pos += 7;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"SERVICE\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_VarOrIRIref();
          if (result3 !== null) {
            var result4 = parse_GroupGraphPattern();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ts) {
                return {token: 'servicegraphpattern',
                        status: 'todo',
                        value: [v,ts] }
          })(result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[56] ServiceGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MinusGraphPattern() {
        var cacheKey = 'MinusGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "MINUS") {
          var result2 = "MINUS";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"MINUS\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_GroupGraphPattern();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ts) {
                return {token: 'minusgraphpattern',
                        status: 'todo',
                        value: ts}
          })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[57] MinusGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GroupOrUnionGraphPattern() {
        var cacheKey = 'GroupOrUnionGraphPattern@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GroupGraphPattern();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 5) === "UNION") {
              var result6 = "UNION";
              pos += 5;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"UNION\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS();
              }
              if (result7 !== null) {
                var result8 = parse_GroupGraphPattern();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              if (input.substr(pos, 5) === "UNION") {
                var result6 = "UNION";
                pos += 5;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"UNION\"");
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_GroupGraphPattern();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {
                if(b.length === 0) {
                    return a;
                } else {
          
                    var lastToken = {token: 'graphunionpattern',
                                     value: [a]};
          
                    for(var i=0; i<b.length; i++) {
                        if(i==b.length-1) {
                            lastToken.value.push(b[i][3]);
                        } else {
                            lastToken.value.push(b[i][3]);
                            var newToken = {token: 'graphunionpattern',
                                            value: [lastToken]}
          
                            lastToken = newToken;
                        }
                    }
          
                    return lastToken;
          
                }
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[58] GroupOrUnionGraphPattern");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Filter() {
        var cacheKey = 'Filter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result24 = parse_WS();
        while (result24 !== null) {
          result2.push(result24);
          var result24 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "F") {
            var result23 = "F";
            pos += 1;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("\"F\"");
            }
          }
          if (result23 !== null) {
            var result3 = result23;
          } else {
            if (input.substr(pos, 1) === "f") {
              var result22 = "f";
              pos += 1;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("\"f\"");
              }
            }
            if (result22 !== null) {
              var result3 = result22;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "I") {
              var result21 = "I";
              pos += 1;
            } else {
              var result21 = null;
              if (reportMatchFailures) {
                matchFailed("\"I\"");
              }
            }
            if (result21 !== null) {
              var result4 = result21;
            } else {
              if (input.substr(pos, 1) === "i") {
                var result20 = "i";
                pos += 1;
              } else {
                var result20 = null;
                if (reportMatchFailures) {
                  matchFailed("\"i\"");
                }
              }
              if (result20 !== null) {
                var result4 = result20;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "L") {
                var result19 = "L";
                pos += 1;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"L\"");
                }
              }
              if (result19 !== null) {
                var result5 = result19;
              } else {
                if (input.substr(pos, 1) === "l") {
                  var result18 = "l";
                  pos += 1;
                } else {
                  var result18 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"l\"");
                  }
                }
                if (result18 !== null) {
                  var result5 = result18;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result17 = "T";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result17 !== null) {
                  var result6 = result17;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result16 = "t";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result16 !== null) {
                    var result6 = result16;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result15 = "E";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result15 !== null) {
                    var result7 = result15;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result14 = "e";
                      pos += 1;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result14 !== null) {
                      var result7 = result14;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "R") {
                      var result13 = "R";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"R\"");
                      }
                    }
                    if (result13 !== null) {
                      var result8 = result13;
                    } else {
                      if (input.substr(pos, 1) === "r") {
                        var result12 = "r";
                        pos += 1;
                      } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"r\"");
                        }
                      }
                      if (result12 !== null) {
                        var result8 = result12;
                      } else {
                        var result8 = null;;
                      };
                    }
                    if (result8 !== null) {
                      var result9 = [];
                      var result11 = parse_WS();
                      while (result11 !== null) {
                        result9.push(result11);
                        var result11 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result10 = parse_Constraint();
                        if (result10 !== null) {
                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10];
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(c) {
                return {token: 'filter',
                        value: c}
          })(result1[8])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[59] Filter");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Constraint() {
        var cacheKey = 'Constraint@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_BrackettedExpression();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_BuiltInCall();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_FunctionCall();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[60] Constraint");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionCall() {
        var cacheKey = 'FunctionCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_IRIref();
        if (result2 !== null) {
          var result3 = parse_ArgList();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i, args) {
                var fcall = {};
                fcall.token = "expression";
                fcall.expressionType = 'irireforfunction'
                fcall.iriref = i;
                fcall.args = args.value;
          
                return fcall;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[61] FunctionCall");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArgList() {
        var cacheKey = 'ArgList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result13 = parse_NIL();
        var result12 = result13 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 8) === "DISTINCT") {
              var result11 = "DISTINCT";
              pos += 8;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"DISTINCT\"");
              }
            }
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              var result5 = parse_ConditionalOrExpression();
              if (result5 !== null) {
                var result6 = [];
                var savedPos1 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result9 = ",";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_ConditionalOrExpression();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
                while (result8 !== null) {
                  result6.push(result8);
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result9 = ",";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result9 !== null) {
                    var result10 = parse_ConditionalOrExpression();
                    if (result10 !== null) {
                      var result8 = [result9, result10];
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(d, e, es) {
                  cleanEx = [];
            
                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);
            
                  if(d==="DISTINCT") {
                      args.distinct = true;
                  } else {
                      args.distinct = false;
                  }
            
                  return args;
            })(result2[1], result2[2], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[62] ArgList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExpressionList() {
        var cacheKey = 'ExpressionList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result11 = parse_NIL();
        var result10 = result11 !== null
          ? (function() {
                var args = {};
                args.token = 'args';
                args.value = [];
                return args;
          })()
          : null;
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result4 = parse_ConditionalOrExpression();
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result8 = ",";
                pos += 1;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result8 !== null) {
                var result9 = parse_ConditionalOrExpression();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              } else {
                var result7 = null;
                pos = savedPos1;
              }
              while (result7 !== null) {
                result5.push(result7);
                var savedPos1 = pos;
                if (input.substr(pos, 1) === ",") {
                  var result8 = ",";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = parse_ConditionalOrExpression();
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(e, es) {
                  cleanEx = [];
            
                  for(var i=0; i<es.length; i++) {
                      cleanEx.push(es[i][1]);
                  }
                  var args = {};
                  args.token = 'args';
                  args.value = [e].concat(cleanEx);
            
                  return args;
            })(result2[1], result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[63] ExpressionList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructTemplate() {
        var cacheKey = 'ConstructTemplate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "{") {
          var result2 = "{";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_WS();
          while (result9 !== null) {
            result3.push(result9);
            var result9 = parse_WS();
          }
          if (result3 !== null) {
            var result8 = parse_ConstructTriples();
            var result4 = result8 !== null ? result8 : '';
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result6 = "}";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ts) {
                return ts;
          })(result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[64] ConstructTemplate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstructTriples() {
        var cacheKey = 'ConstructTriples@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_TriplesSameSubject();
        if (result2 !== null) {
          var savedPos1 = pos;
          var result5 = [];
          var result11 = parse_WS();
          while (result11 !== null) {
            result5.push(result11);
            var result11 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result6 = ".";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result10 = parse_WS();
              while (result10 !== null) {
                result7.push(result10);
                var result10 = parse_WS();
              }
              if (result7 !== null) {
                var result9 = parse_ConstructTriples();
                var result8 = result9 !== null ? result9 : '';
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(b, bs) {
               var triples = b.triplesContext;
               var toTest = null;
                if(typeof(bs) === 'object') {
                      if(bs.length != null) {
                            if(bs[3].triplesContext!=null) {
                               triples = triples.concat(bs[3].triplesContext);
                        }
                     }
                }
          
               return {token:'triplestemplate',
                       triplesContext: triples}
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[65] ConstructTriples");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesSameSubject() {
        var cacheKey = 'TriplesSameSubject@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result11 = [];
        var result16 = parse_WS();
        while (result16 !== null) {
          result11.push(result16);
          var result16 = parse_WS();
        }
        if (result11 !== null) {
          var result12 = parse_VarOrTerm();
          if (result12 !== null) {
            var result13 = [];
            var result15 = parse_WS();
            while (result15 !== null) {
              result13.push(result15);
              var result15 = parse_WS();
            }
            if (result13 !== null) {
              var result14 = parse_PropertyListNotEmpty();
              if (result14 !== null) {
                var result10 = [result11, result12, result13, result14];
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(s, pairs) {
                var triplesContext = pairs.triplesContext;
                var subject = s;
                if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
                }
          
                var token = {};
                token.token = "triplessamesubject";
                token.triplesContext = triplesContext;
                token.chainSubject = subject;
          
                return token;
            })(result10[1], result10[3])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode();
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
              if (result5 !== null) {
                var result6 = parse_PropertyList();
                if (result6 !== null) {
                  var result2 = [result3, result4, result5, result6];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(tn, pairs) {
                  var triplesContext = tn.triplesContext;
                  var subject = tn.chainSubject;
            
                  if(pairs.pairs) {
                    for(var i=0; i< pairs.pairs.length; i++) {
                        var pair = pairs.pairs[i];
                        if(tn.token === "triplesnodecollection") {
                            for(var j=0; j<subject.length; j++) {
                                var subj = subject[j];
                                if(subj.triplesContext != null) {
                                    var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                    triplesContext.concat(subj.triplesContext);
                                } else {
                                    var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        } else {
                            var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                            triplesContext.push(triple);
                        }
                    }
                  }
            
                  var token = {};
                  token.token = "triplessamesubject";
                  token.triplesContext = triplesContext;
                  token.chainSubject = subject;
            
                  return token;
              })(result2[1], result2[3])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[66] TriplesSameSubject");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmpty() {
        var cacheKey = 'PropertyListNotEmpty@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_Verb();
        if (result2 !== null) {
          var result3 = [];
          var result18 = parse_WS();
          while (result18 !== null) {
            result3.push(result18);
            var result18 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_ObjectList();
            if (result4 !== null) {
              var result5 = [];
              var savedPos1 = pos;
              var result7 = [];
              var result17 = parse_WS();
              while (result17 !== null) {
                result7.push(result17);
                var result17 = parse_WS();
              }
              if (result7 !== null) {
                if (input.substr(pos, 1) === ";") {
                  var result8 = ";";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\";\"");
                  }
                }
                if (result8 !== null) {
                  var result9 = [];
                  var result16 = parse_WS();
                  while (result16 !== null) {
                    result9.push(result16);
                    var result16 = parse_WS();
                  }
                  if (result9 !== null) {
                    var savedPos2 = pos;
                    var result12 = parse_Verb();
                    if (result12 !== null) {
                      var result13 = [];
                      var result15 = parse_WS();
                      while (result15 !== null) {
                        result13.push(result15);
                        var result15 = parse_WS();
                      }
                      if (result13 !== null) {
                        var result14 = parse_ObjectList();
                        if (result14 !== null) {
                          var result11 = [result12, result13, result14];
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result11 = null;
                      pos = savedPos2;
                    }
                    var result10 = result11 !== null ? result11 : '';
                    if (result10 !== null) {
                      var result6 = [result7, result8, result9, result10];
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              } else {
                var result6 = null;
                pos = savedPos1;
              }
              while (result6 !== null) {
                result5.push(result6);
                var savedPos1 = pos;
                var result7 = [];
                var result17 = parse_WS();
                while (result17 !== null) {
                  result7.push(result17);
                  var result17 = parse_WS();
                }
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result8 = ";";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = [];
                    var result16 = parse_WS();
                    while (result16 !== null) {
                      result9.push(result16);
                      var result16 = parse_WS();
                    }
                    if (result9 !== null) {
                      var savedPos2 = pos;
                      var result12 = parse_Verb();
                      if (result12 !== null) {
                        var result13 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                          result13.push(result15);
                          var result15 = parse_WS();
                        }
                        if (result13 !== null) {
                          var result14 = parse_ObjectList();
                          if (result14 !== null) {
                            var result11 = [result12, result13, result14];
                          } else {
                            var result11 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result11 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result11 = null;
                        pos = savedPos2;
                      }
                      var result10 = result11 !== null ? result11 : '';
                      if (result10 !== null) {
                        var result6 = [result7, result8, result9, result10];
                      } else {
                        var result6 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, ol, rest) {
                token = {}
                token.token = 'propertylist';
                var triplesContext = [];
                var pairs = [];
                var test = [];
          
                for( var i=0; i<ol.length; i++) {
          
                   if(ol[i].triplesContext != null) {
                       triplesContext = triplesContext.concat(ol[i].triplesContext);
                       if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                           pairs.push([v, ol[i].chainSubject[0]]);
                       } else {
                           pairs.push([v, ol[i].chainSubject]);
                       }
          
                    } else {
                        pairs.push([v, ol[i]])
                    }
          
                }
          
          
                for(var i=0; i<rest.length; i++) {
                    var tok = rest[i][3];
                    var newVerb  = tok[0];
                    var newObjsList = tok[2] || [];
          
                    for(var j=0; j<newObjsList.length; j++) {
                     if(newObjsList[j].triplesContext != null) {
                        triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                       pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                        pairs.push([newVerb, newObjsList[j]])
                      }
                    }
                }
          
                token.pairs = pairs;
                token.triplesContext = triplesContext;
          
                return token;
          
          })(result1[0], result1[2], result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[67] PropertyListNotEmpty");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyList() {
        var cacheKey = 'PropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[68] PropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ObjectList() {
        var cacheKey = 'ObjectList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_GraphNode();
        if (result2 !== null) {
          var result3 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result3.push(result10);
            var result10 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ",") {
              var result6 = ",";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS();
              }
              if (result7 !== null) {
                var result8 = parse_GraphNode();
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ",") {
                var result6 = ",";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_GraphNode();
                  if (result8 !== null) {
                    var result5 = [result6, result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(obj, objs) {
          
                  var toReturn = [];
          
                  toReturn.push(obj);
          
                  for(var i=0; i<objs.length; i++) {
                      for(var j=0; j<objs[i].length; j++) {
                          if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                              toReturn.push(objs[i][j]);
                          }
                      }
                  }
          
                  return toReturn;
              })(result1[0], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[69] ObjectList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Verb() {
        var cacheKey = 'Verb@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_VarOrIRIref();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result2 = "a";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          var result1 = result2 !== null
            ? (function() {
                  return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
              })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[71] Verb");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListNotEmptyPath() {
        var cacheKey = 'PropertyListNotEmptyPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result13 = parse_VerbPath();
        if (result13 !== null) {
          var result1 = result13;
        } else {
          var result12 = parse_Var();
          if (result12 !== null) {
            var result1 = result12;
          } else {
            var result1 = null;;
          };
        }
        if (result1 !== null) {
          var result2 = parse_ObjectList();
          if (result2 !== null) {
            var result3 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === ";") {
              var result5 = ";";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\";\"");
              }
            }
            if (result5 !== null) {
              var savedPos2 = pos;
              var result11 = parse_VerbPath();
              if (result11 !== null) {
                var result8 = result11;
              } else {
                var result10 = parse_Var();
                if (result10 !== null) {
                  var result8 = result10;
                } else {
                  var result8 = null;;
                };
              }
              if (result8 !== null) {
                var result9 = parse_ObjectList();
                if (result9 !== null) {
                  var result7 = [result8, result9];
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
              } else {
                var result7 = null;
                pos = savedPos2;
              }
              var result6 = result7 !== null ? result7 : '';
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            while (result4 !== null) {
              result3.push(result4);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === ";") {
                var result5 = ";";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result5 !== null) {
                var savedPos2 = pos;
                var result11 = parse_VerbPath();
                if (result11 !== null) {
                  var result8 = result11;
                } else {
                  var result10 = parse_Var();
                  if (result10 !== null) {
                    var result8 = result10;
                  } else {
                    var result8 = null;;
                  };
                }
                if (result8 !== null) {
                  var result9 = parse_ObjectList();
                  if (result9 !== null) {
                    var result7 = [result8, result9];
                  } else {
                    var result7 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos2;
                }
                var result6 = result7 !== null ? result7 : '';
                if (result6 !== null) {
                  var result4 = [result5, result6];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[73] PropertyListNotEmptyPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PropertyListPath() {
        var cacheKey = 'PropertyListPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PropertyListNotEmpty();
        var result0 = result1 !== null ? result1 : '';
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[74] PropertyListPath");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VerbPath() {
        var cacheKey = 'VerbPath@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result1 = parse_PathAlternative();
        var result0 = result1 !== null
          ? (function(p) {
                var path = {};
                path.token = 'path';
                path.value = p;
          
                return p;
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[75]");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathAlternative() {
        var cacheKey = 'PathAlternative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathSequence();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "|") {
            var result4 = "|";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathSequence();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "|") {
              var result4 = "|";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathSequence();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[78] PathAlternative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathSequence() {
        var cacheKey = 'PathSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathEltOrInverse();
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "/") {
            var result4 = "/";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_PathEltOrInverse();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "/") {
              var result4 = "/";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"/\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_PathEltOrInverse();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[79] PathSequence");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathElt() {
        var cacheKey = 'PathElt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_PathPrimary();
        if (result1 !== null) {
          var result3 = parse_PathMod();
          var result2 = result3 !== null ? result3 : '';
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] PathElt");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathEltOrInverse() {
        var cacheKey = 'PathEltOrInverse@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_PathElt();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "^") {
            var result2 = "^";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
          if (result2 !== null) {
            var result3 = parse_PathElt();
            if (result3 !== null) {
              var result1 = [result2, result3];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[81] PathEltOrInverse");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathMod() {
        var cacheKey = 'PathMod@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "*") {
          var result21 = "*";
          pos += 1;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          if (input.substr(pos, 1) === "?") {
            var result20 = "?";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"?\"");
            }
          }
          if (result20 !== null) {
            var result0 = result20;
          } else {
            if (input.substr(pos, 1) === "+") {
              var result19 = "+";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result19 !== null) {
              var result0 = result19;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "{") {
                var result2 = "{";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"{\"");
                }
              }
              if (result2 !== null) {
                var savedPos2 = pos;
                var result9 = parse_INTEGER();
                if (result9 !== null) {
                  var savedPos3 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result13 = ",";
                    pos += 1;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result13 !== null) {
                    if (input.substr(pos, 1) === "}") {
                      var result18 = "}";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result18 !== null) {
                      var result14 = result18;
                    } else {
                      var savedPos4 = pos;
                      var result16 = parse_INTEGER();
                      if (result16 !== null) {
                        if (input.substr(pos, 1) === "}") {
                          var result17 = "}";
                          pos += 1;
                        } else {
                          var result17 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result17 !== null) {
                          var result15 = [result16, result17];
                        } else {
                          var result15 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result15 = null;
                        pos = savedPos4;
                      }
                      if (result15 !== null) {
                        var result14 = result15;
                      } else {
                        var result14 = null;;
                      };
                    }
                    if (result14 !== null) {
                      var result12 = [result13, result14];
                    } else {
                      var result12 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos3;
                  }
                  if (result12 !== null) {
                    var result10 = result12;
                  } else {
                    if (input.substr(pos, 1) === "}") {
                      var result11 = "}";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"}\"");
                      }
                    }
                    if (result11 !== null) {
                      var result10 = result11;
                    } else {
                      var result10 = null;;
                    };
                  }
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
                if (result8 !== null) {
                  var result3 = result8;
                } else {
                  var savedPos1 = pos;
                  if (input.substr(pos, 1) === ",") {
                    var result5 = ",";
                    pos += 1;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result5 !== null) {
                    var result6 = parse_INTEGER();
                    if (result6 !== null) {
                      if (input.substr(pos, 1) === "}") {
                        var result7 = "}";
                        pos += 1;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (result7 !== null) {
                        var result4 = [result5, result6, result7];
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                }
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[82] PathMod");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathPrimary() {
        var cacheKey = 'PathPrimary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result9 = parse_IRIref();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result8 = "a";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "!") {
              var result6 = "!";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_PathNegatedPropertySet();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 1) === "(") {
                var result2 = "(";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result2 !== null) {
                var result3 = parse_PathAlternative();
                if (result3 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result4 = ")";
                    pos += 1;
                  } else {
                    var result4 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result4 !== null) {
                    var result1 = [result2, result3, result4];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[83] PathPrimary");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathNegatedPropertySet() {
        var cacheKey = 'PathNegatedPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result11 = parse_PathOneInPropertySet();
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var savedPos1 = pos;
            var result6 = parse_PathOneInPropertySet();
            if (result6 !== null) {
              var result7 = [];
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "|") {
                var result9 = "|";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"|\"");
                }
              }
              if (result9 !== null) {
                var result10 = parse_PathOneInPropertySet();
                if (result10 !== null) {
                  var result8 = [result9, result10];
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              } else {
                var result8 = null;
                pos = savedPos2;
              }
              while (result8 !== null) {
                result7.push(result8);
                var savedPos2 = pos;
                if (input.substr(pos, 1) === "|") {
                  var result9 = "|";
                  pos += 1;
                } else {
                  var result9 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"|\"");
                  }
                }
                if (result9 !== null) {
                  var result10 = parse_PathOneInPropertySet();
                  if (result10 !== null) {
                    var result8 = [result9, result10];
                  } else {
                    var result8 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result8 = null;
                  pos = savedPos2;
                }
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            var result3 = result5 !== null ? result5 : '';
            if (result3 !== null) {
              if (input.substr(pos, 1) === ")") {
                var result4 = ")";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\")\"");
                }
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PathOneInPropertySet() {
        var cacheKey = 'PathOneInPropertySet@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_IRIref();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 1) === "a") {
            var result6 = "a";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"a\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "^") {
              var result2 = "^";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result2 !== null) {
              var result5 = parse_IRIref();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                if (input.substr(pos, 1) === "a") {
                  var result4 = "a";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"a\"");
                  }
                }
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              }
              if (result3 !== null) {
                var result1 = [result2, result3];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[85] PathOneInPropertySet");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TriplesNode() {
        var cacheKey = 'TriplesNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_Collection();
        var result2 = result3 !== null
          ? (function(c) {
                triplesContext = [];
                chainSubject = [];
          
                var triple = null;
          
                // catch NIL
                /*
                if(c.length == 1 && c[0].token && c[0].token === 'nil') {
                    GlobalBlankNodeCounter++;
                    return  {token: "triplesnodecollection", 
                             triplesContext:[{subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                              object:  {token:'blank', label:("_:"+(GlobalBlankNodeCounter+1))}}], 
                             chainSubject:{token:'blank', label:("_:"+GlobalBlankNodeCounter)}};
          
                }
                */
          
                // other cases
                for(var i=0; i<c.length; i++) {
                    GlobalBlankNodeCounter++;
                    //_:b0  rdf:first  1 ;
                    //rdf:rest   _:b1 .
                    var nextObject = null;
                    if(c[i].chainSubject == null && c[i].triplesContext == null) {
                        nextObject = c[i];
                    } else {
                        nextObject = c[i].chainSubject;
                        triplesContext = triplesContext.concat(nextSubject.triplesContext);
                    }
                    var currentSubject = null;
                    triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                              predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                              object:nextObject };
          
                    if(i==0) {
                        chainSubject.push(triple.subject);
                    }
          
                    triplesContext.push(triple);
          
                    if(i===(c.length-1)) {
                        triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                    } else {
                        triple = {subject: {token:'blank', label:("_:"+GlobalBlankNodeCounter)},
                                  predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                  object:  {token:'blank', label:("_:"+(GlobalBlankNodeCounter+1))} };
                    }
          
                    triplesContext.push(triple);
                }
          
                return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          })(result3)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_BlankNodePropertyList();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[87] TriplesNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNodePropertyList() {
        var cacheKey = 'BlankNodePropertyList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result12 = parse_WS();
        while (result12 !== null) {
          result2.push(result12);
          var result12 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result3 = "[";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result4.push(result11);
              var result11 = parse_WS();
            }
            if (result4 !== null) {
              var result5 = parse_PropertyListNotEmpty();
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result7 = "]";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(pl) {
          
                GlobalBlankNodeCounter++;
                var subject = {token:'blank', label:''+GlobalBlankNodeCounter};
                var newTriples =  [];
          
                for(var i=0; i< pl.pairs.length; i++) {
                    var pair = pl.pairs[i];
                    var triple = {}
                    triple.subject = subject;
                    triple.predicate = pair[0];
                    triple.object = pair[1];
                    newTriples.push(triple);
                }
          
                return {token: 'triplesnode',
                        kind: 'blanknodepropertylist',
                        triplesContext: pl.triplesContext.concat(newTriples),
                        chainSubject: subject};
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[88] BlankNodePropertyList");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Collection() {
        var cacheKey = 'Collection@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result2.push(result13);
          var result13 = parse_WS();
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result3 = "(";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result4.push(result12);
              var result12 = parse_WS();
            }
            if (result4 !== null) {
              var result11 = parse_GraphNode();
              if (result11 !== null) {
                var result5 = [];
                while (result11 !== null) {
                  result5.push(result11);
                  var result11 = parse_GraphNode();
                }
              } else {
                var result5 = null;
              }
              if (result5 !== null) {
                var result6 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result6.push(result10);
                  var result10 = parse_WS();
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result7 = ")";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result7 !== null) {
                    var result8 = [];
                    var result9 = parse_WS();
                    while (result9 !== null) {
                      result8.push(result9);
                      var result9 = parse_WS();
                    }
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(gn) {
                return gn;
          })(result1[3])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[89] Collection");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphNode() {
        var cacheKey = 'GraphNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var result9 = [];
        var result13 = parse_WS();
        while (result13 !== null) {
          result9.push(result13);
          var result13 = parse_WS();
        }
        if (result9 !== null) {
          var result10 = parse_VarOrTerm();
          if (result10 !== null) {
            var result11 = [];
            var result12 = parse_WS();
            while (result12 !== null) {
              result11.push(result12);
              var result12 = parse_WS();
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = [];
          var result7 = parse_WS();
          while (result7 !== null) {
            result3.push(result7);
            var result7 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_TriplesNode();
            if (result4 !== null) {
              var result5 = [];
              var result6 = parse_WS();
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_WS();
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(gn) {
            return gn[1];
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[90] GraphNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrTerm() {
        var cacheKey = 'VarOrTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_GraphTerm();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[91] VarOrTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VarOrIRIref() {
        var cacheKey = 'VarOrIRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_Var();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_IRIref();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[92] VarOrIRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Var() {
        var cacheKey = 'Var@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_VAR1();
        if (result3 !== null) {
          var result1 = result3;
        } else {
          var result2 = parse_VAR2();
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(v) {
                var term = {};
                term.token = 'var';
                term.value = v;
                return term;
            })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[93] Var");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_GraphTerm() {
        var cacheKey = 'GraphTerm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_IRIref();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_RDFLiteral();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_NumericLiteral();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_BooleanLiteral();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_BlankNode();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_NIL();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[94] GraphTerm");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConditionalOrExpression() {
        var cacheKey = 'ConditionalOrExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_ConditionalAndExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 2) === "||") {
              var result6 = "||";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"||\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS();
              }
              if (result7 !== null) {
                var result8 = parse_ConditionalAndExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result6 = "||";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"||\"");
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_ConditionalAndExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }
          
                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionalor";
                var ops = [v];
          
                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }
          
                exp.operands = ops;
          
                return exp;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[96] ConditionalOrExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConditionalAndExpression() {
        var cacheKey = 'ConditionalAndExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_RelationalExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = [];
          var result10 = parse_WS();
          while (result10 !== null) {
            result5.push(result10);
            var result10 = parse_WS();
          }
          if (result5 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result6 = "&&";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"&&\"");
              }
            }
            if (result6 !== null) {
              var result7 = [];
              var result9 = parse_WS();
              while (result9 !== null) {
                result7.push(result9);
                var result9 = parse_WS();
              }
              if (result7 !== null) {
                var result8 = parse_RelationalExpression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = [];
            var result10 = parse_WS();
            while (result10 !== null) {
              result5.push(result10);
              var result10 = parse_WS();
            }
            if (result5 !== null) {
              if (input.substr(pos, 2) === "&&") {
                var result6 = "&&";
                pos += 2;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"&&\"");
                }
              }
              if (result6 !== null) {
                var result7 = [];
                var result9 = parse_WS();
                while (result9 !== null) {
                  result7.push(result9);
                  var result9 = parse_WS();
                }
                if (result7 !== null) {
                  var result8 = parse_RelationalExpression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v, vs) {
                if(vs.length === 0) {
                    return v;
                }
                var exp = {};
                exp.token = "expression";
                exp.expressionType = "conditionaland";
                var ops = [v];
          
                for(var i=0; i<vs.length; i++) {
                    ops.push(vs[i][3]);
                }
          
                exp.operands = ops;
          
                return exp;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[97] ConditionalAndExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpression() {
        var cacheKey = 'RelationalExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_AdditiveExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos6 = pos;
          var result41 = [];
          var result46 = parse_WS();
          while (result46 !== null) {
            result41.push(result46);
            var result46 = parse_WS();
          }
          if (result41 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result42 = "=";
              pos += 1;
            } else {
              var result42 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result42 !== null) {
              var result43 = [];
              var result45 = parse_WS();
              while (result45 !== null) {
                result43.push(result45);
                var result45 = parse_WS();
              }
              if (result43 !== null) {
                var result44 = parse_AdditiveExpression();
                if (result44 !== null) {
                  var result40 = [result41, result42, result43, result44];
                } else {
                  var result40 = null;
                  pos = savedPos6;
                }
              } else {
                var result40 = null;
                pos = savedPos6;
              }
            } else {
              var result40 = null;
              pos = savedPos6;
            }
          } else {
            var result40 = null;
            pos = savedPos6;
          }
          if (result40 !== null) {
            var result4 = result40;
          } else {
            var savedPos5 = pos;
            var result34 = [];
            var result39 = parse_WS();
            while (result39 !== null) {
              result34.push(result39);
              var result39 = parse_WS();
            }
            if (result34 !== null) {
              if (input.substr(pos, 2) === "!=") {
                var result35 = "!=";
                pos += 2;
              } else {
                var result35 = null;
                if (reportMatchFailures) {
                  matchFailed("\"!=\"");
                }
              }
              if (result35 !== null) {
                var result36 = [];
                var result38 = parse_WS();
                while (result38 !== null) {
                  result36.push(result38);
                  var result38 = parse_WS();
                }
                if (result36 !== null) {
                  var result37 = parse_AdditiveExpression();
                  if (result37 !== null) {
                    var result33 = [result34, result35, result36, result37];
                  } else {
                    var result33 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result33 = null;
                  pos = savedPos5;
                }
              } else {
                var result33 = null;
                pos = savedPos5;
              }
            } else {
              var result33 = null;
              pos = savedPos5;
            }
            if (result33 !== null) {
              var result4 = result33;
            } else {
              var savedPos4 = pos;
              var result27 = [];
              var result32 = parse_WS();
              while (result32 !== null) {
                result27.push(result32);
                var result32 = parse_WS();
              }
              if (result27 !== null) {
                if (input.substr(pos, 1) === "<") {
                  var result28 = "<";
                  pos += 1;
                } else {
                  var result28 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"<\"");
                  }
                }
                if (result28 !== null) {
                  var result29 = [];
                  var result31 = parse_WS();
                  while (result31 !== null) {
                    result29.push(result31);
                    var result31 = parse_WS();
                  }
                  if (result29 !== null) {
                    var result30 = parse_AdditiveExpression();
                    if (result30 !== null) {
                      var result26 = [result27, result28, result29, result30];
                    } else {
                      var result26 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result26 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos4;
                }
              } else {
                var result26 = null;
                pos = savedPos4;
              }
              if (result26 !== null) {
                var result4 = result26;
              } else {
                var savedPos3 = pos;
                var result20 = [];
                var result25 = parse_WS();
                while (result25 !== null) {
                  result20.push(result25);
                  var result25 = parse_WS();
                }
                if (result20 !== null) {
                  if (input.substr(pos, 1) === ">") {
                    var result21 = ">";
                    pos += 1;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\">\"");
                    }
                  }
                  if (result21 !== null) {
                    var result22 = [];
                    var result24 = parse_WS();
                    while (result24 !== null) {
                      result22.push(result24);
                      var result24 = parse_WS();
                    }
                    if (result22 !== null) {
                      var result23 = parse_AdditiveExpression();
                      if (result23 !== null) {
                        var result19 = [result20, result21, result22, result23];
                      } else {
                        var result19 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result19 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result19 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result19 = null;
                  pos = savedPos3;
                }
                if (result19 !== null) {
                  var result4 = result19;
                } else {
                  var savedPos2 = pos;
                  var result13 = [];
                  var result18 = parse_WS();
                  while (result18 !== null) {
                    result13.push(result18);
                    var result18 = parse_WS();
                  }
                  if (result13 !== null) {
                    if (input.substr(pos, 2) === "<=") {
                      var result14 = "<=";
                      pos += 2;
                    } else {
                      var result14 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"<=\"");
                      }
                    }
                    if (result14 !== null) {
                      var result15 = [];
                      var result17 = parse_WS();
                      while (result17 !== null) {
                        result15.push(result17);
                        var result17 = parse_WS();
                      }
                      if (result15 !== null) {
                        var result16 = parse_AdditiveExpression();
                        if (result16 !== null) {
                          var result12 = [result13, result14, result15, result16];
                        } else {
                          var result12 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                  if (result12 !== null) {
                    var result4 = result12;
                  } else {
                    var savedPos1 = pos;
                    var result6 = [];
                    var result11 = parse_WS();
                    while (result11 !== null) {
                      result6.push(result11);
                      var result11 = parse_WS();
                    }
                    if (result6 !== null) {
                      if (input.substr(pos, 2) === ">=") {
                        var result7 = ">=";
                        pos += 2;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("\">=\"");
                        }
                      }
                      if (result7 !== null) {
                        var result8 = [];
                        var result10 = parse_WS();
                        while (result10 !== null) {
                          result8.push(result10);
                          var result10 = parse_WS();
                        }
                        if (result8 !== null) {
                          var result9 = parse_AdditiveExpression();
                          if (result9 !== null) {
                            var result5 = [result6, result7, result8, result9];
                          } else {
                            var result5 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos6 = pos;
            var result41 = [];
            var result46 = parse_WS();
            while (result46 !== null) {
              result41.push(result46);
              var result46 = parse_WS();
            }
            if (result41 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result42 = "=";
                pos += 1;
              } else {
                var result42 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result42 !== null) {
                var result43 = [];
                var result45 = parse_WS();
                while (result45 !== null) {
                  result43.push(result45);
                  var result45 = parse_WS();
                }
                if (result43 !== null) {
                  var result44 = parse_AdditiveExpression();
                  if (result44 !== null) {
                    var result40 = [result41, result42, result43, result44];
                  } else {
                    var result40 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result40 = null;
                  pos = savedPos6;
                }
              } else {
                var result40 = null;
                pos = savedPos6;
              }
            } else {
              var result40 = null;
              pos = savedPos6;
            }
            if (result40 !== null) {
              var result4 = result40;
            } else {
              var savedPos5 = pos;
              var result34 = [];
              var result39 = parse_WS();
              while (result39 !== null) {
                result34.push(result39);
                var result39 = parse_WS();
              }
              if (result34 !== null) {
                if (input.substr(pos, 2) === "!=") {
                  var result35 = "!=";
                  pos += 2;
                } else {
                  var result35 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result35 !== null) {
                  var result36 = [];
                  var result38 = parse_WS();
                  while (result38 !== null) {
                    result36.push(result38);
                    var result38 = parse_WS();
                  }
                  if (result36 !== null) {
                    var result37 = parse_AdditiveExpression();
                    if (result37 !== null) {
                      var result33 = [result34, result35, result36, result37];
                    } else {
                      var result33 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result33 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result33 = null;
                  pos = savedPos5;
                }
              } else {
                var result33 = null;
                pos = savedPos5;
              }
              if (result33 !== null) {
                var result4 = result33;
              } else {
                var savedPos4 = pos;
                var result27 = [];
                var result32 = parse_WS();
                while (result32 !== null) {
                  result27.push(result32);
                  var result32 = parse_WS();
                }
                if (result27 !== null) {
                  if (input.substr(pos, 1) === "<") {
                    var result28 = "<";
                    pos += 1;
                  } else {
                    var result28 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<\"");
                    }
                  }
                  if (result28 !== null) {
                    var result29 = [];
                    var result31 = parse_WS();
                    while (result31 !== null) {
                      result29.push(result31);
                      var result31 = parse_WS();
                    }
                    if (result29 !== null) {
                      var result30 = parse_AdditiveExpression();
                      if (result30 !== null) {
                        var result26 = [result27, result28, result29, result30];
                      } else {
                        var result26 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result26 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result26 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result26 = null;
                  pos = savedPos4;
                }
                if (result26 !== null) {
                  var result4 = result26;
                } else {
                  var savedPos3 = pos;
                  var result20 = [];
                  var result25 = parse_WS();
                  while (result25 !== null) {
                    result20.push(result25);
                    var result25 = parse_WS();
                  }
                  if (result20 !== null) {
                    if (input.substr(pos, 1) === ">") {
                      var result21 = ">";
                      pos += 1;
                    } else {
                      var result21 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result21 !== null) {
                      var result22 = [];
                      var result24 = parse_WS();
                      while (result24 !== null) {
                        result22.push(result24);
                        var result24 = parse_WS();
                      }
                      if (result22 !== null) {
                        var result23 = parse_AdditiveExpression();
                        if (result23 !== null) {
                          var result19 = [result20, result21, result22, result23];
                        } else {
                          var result19 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result19 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result19 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result19 = null;
                    pos = savedPos3;
                  }
                  if (result19 !== null) {
                    var result4 = result19;
                  } else {
                    var savedPos2 = pos;
                    var result13 = [];
                    var result18 = parse_WS();
                    while (result18 !== null) {
                      result13.push(result18);
                      var result18 = parse_WS();
                    }
                    if (result13 !== null) {
                      if (input.substr(pos, 2) === "<=") {
                        var result14 = "<=";
                        pos += 2;
                      } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"<=\"");
                        }
                      }
                      if (result14 !== null) {
                        var result15 = [];
                        var result17 = parse_WS();
                        while (result17 !== null) {
                          result15.push(result17);
                          var result17 = parse_WS();
                        }
                        if (result15 !== null) {
                          var result16 = parse_AdditiveExpression();
                          if (result16 !== null) {
                            var result12 = [result13, result14, result15, result16];
                          } else {
                            var result12 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result12 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result12 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                    if (result12 !== null) {
                      var result4 = result12;
                    } else {
                      var savedPos1 = pos;
                      var result6 = [];
                      var result11 = parse_WS();
                      while (result11 !== null) {
                        result6.push(result11);
                        var result11 = parse_WS();
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 2) === ">=") {
                          var result7 = ">=";
                          pos += 2;
                        } else {
                          var result7 = null;
                          if (reportMatchFailures) {
                            matchFailed("\">=\"");
                          }
                        }
                        if (result7 !== null) {
                          var result8 = [];
                          var result10 = parse_WS();
                          while (result10 !== null) {
                            result8.push(result10);
                            var result10 = parse_WS();
                          }
                          if (result8 !== null) {
                            var result9 = parse_AdditiveExpression();
                            if (result9 !== null) {
                              var result5 = [result6, result7, result8, result9];
                            } else {
                              var result5 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result5 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result5 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result5 = null;
                        pos = savedPos1;
                      }
                      if (result5 !== null) {
                        var result4 = result5;
                      } else {
                        var result4 = null;;
                      };
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op1, op2) {
                if(op2.length === 0) {
                    return op1;
                } else {
                  var exp = {};
                  exp.expressionType = "relationalexpression"
                  exp.operator = op2[0][1];
                  exp.op1 = op1;
                  exp.op2 = op2[0][3];
                  exp.token = "expression";
          
                  return exp;
                }
            })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[99] RelationalExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpression() {
        var cacheKey = 'AdditiveExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_MultiplicativeExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos5 = pos;
          var result33 = [];
          var result38 = parse_WS();
          while (result38 !== null) {
            result33.push(result38);
            var result38 = parse_WS();
          }
          if (result33 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result34 = "+";
              pos += 1;
            } else {
              var result34 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result34 !== null) {
              var result35 = [];
              var result37 = parse_WS();
              while (result37 !== null) {
                result35.push(result37);
                var result37 = parse_WS();
              }
              if (result35 !== null) {
                var result36 = parse_MultiplicativeExpression();
                if (result36 !== null) {
                  var result32 = [result33, result34, result35, result36];
                } else {
                  var result32 = null;
                  pos = savedPos5;
                }
              } else {
                var result32 = null;
                pos = savedPos5;
              }
            } else {
              var result32 = null;
              pos = savedPos5;
            }
          } else {
            var result32 = null;
            pos = savedPos5;
          }
          if (result32 !== null) {
            var result4 = result32;
          } else {
            var savedPos4 = pos;
            var result26 = [];
            var result31 = parse_WS();
            while (result31 !== null) {
              result26.push(result31);
              var result31 = parse_WS();
            }
            if (result26 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result27 = "-";
                pos += 1;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result27 !== null) {
                var result28 = [];
                var result30 = parse_WS();
                while (result30 !== null) {
                  result28.push(result30);
                  var result30 = parse_WS();
                }
                if (result28 !== null) {
                  var result29 = parse_MultiplicativeExpression();
                  if (result29 !== null) {
                    var result25 = [result26, result27, result28, result29];
                  } else {
                    var result25 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos4;
                }
              } else {
                var result25 = null;
                pos = savedPos4;
              }
            } else {
              var result25 = null;
              pos = savedPos4;
            }
            if (result25 !== null) {
              var result4 = result25;
            } else {
              var savedPos1 = pos;
              var result24 = parse_NumericLiteralNegative();
              if (result24 !== null) {
                var result6 = result24;
              } else {
                var result23 = parse_NumericLiteralNegative();
                if (result23 !== null) {
                  var result6 = result23;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var savedPos3 = pos;
                var result17 = [];
                var result22 = parse_WS();
                while (result22 !== null) {
                  result17.push(result22);
                  var result22 = parse_WS();
                }
                if (result17 !== null) {
                  if (input.substr(pos, 1) === "*") {
                    var result18 = "*";
                    pos += 1;
                  } else {
                    var result18 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"*\"");
                    }
                  }
                  if (result18 !== null) {
                    var result19 = [];
                    var result21 = parse_WS();
                    while (result21 !== null) {
                      result19.push(result21);
                      var result21 = parse_WS();
                    }
                    if (result19 !== null) {
                      var result20 = parse_UnaryExpression();
                      if (result20 !== null) {
                        var result16 = [result17, result18, result19, result20];
                      } else {
                        var result16 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result16 = null;
                  pos = savedPos3;
                }
                if (result16 !== null) {
                  var result8 = result16;
                } else {
                  var savedPos2 = pos;
                  var result10 = [];
                  var result15 = parse_WS();
                  while (result15 !== null) {
                    result10.push(result15);
                    var result15 = parse_WS();
                  }
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === "/") {
                      var result11 = "/";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"/\"");
                      }
                    }
                    if (result11 !== null) {
                      var result12 = [];
                      var result14 = parse_WS();
                      while (result14 !== null) {
                        result12.push(result14);
                        var result14 = parse_WS();
                      }
                      if (result12 !== null) {
                        var result13 = parse_UnaryExpression();
                        if (result13 !== null) {
                          var result9 = [result10, result11, result12, result13];
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  if (result9 !== null) {
                    var result8 = result9;
                  } else {
                    var result8 = null;;
                  };
                }
                var result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos5 = pos;
            var result33 = [];
            var result38 = parse_WS();
            while (result38 !== null) {
              result33.push(result38);
              var result38 = parse_WS();
            }
            if (result33 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result34 = "+";
                pos += 1;
              } else {
                var result34 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result34 !== null) {
                var result35 = [];
                var result37 = parse_WS();
                while (result37 !== null) {
                  result35.push(result37);
                  var result37 = parse_WS();
                }
                if (result35 !== null) {
                  var result36 = parse_MultiplicativeExpression();
                  if (result36 !== null) {
                    var result32 = [result33, result34, result35, result36];
                  } else {
                    var result32 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result32 = null;
                  pos = savedPos5;
                }
              } else {
                var result32 = null;
                pos = savedPos5;
              }
            } else {
              var result32 = null;
              pos = savedPos5;
            }
            if (result32 !== null) {
              var result4 = result32;
            } else {
              var savedPos4 = pos;
              var result26 = [];
              var result31 = parse_WS();
              while (result31 !== null) {
                result26.push(result31);
                var result31 = parse_WS();
              }
              if (result26 !== null) {
                if (input.substr(pos, 1) === "-") {
                  var result27 = "-";
                  pos += 1;
                } else {
                  var result27 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result27 !== null) {
                  var result28 = [];
                  var result30 = parse_WS();
                  while (result30 !== null) {
                    result28.push(result30);
                    var result30 = parse_WS();
                  }
                  if (result28 !== null) {
                    var result29 = parse_MultiplicativeExpression();
                    if (result29 !== null) {
                      var result25 = [result26, result27, result28, result29];
                    } else {
                      var result25 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos4;
                }
              } else {
                var result25 = null;
                pos = savedPos4;
              }
              if (result25 !== null) {
                var result4 = result25;
              } else {
                var savedPos1 = pos;
                var result24 = parse_NumericLiteralNegative();
                if (result24 !== null) {
                  var result6 = result24;
                } else {
                  var result23 = parse_NumericLiteralNegative();
                  if (result23 !== null) {
                    var result6 = result23;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var savedPos3 = pos;
                  var result17 = [];
                  var result22 = parse_WS();
                  while (result22 !== null) {
                    result17.push(result22);
                    var result22 = parse_WS();
                  }
                  if (result17 !== null) {
                    if (input.substr(pos, 1) === "*") {
                      var result18 = "*";
                      pos += 1;
                    } else {
                      var result18 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"*\"");
                      }
                    }
                    if (result18 !== null) {
                      var result19 = [];
                      var result21 = parse_WS();
                      while (result21 !== null) {
                        result19.push(result21);
                        var result21 = parse_WS();
                      }
                      if (result19 !== null) {
                        var result20 = parse_UnaryExpression();
                        if (result20 !== null) {
                          var result16 = [result17, result18, result19, result20];
                        } else {
                          var result16 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result16 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result16 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result16 = null;
                    pos = savedPos3;
                  }
                  if (result16 !== null) {
                    var result8 = result16;
                  } else {
                    var savedPos2 = pos;
                    var result10 = [];
                    var result15 = parse_WS();
                    while (result15 !== null) {
                      result10.push(result15);
                      var result15 = parse_WS();
                    }
                    if (result10 !== null) {
                      if (input.substr(pos, 1) === "/") {
                        var result11 = "/";
                        pos += 1;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"/\"");
                        }
                      }
                      if (result11 !== null) {
                        var result12 = [];
                        var result14 = parse_WS();
                        while (result14 !== null) {
                          result12.push(result14);
                          var result14 = parse_WS();
                        }
                        if (result12 !== null) {
                          var result13 = parse_UnaryExpression();
                          if (result13 !== null) {
                            var result9 = [result10, result11, result12, result13];
                          } else {
                            var result9 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                    if (result9 !== null) {
                      var result8 = result9;
                    } else {
                      var result8 = null;;
                    };
                  }
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result5 = [result6, result7];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(op1, ops) {
                if(ops.length === 0) {
                    return op1;
                }
          
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'additiveexpression';
                ex.summand = op1;
                ex.summands = [];
          
                for(var i=0; i<ops.length; i++) {
                    var summand = ops[i];
                    var sum = {};
                    if(summand.length == 4 && typeof(summand[1]) === "string") {
                        sum.operator = summand[1];
                        sum.expression = summand[3];
                    } else {
                        var subexp = {}
                        var firstFactor = sum[0];
                        var operator = sum[1][1];
                        var secondFactor = sum[1][3];
                        var operator = null;
                        if(firstFactor.value < 0) {
                            sum.operator = '-';
                            firstFactor.value = - firstFactor.value;
                        } else {
                            sum.operator = '+';
                        }
                        subexp.token = 'expression';
                        subexp.expressionType = 'multiplicativeexpression';
                        subexp.operator = firstFactor;
                        subexp.factors = [{operator: operator, expression: secondFactor}];
          
                        sum.expression = subexp;
                    }
                    ex.summands.push(sum);
                }
          
                return ex;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[101] AdditiveExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpression() {
        var cacheKey = 'MultiplicativeExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_UnaryExpression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos2 = pos;
          var result13 = [];
          var result18 = parse_WS();
          while (result18 !== null) {
            result13.push(result18);
            var result18 = parse_WS();
          }
          if (result13 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result14 = "*";
              pos += 1;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result14 !== null) {
              var result15 = [];
              var result17 = parse_WS();
              while (result17 !== null) {
                result15.push(result17);
                var result17 = parse_WS();
              }
              if (result15 !== null) {
                var result16 = parse_UnaryExpression();
                if (result16 !== null) {
                  var result12 = [result13, result14, result15, result16];
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
          if (result12 !== null) {
            var result4 = result12;
          } else {
            var savedPos1 = pos;
            var result6 = [];
            var result11 = parse_WS();
            while (result11 !== null) {
              result6.push(result11);
              var result11 = parse_WS();
            }
            if (result6 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result7 = "/";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"/\"");
                }
              }
              if (result7 !== null) {
                var result8 = [];
                var result10 = parse_WS();
                while (result10 !== null) {
                  result8.push(result10);
                  var result10 = parse_WS();
                }
                if (result8 !== null) {
                  var result9 = parse_UnaryExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos2 = pos;
            var result13 = [];
            var result18 = parse_WS();
            while (result18 !== null) {
              result13.push(result18);
              var result18 = parse_WS();
            }
            if (result13 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result14 = "*";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result14 !== null) {
                var result15 = [];
                var result17 = parse_WS();
                while (result17 !== null) {
                  result15.push(result17);
                  var result17 = parse_WS();
                }
                if (result15 !== null) {
                  var result16 = parse_UnaryExpression();
                  if (result16 !== null) {
                    var result12 = [result13, result14, result15, result16];
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
            if (result12 !== null) {
              var result4 = result12;
            } else {
              var savedPos1 = pos;
              var result6 = [];
              var result11 = parse_WS();
              while (result11 !== null) {
                result6.push(result11);
                var result11 = parse_WS();
              }
              if (result6 !== null) {
                if (input.substr(pos, 1) === "/") {
                  var result7 = "/";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = [];
                  var result10 = parse_WS();
                  while (result10 !== null) {
                    result8.push(result10);
                    var result10 = parse_WS();
                  }
                  if (result8 !== null) {
                    var result9 = parse_UnaryExpression();
                    if (result9 !== null) {
                      var result5 = [result6, result7, result8, result9];
                    } else {
                      var result5 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(exp, exps) {
                if(exps.length === 0) {
                    return exp;
                }
          
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'multiplicativeexpression';
                ex.factor = exp;
                ex.factors = [];
                for(var i=0; i<exps.length; i++) {
                    var factor = exps[i];
                    var fact = {};
                    fact.operator = factor[1];
                    fact.expression = factor[3];
                    ex.factors.push(fact);
                }
          
                return ex;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[102] MultiplicativeExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpression() {
        var cacheKey = 'UnaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "!") {
          var result16 = "!";
          pos += 1;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("\"!\"");
          }
        }
        if (result16 !== null) {
          var result17 = [];
          var result19 = parse_WS();
          while (result19 !== null) {
            result17.push(result19);
            var result19 = parse_WS();
          }
          if (result17 !== null) {
            var result18 = parse_PrimaryExpression();
            if (result18 !== null) {
              var result15 = [result16, result17, result18];
            } else {
              var result15 = null;
              pos = savedPos2;
            }
          } else {
            var result15 = null;
            pos = savedPos2;
          }
        } else {
          var result15 = null;
          pos = savedPos2;
        }
        var result14 = result15 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression';
                ex.expressionType = 'unaryexpression';
                ex.unaryexpression = "!";
                ex.expression = e;
          
                return ex;
            })(result15[2])
          : null;
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "+") {
            var result10 = "+";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result10 !== null) {
            var result11 = [];
            var result13 = parse_WS();
            while (result13 !== null) {
              result11.push(result13);
              var result13 = parse_WS();
            }
            if (result11 !== null) {
              var result12 = parse_PrimaryExpression();
              if (result12 !== null) {
                var result9 = [result10, result11, result12];
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
          var result8 = result9 !== null
            ? (function(v) {
                  var ex = {};
                  ex.token = 'expression';
                  ex.expressionType = 'unaryexpression';
                  ex.unaryexpression = "+";
                  ex.expression = v;
            
                  return ex;
              })(result9[2])
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "-") {
              var result4 = "-";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
              if (result5 !== null) {
                var result6 = parse_PrimaryExpression();
                if (result6 !== null) {
                  var result3 = [result4, result5, result6];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(v) {
                    var ex = {};
                    ex.token = 'expression';
                    ex.expressionType = 'unaryexpression';
                    ex.unaryexpression = "-";
                    ex.expression = v;
              
                    return ex;
                })(result3[2])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_PrimaryExpression();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[103] UnaryExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpression() {
        var cacheKey = 'PrimaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result12 = parse_BrackettedExpression();
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var result11 = parse_BuiltInCall();
          if (result11 !== null) {
            var result0 = result11;
          } else {
            var result10 = parse_IRIrefOrFunction();
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var result9 = parse_RDFLiteral();
              var result8 = result9 !== null
                ? (function(v) {
                      var ex = {};
                      ex.token = 'expression';
                      ex.expressionType = 'atomic';
                      ex.primaryexpression = 'rdfliteral';
                      ex.value = v;
                
                      return ex;
                  })(result9)
                : null;
              if (result8 !== null) {
                var result0 = result8;
              } else {
                var result7 = parse_NumericLiteral();
                var result6 = result7 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'atomic';
                        ex.primaryexpression = 'numericliteral';
                        ex.value = v;
                  
                        return ex;
                    })(result7)
                  : null;
                if (result6 !== null) {
                  var result0 = result6;
                } else {
                  var result5 = parse_BooleanLiteral();
                  var result4 = result5 !== null
                    ? (function(v) {
                          var ex = {};
                          ex.token = 'expression';
                          ex.expressionType = 'atomic';
                          ex.primaryexpression = 'booleanliteral';
                          ex.value = v;
                    
                          return ex;
                      })(result5)
                    : null;
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var result3 = parse_Aggregate();
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      var result2 = parse_Var();
                      var result1 = result2 !== null
                        ? (function(v) {
                              var ex = {};
                              ex.token = 'expression';
                              ex.expressionType = 'atomic';
                              ex.primaryexpression = 'var';
                              ex.value = v;
                        
                              return ex;
                          })(result2)
                        : null;
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[104] PrimaryExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BrackettedExpression() {
        var cacheKey = 'BrackettedExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result8 = parse_WS();
          while (result8 !== null) {
            result3.push(result8);
            var result8 = parse_WS();
          }
          if (result3 !== null) {
            var result4 = parse_ConditionalOrExpression();
            if (result4 !== null) {
              var result5 = [];
              var result7 = parse_WS();
              while (result7 !== null) {
                result5.push(result7);
                var result7 = parse_WS();
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result6 = ")";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) {
                return e;
          })(result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[105] BrackettedExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BuiltInCall() {
        var cacheKey = 'BuiltInCall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos15 = pos;
        if (input.substr(pos, 1) === "S") {
          var result272 = "S";
          pos += 1;
        } else {
          var result272 = null;
          if (reportMatchFailures) {
            matchFailed("\"S\"");
          }
        }
        if (result272 !== null) {
          var result255 = result272;
        } else {
          if (input.substr(pos, 1) === "s") {
            var result271 = "s";
            pos += 1;
          } else {
            var result271 = null;
            if (reportMatchFailures) {
              matchFailed("\"s\"");
            }
          }
          if (result271 !== null) {
            var result255 = result271;
          } else {
            var result255 = null;;
          };
        }
        if (result255 !== null) {
          if (input.substr(pos, 1) === "T") {
            var result270 = "T";
            pos += 1;
          } else {
            var result270 = null;
            if (reportMatchFailures) {
              matchFailed("\"T\"");
            }
          }
          if (result270 !== null) {
            var result256 = result270;
          } else {
            if (input.substr(pos, 1) === "t") {
              var result269 = "t";
              pos += 1;
            } else {
              var result269 = null;
              if (reportMatchFailures) {
                matchFailed("\"t\"");
              }
            }
            if (result269 !== null) {
              var result256 = result269;
            } else {
              var result256 = null;;
            };
          }
          if (result256 !== null) {
            if (input.substr(pos, 1) === "R") {
              var result268 = "R";
              pos += 1;
            } else {
              var result268 = null;
              if (reportMatchFailures) {
                matchFailed("\"R\"");
              }
            }
            if (result268 !== null) {
              var result257 = result268;
            } else {
              if (input.substr(pos, 1) === "r") {
                var result267 = "r";
                pos += 1;
              } else {
                var result267 = null;
                if (reportMatchFailures) {
                  matchFailed("\"r\"");
                }
              }
              if (result267 !== null) {
                var result257 = result267;
              } else {
                var result257 = null;;
              };
            }
            if (result257 !== null) {
              var result258 = [];
              var result266 = parse_WS();
              while (result266 !== null) {
                result258.push(result266);
                var result266 = parse_WS();
              }
              if (result258 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result259 = "(";
                  pos += 1;
                } else {
                  var result259 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result259 !== null) {
                  var result260 = [];
                  var result265 = parse_WS();
                  while (result265 !== null) {
                    result260.push(result265);
                    var result265 = parse_WS();
                  }
                  if (result260 !== null) {
                    var result261 = parse_ConditionalOrExpression();
                    if (result261 !== null) {
                      var result262 = [];
                      var result264 = parse_WS();
                      while (result264 !== null) {
                        result262.push(result264);
                        var result264 = parse_WS();
                      }
                      if (result262 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result263 = ")";
                          pos += 1;
                        } else {
                          var result263 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result263 !== null) {
                          var result254 = [result255, result256, result257, result258, result259, result260, result261, result262, result263];
                        } else {
                          var result254 = null;
                          pos = savedPos15;
                        }
                      } else {
                        var result254 = null;
                        pos = savedPos15;
                      }
                    } else {
                      var result254 = null;
                      pos = savedPos15;
                    }
                  } else {
                    var result254 = null;
                    pos = savedPos15;
                  }
                } else {
                  var result254 = null;
                  pos = savedPos15;
                }
              } else {
                var result254 = null;
                pos = savedPos15;
              }
            } else {
              var result254 = null;
              pos = savedPos15;
            }
          } else {
            var result254 = null;
            pos = savedPos15;
          }
        } else {
          var result254 = null;
          pos = savedPos15;
        }
        var result253 = result254 !== null
          ? (function(e) {
                var ex = {};
                ex.token = 'expression'
                ex.expressionType = 'builtincall'
                ex.builtincall = 'str'
                ex.args = [e]
          
                return ex;
            })(result254[6])
          : null;
        if (result253 !== null) {
          var result0 = result253;
        } else {
          var savedPos14 = pos;
          if (input.substr(pos, 1) === "L") {
            var result252 = "L";
            pos += 1;
          } else {
            var result252 = null;
            if (reportMatchFailures) {
              matchFailed("\"L\"");
            }
          }
          if (result252 !== null) {
            var result232 = result252;
          } else {
            if (input.substr(pos, 1) === "l") {
              var result251 = "l";
              pos += 1;
            } else {
              var result251 = null;
              if (reportMatchFailures) {
                matchFailed("\"l\"");
              }
            }
            if (result251 !== null) {
              var result232 = result251;
            } else {
              var result232 = null;;
            };
          }
          if (result232 !== null) {
            if (input.substr(pos, 1) === "A") {
              var result250 = "A";
              pos += 1;
            } else {
              var result250 = null;
              if (reportMatchFailures) {
                matchFailed("\"A\"");
              }
            }
            if (result250 !== null) {
              var result233 = result250;
            } else {
              if (input.substr(pos, 1) === "a") {
                var result249 = "a";
                pos += 1;
              } else {
                var result249 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              if (result249 !== null) {
                var result233 = result249;
              } else {
                var result233 = null;;
              };
            }
            if (result233 !== null) {
              if (input.substr(pos, 1) === "N") {
                var result248 = "N";
                pos += 1;
              } else {
                var result248 = null;
                if (reportMatchFailures) {
                  matchFailed("\"N\"");
                }
              }
              if (result248 !== null) {
                var result234 = result248;
              } else {
                if (input.substr(pos, 1) === "n") {
                  var result247 = "n";
                  pos += 1;
                } else {
                  var result247 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"n\"");
                  }
                }
                if (result247 !== null) {
                  var result234 = result247;
                } else {
                  var result234 = null;;
                };
              }
              if (result234 !== null) {
                if (input.substr(pos, 1) === "G") {
                  var result246 = "G";
                  pos += 1;
                } else {
                  var result246 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"G\"");
                  }
                }
                if (result246 !== null) {
                  var result235 = result246;
                } else {
                  if (input.substr(pos, 1) === "g") {
                    var result245 = "g";
                    pos += 1;
                  } else {
                    var result245 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"g\"");
                    }
                  }
                  if (result245 !== null) {
                    var result235 = result245;
                  } else {
                    var result235 = null;;
                  };
                }
                if (result235 !== null) {
                  var result236 = [];
                  var result244 = parse_WS();
                  while (result244 !== null) {
                    result236.push(result244);
                    var result244 = parse_WS();
                  }
                  if (result236 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result237 = "(";
                      pos += 1;
                    } else {
                      var result237 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result237 !== null) {
                      var result238 = [];
                      var result243 = parse_WS();
                      while (result243 !== null) {
                        result238.push(result243);
                        var result243 = parse_WS();
                      }
                      if (result238 !== null) {
                        var result239 = parse_ConditionalOrExpression();
                        if (result239 !== null) {
                          var result240 = [];
                          var result242 = parse_WS();
                          while (result242 !== null) {
                            result240.push(result242);
                            var result242 = parse_WS();
                          }
                          if (result240 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result241 = ")";
                              pos += 1;
                            } else {
                              var result241 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result241 !== null) {
                              var result231 = [result232, result233, result234, result235, result236, result237, result238, result239, result240, result241];
                            } else {
                              var result231 = null;
                              pos = savedPos14;
                            }
                          } else {
                            var result231 = null;
                            pos = savedPos14;
                          }
                        } else {
                          var result231 = null;
                          pos = savedPos14;
                        }
                      } else {
                        var result231 = null;
                        pos = savedPos14;
                      }
                    } else {
                      var result231 = null;
                      pos = savedPos14;
                    }
                  } else {
                    var result231 = null;
                    pos = savedPos14;
                  }
                } else {
                  var result231 = null;
                  pos = savedPos14;
                }
              } else {
                var result231 = null;
                pos = savedPos14;
              }
            } else {
              var result231 = null;
              pos = savedPos14;
            }
          } else {
            var result231 = null;
            pos = savedPos14;
          }
          var result230 = result231 !== null
            ? (function(e) {
                  var ex = {};
                  ex.token = 'expression'
                  ex.expressionType = 'builtincall'
                  ex.builtincall = 'lang'
                  ex.args = [e]
            
                  return ex;
            })(result231[7])
            : null;
          if (result230 !== null) {
            var result0 = result230;
          } else {
            var savedPos13 = pos;
            if (input.substr(pos, 11) === "LANGMATCHES") {
              var result214 = "LANGMATCHES";
              pos += 11;
            } else {
              var result214 = null;
              if (reportMatchFailures) {
                matchFailed("\"LANGMATCHES\"");
              }
            }
            if (result214 !== null) {
              var result215 = [];
              var result229 = parse_WS();
              while (result229 !== null) {
                result215.push(result229);
                var result229 = parse_WS();
              }
              if (result215 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result216 = "(";
                  pos += 1;
                } else {
                  var result216 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result216 !== null) {
                  var result217 = [];
                  var result228 = parse_WS();
                  while (result228 !== null) {
                    result217.push(result228);
                    var result228 = parse_WS();
                  }
                  if (result217 !== null) {
                    var result218 = parse_ConditionalOrExpression();
                    if (result218 !== null) {
                      var result219 = [];
                      var result227 = parse_WS();
                      while (result227 !== null) {
                        result219.push(result227);
                        var result227 = parse_WS();
                      }
                      if (result219 !== null) {
                        if (input.substr(pos, 1) === ",") {
                          var result220 = ",";
                          pos += 1;
                        } else {
                          var result220 = null;
                          if (reportMatchFailures) {
                            matchFailed("\",\"");
                          }
                        }
                        if (result220 !== null) {
                          var result221 = [];
                          var result226 = parse_WS();
                          while (result226 !== null) {
                            result221.push(result226);
                            var result226 = parse_WS();
                          }
                          if (result221 !== null) {
                            var result222 = parse_ConditionalOrExpression();
                            if (result222 !== null) {
                              var result223 = [];
                              var result225 = parse_WS();
                              while (result225 !== null) {
                                result223.push(result225);
                                var result225 = parse_WS();
                              }
                              if (result223 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result224 = ")";
                                  pos += 1;
                                } else {
                                  var result224 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result224 !== null) {
                                  var result213 = [result214, result215, result216, result217, result218, result219, result220, result221, result222, result223, result224];
                                } else {
                                  var result213 = null;
                                  pos = savedPos13;
                                }
                              } else {
                                var result213 = null;
                                pos = savedPos13;
                              }
                            } else {
                              var result213 = null;
                              pos = savedPos13;
                            }
                          } else {
                            var result213 = null;
                            pos = savedPos13;
                          }
                        } else {
                          var result213 = null;
                          pos = savedPos13;
                        }
                      } else {
                        var result213 = null;
                        pos = savedPos13;
                      }
                    } else {
                      var result213 = null;
                      pos = savedPos13;
                    }
                  } else {
                    var result213 = null;
                    pos = savedPos13;
                  }
                } else {
                  var result213 = null;
                  pos = savedPos13;
                }
              } else {
                var result213 = null;
                pos = savedPos13;
              }
            } else {
              var result213 = null;
              pos = savedPos13;
            }
            var result212 = result213 !== null
              ? (function(e1, e2) {
                    var ex = {};
                    ex.token = 'expression'
                    ex.expressionType = 'builtincall'
                    ex.builtincall = 'langmatches'
                    ex.args = [e1,e2]
              
                    return ex;
              })(result213[4], result213[8])
              : null;
            if (result212 !== null) {
              var result0 = result212;
            } else {
              var savedPos12 = pos;
              if (input.substr(pos, 1) === "D") {
                var result211 = "D";
                pos += 1;
              } else {
                var result211 = null;
                if (reportMatchFailures) {
                  matchFailed("\"D\"");
                }
              }
              if (result211 !== null) {
                var result179 = result211;
              } else {
                if (input.substr(pos, 1) === "d") {
                  var result210 = "d";
                  pos += 1;
                } else {
                  var result210 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"d\"");
                  }
                }
                if (result210 !== null) {
                  var result179 = result210;
                } else {
                  var result179 = null;;
                };
              }
              if (result179 !== null) {
                if (input.substr(pos, 1) === "A") {
                  var result209 = "A";
                  pos += 1;
                } else {
                  var result209 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"A\"");
                  }
                }
                if (result209 !== null) {
                  var result180 = result209;
                } else {
                  if (input.substr(pos, 1) === "a") {
                    var result208 = "a";
                    pos += 1;
                  } else {
                    var result208 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"a\"");
                    }
                  }
                  if (result208 !== null) {
                    var result180 = result208;
                  } else {
                    var result180 = null;;
                  };
                }
                if (result180 !== null) {
                  if (input.substr(pos, 1) === "T") {
                    var result207 = "T";
                    pos += 1;
                  } else {
                    var result207 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"T\"");
                    }
                  }
                  if (result207 !== null) {
                    var result181 = result207;
                  } else {
                    if (input.substr(pos, 1) === "t") {
                      var result206 = "t";
                      pos += 1;
                    } else {
                      var result206 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"t\"");
                      }
                    }
                    if (result206 !== null) {
                      var result181 = result206;
                    } else {
                      var result181 = null;;
                    };
                  }
                  if (result181 !== null) {
                    if (input.substr(pos, 1) === "A") {
                      var result205 = "A";
                      pos += 1;
                    } else {
                      var result205 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"A\"");
                      }
                    }
                    if (result205 !== null) {
                      var result182 = result205;
                    } else {
                      if (input.substr(pos, 1) === "a") {
                        var result204 = "a";
                        pos += 1;
                      } else {
                        var result204 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"a\"");
                        }
                      }
                      if (result204 !== null) {
                        var result182 = result204;
                      } else {
                        var result182 = null;;
                      };
                    }
                    if (result182 !== null) {
                      if (input.substr(pos, 1) === "T") {
                        var result203 = "T";
                        pos += 1;
                      } else {
                        var result203 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"T\"");
                        }
                      }
                      if (result203 !== null) {
                        var result183 = result203;
                      } else {
                        if (input.substr(pos, 1) === "t") {
                          var result202 = "t";
                          pos += 1;
                        } else {
                          var result202 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"t\"");
                          }
                        }
                        if (result202 !== null) {
                          var result183 = result202;
                        } else {
                          var result183 = null;;
                        };
                      }
                      if (result183 !== null) {
                        if (input.substr(pos, 1) === "Y") {
                          var result201 = "Y";
                          pos += 1;
                        } else {
                          var result201 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"Y\"");
                          }
                        }
                        if (result201 !== null) {
                          var result184 = result201;
                        } else {
                          if (input.substr(pos, 1) === "y") {
                            var result200 = "y";
                            pos += 1;
                          } else {
                            var result200 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"y\"");
                            }
                          }
                          if (result200 !== null) {
                            var result184 = result200;
                          } else {
                            var result184 = null;;
                          };
                        }
                        if (result184 !== null) {
                          if (input.substr(pos, 1) === "P") {
                            var result199 = "P";
                            pos += 1;
                          } else {
                            var result199 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"P\"");
                            }
                          }
                          if (result199 !== null) {
                            var result185 = result199;
                          } else {
                            if (input.substr(pos, 1) === "p") {
                              var result198 = "p";
                              pos += 1;
                            } else {
                              var result198 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"p\"");
                              }
                            }
                            if (result198 !== null) {
                              var result185 = result198;
                            } else {
                              var result185 = null;;
                            };
                          }
                          if (result185 !== null) {
                            if (input.substr(pos, 1) === "E") {
                              var result197 = "E";
                              pos += 1;
                            } else {
                              var result197 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"E\"");
                              }
                            }
                            if (result197 !== null) {
                              var result186 = result197;
                            } else {
                              if (input.substr(pos, 1) === "e") {
                                var result196 = "e";
                                pos += 1;
                              } else {
                                var result196 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"e\"");
                                }
                              }
                              if (result196 !== null) {
                                var result186 = result196;
                              } else {
                                var result186 = null;;
                              };
                            }
                            if (result186 !== null) {
                              var result187 = [];
                              var result195 = parse_WS();
                              while (result195 !== null) {
                                result187.push(result195);
                                var result195 = parse_WS();
                              }
                              if (result187 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                  var result188 = "(";
                                  pos += 1;
                                } else {
                                  var result188 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                  }
                                }
                                if (result188 !== null) {
                                  var result189 = [];
                                  var result194 = parse_WS();
                                  while (result194 !== null) {
                                    result189.push(result194);
                                    var result194 = parse_WS();
                                  }
                                  if (result189 !== null) {
                                    var result190 = parse_ConditionalOrExpression();
                                    if (result190 !== null) {
                                      var result191 = [];
                                      var result193 = parse_WS();
                                      while (result193 !== null) {
                                        result191.push(result193);
                                        var result193 = parse_WS();
                                      }
                                      if (result191 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                          var result192 = ")";
                                          pos += 1;
                                        } else {
                                          var result192 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result192 !== null) {
                                          var result178 = [result179, result180, result181, result182, result183, result184, result185, result186, result187, result188, result189, result190, result191, result192];
                                        } else {
                                          var result178 = null;
                                          pos = savedPos12;
                                        }
                                      } else {
                                        var result178 = null;
                                        pos = savedPos12;
                                      }
                                    } else {
                                      var result178 = null;
                                      pos = savedPos12;
                                    }
                                  } else {
                                    var result178 = null;
                                    pos = savedPos12;
                                  }
                                } else {
                                  var result178 = null;
                                  pos = savedPos12;
                                }
                              } else {
                                var result178 = null;
                                pos = savedPos12;
                              }
                            } else {
                              var result178 = null;
                              pos = savedPos12;
                            }
                          } else {
                            var result178 = null;
                            pos = savedPos12;
                          }
                        } else {
                          var result178 = null;
                          pos = savedPos12;
                        }
                      } else {
                        var result178 = null;
                        pos = savedPos12;
                      }
                    } else {
                      var result178 = null;
                      pos = savedPos12;
                    }
                  } else {
                    var result178 = null;
                    pos = savedPos12;
                  }
                } else {
                  var result178 = null;
                  pos = savedPos12;
                }
              } else {
                var result178 = null;
                pos = savedPos12;
              }
              var result177 = result178 !== null
                ? (function(e) {
                      var ex = {};
                      ex.token = 'expression'
                      ex.expressionType = 'builtincall'
                      ex.builtincall = 'datatype'
                      ex.args = [e]
                
                      return ex;
                })(result178[11])
                : null;
              if (result177 !== null) {
                var result0 = result177;
              } else {
                var savedPos11 = pos;
                if (input.substr(pos, 5) === "BOUND") {
                  var result167 = "BOUND";
                  pos += 5;
                } else {
                  var result167 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"BOUND\"");
                  }
                }
                if (result167 !== null) {
                  var result168 = [];
                  var result176 = parse_WS();
                  while (result176 !== null) {
                    result168.push(result176);
                    var result176 = parse_WS();
                  }
                  if (result168 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result169 = "(";
                      pos += 1;
                    } else {
                      var result169 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result169 !== null) {
                      var result170 = [];
                      var result175 = parse_WS();
                      while (result175 !== null) {
                        result170.push(result175);
                        var result175 = parse_WS();
                      }
                      if (result170 !== null) {
                        var result171 = parse_Var();
                        if (result171 !== null) {
                          var result172 = [];
                          var result174 = parse_WS();
                          while (result174 !== null) {
                            result172.push(result174);
                            var result174 = parse_WS();
                          }
                          if (result172 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result173 = ")";
                              pos += 1;
                            } else {
                              var result173 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result173 !== null) {
                              var result166 = [result167, result168, result169, result170, result171, result172, result173];
                            } else {
                              var result166 = null;
                              pos = savedPos11;
                            }
                          } else {
                            var result166 = null;
                            pos = savedPos11;
                          }
                        } else {
                          var result166 = null;
                          pos = savedPos11;
                        }
                      } else {
                        var result166 = null;
                        pos = savedPos11;
                      }
                    } else {
                      var result166 = null;
                      pos = savedPos11;
                    }
                  } else {
                    var result166 = null;
                    pos = savedPos11;
                  }
                } else {
                  var result166 = null;
                  pos = savedPos11;
                }
                var result165 = result166 !== null
                  ? (function(v) {
                        var ex = {};
                        ex.token = 'expression'
                        ex.expressionType = 'builtincall'
                        ex.builtincall = 'bound'
                        ex.args = [v]
                  
                        return ex;
                  })(result166[4])
                  : null;
                if (result165 !== null) {
                  var result0 = result165;
                } else {
                  var savedPos10 = pos;
                  if (input.substr(pos, 3) === "IRI") {
                    var result155 = "IRI";
                    pos += 3;
                  } else {
                    var result155 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"IRI\"");
                    }
                  }
                  if (result155 !== null) {
                    var result156 = [];
                    var result164 = parse_WS();
                    while (result164 !== null) {
                      result156.push(result164);
                      var result164 = parse_WS();
                    }
                    if (result156 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result157 = "(";
                        pos += 1;
                      } else {
                        var result157 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result157 !== null) {
                        var result158 = [];
                        var result163 = parse_WS();
                        while (result163 !== null) {
                          result158.push(result163);
                          var result163 = parse_WS();
                        }
                        if (result158 !== null) {
                          var result159 = parse_ConditionalOrExpression();
                          if (result159 !== null) {
                            var result160 = [];
                            var result162 = parse_WS();
                            while (result162 !== null) {
                              result160.push(result162);
                              var result162 = parse_WS();
                            }
                            if (result160 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result161 = ")";
                                pos += 1;
                              } else {
                                var result161 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result161 !== null) {
                                var result154 = [result155, result156, result157, result158, result159, result160, result161];
                              } else {
                                var result154 = null;
                                pos = savedPos10;
                              }
                            } else {
                              var result154 = null;
                              pos = savedPos10;
                            }
                          } else {
                            var result154 = null;
                            pos = savedPos10;
                          }
                        } else {
                          var result154 = null;
                          pos = savedPos10;
                        }
                      } else {
                        var result154 = null;
                        pos = savedPos10;
                      }
                    } else {
                      var result154 = null;
                      pos = savedPos10;
                    }
                  } else {
                    var result154 = null;
                    pos = savedPos10;
                  }
                  var result153 = result154 !== null
                    ? (function(e) {
                          var ex = {};
                          ex.token = 'expression';
                          ex.expressionType = 'builtincall';
                          ex.builtincall = 'iri'
                          ex.args = [e];
                    
                          return ex;
                    })(result154[4])
                    : null;
                  if (result153 !== null) {
                    var result0 = result153;
                  } else {
                    var savedPos9 = pos;
                    if (input.substr(pos, 3) === "URI") {
                      var result143 = "URI";
                      pos += 3;
                    } else {
                      var result143 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"URI\"");
                      }
                    }
                    if (result143 !== null) {
                      var result144 = [];
                      var result152 = parse_WS();
                      while (result152 !== null) {
                        result144.push(result152);
                        var result152 = parse_WS();
                      }
                      if (result144 !== null) {
                        if (input.substr(pos, 1) === "(") {
                          var result145 = "(";
                          pos += 1;
                        } else {
                          var result145 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"(\"");
                          }
                        }
                        if (result145 !== null) {
                          var result146 = [];
                          var result151 = parse_WS();
                          while (result151 !== null) {
                            result146.push(result151);
                            var result151 = parse_WS();
                          }
                          if (result146 !== null) {
                            var result147 = parse_ConditionalOrExpression();
                            if (result147 !== null) {
                              var result148 = [];
                              var result150 = parse_WS();
                              while (result150 !== null) {
                                result148.push(result150);
                                var result150 = parse_WS();
                              }
                              if (result148 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result149 = ")";
                                  pos += 1;
                                } else {
                                  var result149 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result149 !== null) {
                                  var result142 = [result143, result144, result145, result146, result147, result148, result149];
                                } else {
                                  var result142 = null;
                                  pos = savedPos9;
                                }
                              } else {
                                var result142 = null;
                                pos = savedPos9;
                              }
                            } else {
                              var result142 = null;
                              pos = savedPos9;
                            }
                          } else {
                            var result142 = null;
                            pos = savedPos9;
                          }
                        } else {
                          var result142 = null;
                          pos = savedPos9;
                        }
                      } else {
                        var result142 = null;
                        pos = savedPos9;
                      }
                    } else {
                      var result142 = null;
                      pos = savedPos9;
                    }
                    var result141 = result142 !== null
                      ? (function(e) {
                            var ex = {};
                            ex.token = 'expression';
                            ex.expressionType = 'builtincall';
                            ex.builtincall = 'uri'
                            ex.args = [e];
                      
                            return ex;
                      })(result142[4])
                      : null;
                    if (result141 !== null) {
                      var result0 = result141;
                    } else {
                      var savedPos7 = pos;
                      if (input.substr(pos, 5) === "BNODE") {
                        var result128 = "BNODE";
                        pos += 5;
                      } else {
                        var result128 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"BNODE\"");
                        }
                      }
                      if (result128 !== null) {
                        var result129 = [];
                        var result140 = parse_WS();
                        while (result140 !== null) {
                          result129.push(result140);
                          var result140 = parse_WS();
                        }
                        if (result129 !== null) {
                          var savedPos8 = pos;
                          if (input.substr(pos, 1) === "(") {
                            var result133 = "(";
                            pos += 1;
                          } else {
                            var result133 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"(\"");
                            }
                          }
                          if (result133 !== null) {
                            var result134 = [];
                            var result139 = parse_WS();
                            while (result139 !== null) {
                              result134.push(result139);
                              var result139 = parse_WS();
                            }
                            if (result134 !== null) {
                              var result135 = parse_ConditionalOrExpression();
                              if (result135 !== null) {
                                var result136 = [];
                                var result138 = parse_WS();
                                while (result138 !== null) {
                                  result136.push(result138);
                                  var result138 = parse_WS();
                                }
                                if (result136 !== null) {
                                  if (input.substr(pos, 1) === ")") {
                                    var result137 = ")";
                                    pos += 1;
                                  } else {
                                    var result137 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\")\"");
                                    }
                                  }
                                  if (result137 !== null) {
                                    var result132 = [result133, result134, result135, result136, result137];
                                  } else {
                                    var result132 = null;
                                    pos = savedPos8;
                                  }
                                } else {
                                  var result132 = null;
                                  pos = savedPos8;
                                }
                              } else {
                                var result132 = null;
                                pos = savedPos8;
                              }
                            } else {
                              var result132 = null;
                              pos = savedPos8;
                            }
                          } else {
                            var result132 = null;
                            pos = savedPos8;
                          }
                          if (result132 !== null) {
                            var result130 = result132;
                          } else {
                            var result131 = parse_NIL();
                            if (result131 !== null) {
                              var result130 = result131;
                            } else {
                              var result130 = null;;
                            };
                          }
                          if (result130 !== null) {
                            var result127 = [result128, result129, result130];
                          } else {
                            var result127 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result127 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result127 = null;
                        pos = savedPos7;
                      }
                      var result126 = result127 !== null
                        ? (function(arg) {
                              var ex = {};
                              ex.token = 'expression';
                              ex.expressionType = 'builtincall';
                              ex.builtincall = 'bnode';
                              if(arg.length === 5) {
                                  ex.args = [arg[2]];
                              } else {
                                  ex.args = null;
                              }
                        
                              return ex;
                        })(result127[2])
                        : null;
                      if (result126 !== null) {
                        var result0 = result126;
                      } else {
                        var savedPos6 = pos;
                        if (input.substr(pos, 8) === "COALESCE") {
                          var result122 = "COALESCE";
                          pos += 8;
                        } else {
                          var result122 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"COALESCE\"");
                          }
                        }
                        if (result122 !== null) {
                          var result123 = [];
                          var result125 = parse_WS();
                          while (result125 !== null) {
                            result123.push(result125);
                            var result125 = parse_WS();
                          }
                          if (result123 !== null) {
                            var result124 = parse_ExpressionList();
                            if (result124 !== null) {
                              var result121 = [result122, result123, result124];
                            } else {
                              var result121 = null;
                              pos = savedPos6;
                            }
                          } else {
                            var result121 = null;
                            pos = savedPos6;
                          }
                        } else {
                          var result121 = null;
                          pos = savedPos6;
                        }
                        var result120 = result121 !== null
                          ? (function(args) {
                                var ex = {};
                                ex.token = 'expression';
                                ex.expressionType = 'builtincall';
                                ex.builtincall = 'coalesce';
                                ex.args = args;
                          
                                return ex;    
                          })(result121[2])
                          : null;
                        if (result120 !== null) {
                          var result0 = result120;
                        } else {
                          var savedPos5 = pos;
                          if (input.substr(pos, 2) === "IF") {
                            var result98 = "IF";
                            pos += 2;
                          } else {
                            var result98 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"IF\"");
                            }
                          }
                          if (result98 !== null) {
                            var result99 = [];
                            var result119 = parse_WS();
                            while (result119 !== null) {
                              result99.push(result119);
                              var result119 = parse_WS();
                            }
                            if (result99 !== null) {
                              if (input.substr(pos, 1) === "(") {
                                var result100 = "(";
                                pos += 1;
                              } else {
                                var result100 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"(\"");
                                }
                              }
                              if (result100 !== null) {
                                var result101 = [];
                                var result118 = parse_WS();
                                while (result118 !== null) {
                                  result101.push(result118);
                                  var result118 = parse_WS();
                                }
                                if (result101 !== null) {
                                  var result102 = parse_ConditionalOrExpression();
                                  if (result102 !== null) {
                                    var result103 = [];
                                    var result117 = parse_WS();
                                    while (result117 !== null) {
                                      result103.push(result117);
                                      var result117 = parse_WS();
                                    }
                                    if (result103 !== null) {
                                      if (input.substr(pos, 1) === ",") {
                                        var result104 = ",";
                                        pos += 1;
                                      } else {
                                        var result104 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\",\"");
                                        }
                                      }
                                      if (result104 !== null) {
                                        var result105 = [];
                                        var result116 = parse_WS();
                                        while (result116 !== null) {
                                          result105.push(result116);
                                          var result116 = parse_WS();
                                        }
                                        if (result105 !== null) {
                                          var result106 = parse_ConditionalOrExpression();
                                          if (result106 !== null) {
                                            var result107 = [];
                                            var result115 = parse_WS();
                                            while (result115 !== null) {
                                              result107.push(result115);
                                              var result115 = parse_WS();
                                            }
                                            if (result107 !== null) {
                                              if (input.substr(pos, 1) === ",") {
                                                var result108 = ",";
                                                pos += 1;
                                              } else {
                                                var result108 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\",\"");
                                                }
                                              }
                                              if (result108 !== null) {
                                                var result109 = [];
                                                var result114 = parse_WS();
                                                while (result114 !== null) {
                                                  result109.push(result114);
                                                  var result114 = parse_WS();
                                                }
                                                if (result109 !== null) {
                                                  var result110 = parse_ConditionalOrExpression();
                                                  if (result110 !== null) {
                                                    var result111 = [];
                                                    var result113 = parse_WS();
                                                    while (result113 !== null) {
                                                      result111.push(result113);
                                                      var result113 = parse_WS();
                                                    }
                                                    if (result111 !== null) {
                                                      if (input.substr(pos, 1) === ")") {
                                                        var result112 = ")";
                                                        pos += 1;
                                                      } else {
                                                        var result112 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\")\"");
                                                        }
                                                      }
                                                      if (result112 !== null) {
                                                        var result97 = [result98, result99, result100, result101, result102, result103, result104, result105, result106, result107, result108, result109, result110, result111, result112];
                                                      } else {
                                                        var result97 = null;
                                                        pos = savedPos5;
                                                      }
                                                    } else {
                                                      var result97 = null;
                                                      pos = savedPos5;
                                                    }
                                                  } else {
                                                    var result97 = null;
                                                    pos = savedPos5;
                                                  }
                                                } else {
                                                  var result97 = null;
                                                  pos = savedPos5;
                                                }
                                              } else {
                                                var result97 = null;
                                                pos = savedPos5;
                                              }
                                            } else {
                                              var result97 = null;
                                              pos = savedPos5;
                                            }
                                          } else {
                                            var result97 = null;
                                            pos = savedPos5;
                                          }
                                        } else {
                                          var result97 = null;
                                          pos = savedPos5;
                                        }
                                      } else {
                                        var result97 = null;
                                        pos = savedPos5;
                                      }
                                    } else {
                                      var result97 = null;
                                      pos = savedPos5;
                                    }
                                  } else {
                                    var result97 = null;
                                    pos = savedPos5;
                                  }
                                } else {
                                  var result97 = null;
                                  pos = savedPos5;
                                }
                              } else {
                                var result97 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result97 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result97 = null;
                            pos = savedPos5;
                          }
                          var result96 = result97 !== null
                            ? (function(test, trueCond, falseCond) {
                                var ex = {};
                                ex.token = 'expression';
                                ex.expressionType = 'builtincall';
                                ex.builtincall = 'if';
                                ex.args = [test,trueCond,falseCond];
                            
                                return ex;
                            })(result97[4], result97[8], result97[12])
                            : null;
                          if (result96 !== null) {
                            var result0 = result96;
                          } else {
                            var savedPos4 = pos;
                            if (input.substr(pos, 9) === "ISLITERAL") {
                              var result86 = "ISLITERAL";
                              pos += 9;
                            } else {
                              var result86 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"ISLITERAL\"");
                              }
                            }
                            if (result86 !== null) {
                              var result87 = [];
                              var result95 = parse_WS();
                              while (result95 !== null) {
                                result87.push(result95);
                                var result95 = parse_WS();
                              }
                              if (result87 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                  var result88 = "(";
                                  pos += 1;
                                } else {
                                  var result88 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                  }
                                }
                                if (result88 !== null) {
                                  var result89 = [];
                                  var result94 = parse_WS();
                                  while (result94 !== null) {
                                    result89.push(result94);
                                    var result94 = parse_WS();
                                  }
                                  if (result89 !== null) {
                                    var result90 = parse_ConditionalOrExpression();
                                    if (result90 !== null) {
                                      var result91 = [];
                                      var result93 = parse_WS();
                                      while (result93 !== null) {
                                        result91.push(result93);
                                        var result93 = parse_WS();
                                      }
                                      if (result91 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                          var result92 = ")";
                                          pos += 1;
                                        } else {
                                          var result92 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result92 !== null) {
                                          var result85 = [result86, result87, result88, result89, result90, result91, result92];
                                        } else {
                                          var result85 = null;
                                          pos = savedPos4;
                                        }
                                      } else {
                                        var result85 = null;
                                        pos = savedPos4;
                                      }
                                    } else {
                                      var result85 = null;
                                      pos = savedPos4;
                                    }
                                  } else {
                                    var result85 = null;
                                    pos = savedPos4;
                                  }
                                } else {
                                  var result85 = null;
                                  pos = savedPos4;
                                }
                              } else {
                                var result85 = null;
                                pos = savedPos4;
                              }
                            } else {
                              var result85 = null;
                              pos = savedPos4;
                            }
                            var result84 = result85 !== null
                              ? (function(arg) {
                                  var ex = {};
                                  ex.token = 'expression';
                                  ex.expressionType = 'builtincall';
                                  ex.builtincall = 'isliteral';
                                  ex.args = [arg];
                              
                                  return ex;
                              })(result85[4])
                              : null;
                            if (result84 !== null) {
                              var result0 = result84;
                            } else {
                              var savedPos3 = pos;
                              if (input.substr(pos, 7) === "ISBLANK") {
                                var result74 = "ISBLANK";
                                pos += 7;
                              } else {
                                var result74 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"ISBLANK\"");
                                }
                              }
                              if (result74 !== null) {
                                var result75 = [];
                                var result83 = parse_WS();
                                while (result83 !== null) {
                                  result75.push(result83);
                                  var result83 = parse_WS();
                                }
                                if (result75 !== null) {
                                  if (input.substr(pos, 1) === "(") {
                                    var result76 = "(";
                                    pos += 1;
                                  } else {
                                    var result76 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"(\"");
                                    }
                                  }
                                  if (result76 !== null) {
                                    var result77 = [];
                                    var result82 = parse_WS();
                                    while (result82 !== null) {
                                      result77.push(result82);
                                      var result82 = parse_WS();
                                    }
                                    if (result77 !== null) {
                                      var result78 = parse_ConditionalOrExpression();
                                      if (result78 !== null) {
                                        var result79 = [];
                                        var result81 = parse_WS();
                                        while (result81 !== null) {
                                          result79.push(result81);
                                          var result81 = parse_WS();
                                        }
                                        if (result79 !== null) {
                                          if (input.substr(pos, 1) === ")") {
                                            var result80 = ")";
                                            pos += 1;
                                          } else {
                                            var result80 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (result80 !== null) {
                                            var result73 = [result74, result75, result76, result77, result78, result79, result80];
                                          } else {
                                            var result73 = null;
                                            pos = savedPos3;
                                          }
                                        } else {
                                          var result73 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result73 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result73 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result73 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result73 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result73 = null;
                                pos = savedPos3;
                              }
                              var result72 = result73 !== null
                                ? (function(arg) {
                                    var ex = {};
                                    ex.token = 'expression';
                                    ex.expressionType = 'builtincall';
                                    ex.builtincall = 'isblank';
                                    ex.args = [arg];
                                
                                    return ex;
                                })(result73[4])
                                : null;
                              if (result72 !== null) {
                                var result0 = result72;
                              } else {
                                var savedPos2 = pos;
                                if (input.substr(pos, 8) === "SAMETERM") {
                                  var result56 = "SAMETERM";
                                  pos += 8;
                                } else {
                                  var result56 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"SAMETERM\"");
                                  }
                                }
                                if (result56 !== null) {
                                  var result57 = [];
                                  var result71 = parse_WS();
                                  while (result71 !== null) {
                                    result57.push(result71);
                                    var result71 = parse_WS();
                                  }
                                  if (result57 !== null) {
                                    if (input.substr(pos, 1) === "(") {
                                      var result58 = "(";
                                      pos += 1;
                                    } else {
                                      var result58 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                      }
                                    }
                                    if (result58 !== null) {
                                      var result59 = [];
                                      var result70 = parse_WS();
                                      while (result70 !== null) {
                                        result59.push(result70);
                                        var result70 = parse_WS();
                                      }
                                      if (result59 !== null) {
                                        var result60 = parse_ConditionalOrExpression();
                                        if (result60 !== null) {
                                          var result61 = [];
                                          var result69 = parse_WS();
                                          while (result69 !== null) {
                                            result61.push(result69);
                                            var result69 = parse_WS();
                                          }
                                          if (result61 !== null) {
                                            if (input.substr(pos, 1) === ",") {
                                              var result62 = ",";
                                              pos += 1;
                                            } else {
                                              var result62 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\",\"");
                                              }
                                            }
                                            if (result62 !== null) {
                                              var result63 = [];
                                              var result68 = parse_WS();
                                              while (result68 !== null) {
                                                result63.push(result68);
                                                var result68 = parse_WS();
                                              }
                                              if (result63 !== null) {
                                                var result64 = parse_ConditionalOrExpression();
                                                if (result64 !== null) {
                                                  var result65 = [];
                                                  var result67 = parse_WS();
                                                  while (result67 !== null) {
                                                    result65.push(result67);
                                                    var result67 = parse_WS();
                                                  }
                                                  if (result65 !== null) {
                                                    if (input.substr(pos, 1) === ")") {
                                                      var result66 = ")";
                                                      pos += 1;
                                                    } else {
                                                      var result66 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\")\"");
                                                      }
                                                    }
                                                    if (result66 !== null) {
                                                      var result55 = [result56, result57, result58, result59, result60, result61, result62, result63, result64, result65, result66];
                                                    } else {
                                                      var result55 = null;
                                                      pos = savedPos2;
                                                    }
                                                  } else {
                                                    var result55 = null;
                                                    pos = savedPos2;
                                                  }
                                                } else {
                                                  var result55 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result55 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result55 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result55 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result55 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result55 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result55 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result55 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result55 = null;
                                  pos = savedPos2;
                                }
                                var result54 = result55 !== null
                                  ? (function(e1, e2) {
                                      var ex = {};
                                      ex.token = 'expression';
                                      ex.expressionType = 'builtincall';
                                      ex.builtincall = 'sameterm';
                                      ex.args = [e1, e2];
                                      return ex;
                                  })(result55[4], result55[8])
                                  : null;
                                if (result54 !== null) {
                                  var result0 = result54;
                                } else {
                                  var savedPos1 = pos;
                                  if (input.substr(pos, 1) === "I") {
                                    var result53 = "I";
                                    pos += 1;
                                  } else {
                                    var result53 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"I\"");
                                    }
                                  }
                                  if (result53 !== null) {
                                    var result30 = result53;
                                  } else {
                                    if (input.substr(pos, 1) === "i") {
                                      var result52 = "i";
                                      pos += 1;
                                    } else {
                                      var result52 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"i\"");
                                      }
                                    }
                                    if (result52 !== null) {
                                      var result30 = result52;
                                    } else {
                                      var result30 = null;;
                                    };
                                  }
                                  if (result30 !== null) {
                                    if (input.substr(pos, 1) === "S") {
                                      var result51 = "S";
                                      pos += 1;
                                    } else {
                                      var result51 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"S\"");
                                      }
                                    }
                                    if (result51 !== null) {
                                      var result31 = result51;
                                    } else {
                                      if (input.substr(pos, 1) === "s") {
                                        var result50 = "s";
                                        pos += 1;
                                      } else {
                                        var result50 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"s\"");
                                        }
                                      }
                                      if (result50 !== null) {
                                        var result31 = result50;
                                      } else {
                                        var result31 = null;;
                                      };
                                    }
                                    if (result31 !== null) {
                                      if (input.substr(pos, 1) === "U") {
                                        var result49 = "U";
                                        pos += 1;
                                      } else {
                                        var result49 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"U\"");
                                        }
                                      }
                                      if (result49 !== null) {
                                        var result32 = result49;
                                      } else {
                                        if (input.substr(pos, 1) === "u") {
                                          var result48 = "u";
                                          pos += 1;
                                        } else {
                                          var result48 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"u\"");
                                          }
                                        }
                                        if (result48 !== null) {
                                          var result32 = result48;
                                        } else {
                                          var result32 = null;;
                                        };
                                      }
                                      if (result32 !== null) {
                                        if (input.substr(pos, 1) === "R") {
                                          var result47 = "R";
                                          pos += 1;
                                        } else {
                                          var result47 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"R\"");
                                          }
                                        }
                                        if (result47 !== null) {
                                          var result33 = result47;
                                        } else {
                                          if (input.substr(pos, 1) === "r") {
                                            var result46 = "r";
                                            pos += 1;
                                          } else {
                                            var result46 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"r\"");
                                            }
                                          }
                                          if (result46 !== null) {
                                            var result33 = result46;
                                          } else {
                                            var result33 = null;;
                                          };
                                        }
                                        if (result33 !== null) {
                                          if (input.substr(pos, 1) === "I") {
                                            var result45 = "I";
                                            pos += 1;
                                          } else {
                                            var result45 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"I\"");
                                            }
                                          }
                                          if (result45 !== null) {
                                            var result34 = result45;
                                          } else {
                                            if (input.substr(pos, 1) === "i") {
                                              var result44 = "i";
                                              pos += 1;
                                            } else {
                                              var result44 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"i\"");
                                              }
                                            }
                                            if (result44 !== null) {
                                              var result34 = result44;
                                            } else {
                                              var result34 = null;;
                                            };
                                          }
                                          if (result34 !== null) {
                                            var result35 = [];
                                            var result43 = parse_WS();
                                            while (result43 !== null) {
                                              result35.push(result43);
                                              var result43 = parse_WS();
                                            }
                                            if (result35 !== null) {
                                              if (input.substr(pos, 1) === "(") {
                                                var result36 = "(";
                                                pos += 1;
                                              } else {
                                                var result36 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"(\"");
                                                }
                                              }
                                              if (result36 !== null) {
                                                var result37 = [];
                                                var result42 = parse_WS();
                                                while (result42 !== null) {
                                                  result37.push(result42);
                                                  var result42 = parse_WS();
                                                }
                                                if (result37 !== null) {
                                                  var result38 = parse_ConditionalOrExpression();
                                                  if (result38 !== null) {
                                                    var result39 = [];
                                                    var result41 = parse_WS();
                                                    while (result41 !== null) {
                                                      result39.push(result41);
                                                      var result41 = parse_WS();
                                                    }
                                                    if (result39 !== null) {
                                                      if (input.substr(pos, 1) === ")") {
                                                        var result40 = ")";
                                                        pos += 1;
                                                      } else {
                                                        var result40 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\")\"");
                                                        }
                                                      }
                                                      if (result40 !== null) {
                                                        var result29 = [result30, result31, result32, result33, result34, result35, result36, result37, result38, result39, result40];
                                                      } else {
                                                        var result29 = null;
                                                        pos = savedPos1;
                                                      }
                                                    } else {
                                                      var result29 = null;
                                                      pos = savedPos1;
                                                    }
                                                  } else {
                                                    var result29 = null;
                                                    pos = savedPos1;
                                                  }
                                                } else {
                                                  var result29 = null;
                                                  pos = savedPos1;
                                                }
                                              } else {
                                                var result29 = null;
                                                pos = savedPos1;
                                              }
                                            } else {
                                              var result29 = null;
                                              pos = savedPos1;
                                            }
                                          } else {
                                            var result29 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result29 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result29 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result29 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result29 = null;
                                    pos = savedPos1;
                                  }
                                  var result28 = result29 !== null
                                    ? (function(arg) {
                                        var ex = {};
                                        ex.token = 'expression';
                                        ex.expressionType = 'builtincall';
                                        ex.builtincall = 'isuri';
                                        ex.args = [arg];
                                    
                                        return ex;
                                    })(result29[8])
                                    : null;
                                  if (result28 !== null) {
                                    var result0 = result28;
                                  } else {
                                    var savedPos0 = pos;
                                    if (input.substr(pos, 1) === "I") {
                                      var result27 = "I";
                                      pos += 1;
                                    } else {
                                      var result27 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"I\"");
                                      }
                                    }
                                    if (result27 !== null) {
                                      var result4 = result27;
                                    } else {
                                      if (input.substr(pos, 1) === "i") {
                                        var result26 = "i";
                                        pos += 1;
                                      } else {
                                        var result26 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"i\"");
                                        }
                                      }
                                      if (result26 !== null) {
                                        var result4 = result26;
                                      } else {
                                        var result4 = null;;
                                      };
                                    }
                                    if (result4 !== null) {
                                      if (input.substr(pos, 1) === "S") {
                                        var result25 = "S";
                                        pos += 1;
                                      } else {
                                        var result25 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"S\"");
                                        }
                                      }
                                      if (result25 !== null) {
                                        var result5 = result25;
                                      } else {
                                        if (input.substr(pos, 1) === "s") {
                                          var result24 = "s";
                                          pos += 1;
                                        } else {
                                          var result24 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"s\"");
                                          }
                                        }
                                        if (result24 !== null) {
                                          var result5 = result24;
                                        } else {
                                          var result5 = null;;
                                        };
                                      }
                                      if (result5 !== null) {
                                        if (input.substr(pos, 1) === "I") {
                                          var result23 = "I";
                                          pos += 1;
                                        } else {
                                          var result23 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"I\"");
                                          }
                                        }
                                        if (result23 !== null) {
                                          var result6 = result23;
                                        } else {
                                          if (input.substr(pos, 1) === "i") {
                                            var result22 = "i";
                                            pos += 1;
                                          } else {
                                            var result22 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"i\"");
                                            }
                                          }
                                          if (result22 !== null) {
                                            var result6 = result22;
                                          } else {
                                            var result6 = null;;
                                          };
                                        }
                                        if (result6 !== null) {
                                          if (input.substr(pos, 1) === "R") {
                                            var result21 = "R";
                                            pos += 1;
                                          } else {
                                            var result21 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"R\"");
                                            }
                                          }
                                          if (result21 !== null) {
                                            var result7 = result21;
                                          } else {
                                            if (input.substr(pos, 1) === "r") {
                                              var result20 = "r";
                                              pos += 1;
                                            } else {
                                              var result20 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"r\"");
                                              }
                                            }
                                            if (result20 !== null) {
                                              var result7 = result20;
                                            } else {
                                              var result7 = null;;
                                            };
                                          }
                                          if (result7 !== null) {
                                            if (input.substr(pos, 1) === "I") {
                                              var result19 = "I";
                                              pos += 1;
                                            } else {
                                              var result19 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"I\"");
                                              }
                                            }
                                            if (result19 !== null) {
                                              var result8 = result19;
                                            } else {
                                              if (input.substr(pos, 1) === "i") {
                                                var result18 = "i";
                                                pos += 1;
                                              } else {
                                                var result18 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"i\"");
                                                }
                                              }
                                              if (result18 !== null) {
                                                var result8 = result18;
                                              } else {
                                                var result8 = null;;
                                              };
                                            }
                                            if (result8 !== null) {
                                              var result9 = [];
                                              var result17 = parse_WS();
                                              while (result17 !== null) {
                                                result9.push(result17);
                                                var result17 = parse_WS();
                                              }
                                              if (result9 !== null) {
                                                if (input.substr(pos, 1) === "(") {
                                                  var result10 = "(";
                                                  pos += 1;
                                                } else {
                                                  var result10 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"(\"");
                                                  }
                                                }
                                                if (result10 !== null) {
                                                  var result11 = [];
                                                  var result16 = parse_WS();
                                                  while (result16 !== null) {
                                                    result11.push(result16);
                                                    var result16 = parse_WS();
                                                  }
                                                  if (result11 !== null) {
                                                    var result12 = parse_ConditionalOrExpression();
                                                    if (result12 !== null) {
                                                      var result13 = [];
                                                      var result15 = parse_WS();
                                                      while (result15 !== null) {
                                                        result13.push(result15);
                                                        var result15 = parse_WS();
                                                      }
                                                      if (result13 !== null) {
                                                        if (input.substr(pos, 1) === ")") {
                                                          var result14 = ")";
                                                          pos += 1;
                                                        } else {
                                                          var result14 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\")\"");
                                                          }
                                                        }
                                                        if (result14 !== null) {
                                                          var result3 = [result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                                        } else {
                                                          var result3 = null;
                                                          pos = savedPos0;
                                                        }
                                                      } else {
                                                        var result3 = null;
                                                        pos = savedPos0;
                                                      }
                                                    } else {
                                                      var result3 = null;
                                                      pos = savedPos0;
                                                    }
                                                  } else {
                                                    var result3 = null;
                                                    pos = savedPos0;
                                                  }
                                                } else {
                                                  var result3 = null;
                                                  pos = savedPos0;
                                                }
                                              } else {
                                                var result3 = null;
                                                pos = savedPos0;
                                              }
                                            } else {
                                              var result3 = null;
                                              pos = savedPos0;
                                            }
                                          } else {
                                            var result3 = null;
                                            pos = savedPos0;
                                          }
                                        } else {
                                          var result3 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result3 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result3 = null;
                                      pos = savedPos0;
                                    }
                                    var result2 = result3 !== null
                                      ? (function(arg) {
                                          var ex = {};
                                          ex.token = 'expression';
                                          ex.expressionType = 'builtincall';
                                          ex.builtincall = 'isuri';
                                          ex.args = [arg];
                                      
                                          return ex;
                                      })(result3[8])
                                      : null;
                                    if (result2 !== null) {
                                      var result0 = result2;
                                    } else {
                                      var result1 = parse_RegexExpression();
                                      if (result1 !== null) {
                                        var result0 = result1;
                                      } else {
                                        var result0 = null;;
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[106] BuiltInCall");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RegexExpression() {
        var cacheKey = 'RegexExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "R") {
          var result39 = "R";
          pos += 1;
        } else {
          var result39 = null;
          if (reportMatchFailures) {
            matchFailed("\"R\"");
          }
        }
        if (result39 !== null) {
          var result2 = result39;
        } else {
          if (input.substr(pos, 1) === "r") {
            var result38 = "r";
            pos += 1;
          } else {
            var result38 = null;
            if (reportMatchFailures) {
              matchFailed("\"r\"");
            }
          }
          if (result38 !== null) {
            var result2 = result38;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          if (input.substr(pos, 1) === "E") {
            var result37 = "E";
            pos += 1;
          } else {
            var result37 = null;
            if (reportMatchFailures) {
              matchFailed("\"E\"");
            }
          }
          if (result37 !== null) {
            var result3 = result37;
          } else {
            if (input.substr(pos, 1) === "e") {
              var result36 = "e";
              pos += 1;
            } else {
              var result36 = null;
              if (reportMatchFailures) {
                matchFailed("\"e\"");
              }
            }
            if (result36 !== null) {
              var result3 = result36;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "G") {
              var result35 = "G";
              pos += 1;
            } else {
              var result35 = null;
              if (reportMatchFailures) {
                matchFailed("\"G\"");
              }
            }
            if (result35 !== null) {
              var result4 = result35;
            } else {
              if (input.substr(pos, 1) === "g") {
                var result34 = "g";
                pos += 1;
              } else {
                var result34 = null;
                if (reportMatchFailures) {
                  matchFailed("\"g\"");
                }
              }
              if (result34 !== null) {
                var result4 = result34;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result33 = "E";
                pos += 1;
              } else {
                var result33 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result33 !== null) {
                var result5 = result33;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result32 = "e";
                  pos += 1;
                } else {
                  var result32 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result32 !== null) {
                  var result5 = result32;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "X") {
                  var result31 = "X";
                  pos += 1;
                } else {
                  var result31 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"X\"");
                  }
                }
                if (result31 !== null) {
                  var result6 = result31;
                } else {
                  if (input.substr(pos, 1) === "x") {
                    var result30 = "x";
                    pos += 1;
                  } else {
                    var result30 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"x\"");
                    }
                  }
                  if (result30 !== null) {
                    var result6 = result30;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result7 = [];
                  var result29 = parse_WS();
                  while (result29 !== null) {
                    result7.push(result29);
                    var result29 = parse_WS();
                  }
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result8 = "(";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result8 !== null) {
                      var result9 = [];
                      var result28 = parse_WS();
                      while (result28 !== null) {
                        result9.push(result28);
                        var result28 = parse_WS();
                      }
                      if (result9 !== null) {
                        var result10 = parse_ConditionalOrExpression();
                        if (result10 !== null) {
                          var result11 = [];
                          var result27 = parse_WS();
                          while (result27 !== null) {
                            result11.push(result27);
                            var result27 = parse_WS();
                          }
                          if (result11 !== null) {
                            if (input.substr(pos, 1) === ",") {
                              var result12 = ",";
                              pos += 1;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\",\"");
                              }
                            }
                            if (result12 !== null) {
                              var result13 = [];
                              var result26 = parse_WS();
                              while (result26 !== null) {
                                result13.push(result26);
                                var result26 = parse_WS();
                              }
                              if (result13 !== null) {
                                var result14 = parse_ConditionalOrExpression();
                                if (result14 !== null) {
                                  var result15 = [];
                                  var result25 = parse_WS();
                                  while (result25 !== null) {
                                    result15.push(result25);
                                    var result25 = parse_WS();
                                  }
                                  if (result15 !== null) {
                                    var savedPos1 = pos;
                                    if (input.substr(pos, 1) === ",") {
                                      var result21 = ",";
                                      pos += 1;
                                    } else {
                                      var result21 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\",\"");
                                      }
                                    }
                                    if (result21 !== null) {
                                      var result22 = [];
                                      var result24 = parse_WS();
                                      while (result24 !== null) {
                                        result22.push(result24);
                                        var result24 = parse_WS();
                                      }
                                      if (result22 !== null) {
                                        var result23 = parse_ConditionalOrExpression();
                                        if (result23 !== null) {
                                          var result20 = [result21, result22, result23];
                                        } else {
                                          var result20 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result20 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result20 = null;
                                      pos = savedPos1;
                                    }
                                    var result16 = result20 !== null ? result20 : '';
                                    if (result16 !== null) {
                                      var result17 = [];
                                      var result19 = parse_WS();
                                      while (result19 !== null) {
                                        result17.push(result19);
                                        var result19 = parse_WS();
                                      }
                                      if (result17 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                          var result18 = ")";
                                          pos += 1;
                                        } else {
                                          var result18 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result18 !== null) {
                                          var result1 = [result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18];
                                        } else {
                                          var result1 = null;
                                          pos = savedPos0;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e1, e2, eo) {
                var regex = {};
                regex.token = 'expression';
                regex.expressionType = 'regex';
                regex.text = e1;
                regex.pattern = e2;
                regex.flags = eo[2];
          
                return regex;
          })(result1[8], result1[12], result1[14])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[107] RegexExpression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExistsFunc() {
        var cacheKey = 'ExistsFunc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "EXISTS") {
          var result1 = "EXISTS";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"EXISTS\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_GroupGraphPattern();
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[108] ExistsFunc");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NotExistsFunc() {
        var cacheKey = 'NotExistsFunc@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 10) === "NOT EXISTS") {
          var result1 = "NOT EXISTS";
          pos += 10;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"NOT EXISTS\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse_GroupGraphPattern();
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[109] NotExistsFunc");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Aggregate() {
        var cacheKey = 'Aggregate@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos8 = pos;
        if (input.substr(pos, 1) === "C") {
          var result258 = "C";
          pos += 1;
        } else {
          var result258 = null;
          if (reportMatchFailures) {
            matchFailed("\"C\"");
          }
        }
        if (result258 !== null) {
          var result203 = result258;
        } else {
          if (input.substr(pos, 1) === "c") {
            var result257 = "c";
            pos += 1;
          } else {
            var result257 = null;
            if (reportMatchFailures) {
              matchFailed("\"c\"");
            }
          }
          if (result257 !== null) {
            var result203 = result257;
          } else {
            var result203 = null;;
          };
        }
        if (result203 !== null) {
          if (input.substr(pos, 1) === "O") {
            var result256 = "O";
            pos += 1;
          } else {
            var result256 = null;
            if (reportMatchFailures) {
              matchFailed("\"O\"");
            }
          }
          if (result256 !== null) {
            var result204 = result256;
          } else {
            if (input.substr(pos, 1) === "o") {
              var result255 = "o";
              pos += 1;
            } else {
              var result255 = null;
              if (reportMatchFailures) {
                matchFailed("\"o\"");
              }
            }
            if (result255 !== null) {
              var result204 = result255;
            } else {
              var result204 = null;;
            };
          }
          if (result204 !== null) {
            if (input.substr(pos, 1) === "U") {
              var result254 = "U";
              pos += 1;
            } else {
              var result254 = null;
              if (reportMatchFailures) {
                matchFailed("\"U\"");
              }
            }
            if (result254 !== null) {
              var result205 = result254;
            } else {
              if (input.substr(pos, 1) === "u") {
                var result253 = "u";
                pos += 1;
              } else {
                var result253 = null;
                if (reportMatchFailures) {
                  matchFailed("\"u\"");
                }
              }
              if (result253 !== null) {
                var result205 = result253;
              } else {
                var result205 = null;;
              };
            }
            if (result205 !== null) {
              if (input.substr(pos, 1) === "N") {
                var result252 = "N";
                pos += 1;
              } else {
                var result252 = null;
                if (reportMatchFailures) {
                  matchFailed("\"N\"");
                }
              }
              if (result252 !== null) {
                var result206 = result252;
              } else {
                if (input.substr(pos, 1) === "n") {
                  var result251 = "n";
                  pos += 1;
                } else {
                  var result251 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"n\"");
                  }
                }
                if (result251 !== null) {
                  var result206 = result251;
                } else {
                  var result206 = null;;
                };
              }
              if (result206 !== null) {
                if (input.substr(pos, 1) === "T") {
                  var result250 = "T";
                  pos += 1;
                } else {
                  var result250 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"T\"");
                  }
                }
                if (result250 !== null) {
                  var result207 = result250;
                } else {
                  if (input.substr(pos, 1) === "t") {
                    var result249 = "t";
                    pos += 1;
                  } else {
                    var result249 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"t\"");
                    }
                  }
                  if (result249 !== null) {
                    var result207 = result249;
                  } else {
                    var result207 = null;;
                  };
                }
                if (result207 !== null) {
                  var result208 = [];
                  var result248 = parse_WS();
                  while (result248 !== null) {
                    result208.push(result248);
                    var result248 = parse_WS();
                  }
                  if (result208 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result209 = "(";
                      pos += 1;
                    } else {
                      var result209 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result209 !== null) {
                      var result210 = [];
                      var result247 = parse_WS();
                      while (result247 !== null) {
                        result210.push(result247);
                        var result247 = parse_WS();
                      }
                      if (result210 !== null) {
                        var savedPos9 = pos;
                        if (input.substr(pos, 1) === "D") {
                          var result246 = "D";
                          pos += 1;
                        } else {
                          var result246 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"D\"");
                          }
                        }
                        if (result246 !== null) {
                          var result223 = result246;
                        } else {
                          if (input.substr(pos, 1) === "d") {
                            var result245 = "d";
                            pos += 1;
                          } else {
                            var result245 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"d\"");
                            }
                          }
                          if (result245 !== null) {
                            var result223 = result245;
                          } else {
                            var result223 = null;;
                          };
                        }
                        if (result223 !== null) {
                          if (input.substr(pos, 1) === "I") {
                            var result244 = "I";
                            pos += 1;
                          } else {
                            var result244 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"I\"");
                            }
                          }
                          if (result244 !== null) {
                            var result224 = result244;
                          } else {
                            if (input.substr(pos, 1) === "i") {
                              var result243 = "i";
                              pos += 1;
                            } else {
                              var result243 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"i\"");
                              }
                            }
                            if (result243 !== null) {
                              var result224 = result243;
                            } else {
                              var result224 = null;;
                            };
                          }
                          if (result224 !== null) {
                            if (input.substr(pos, 1) === "S") {
                              var result242 = "S";
                              pos += 1;
                            } else {
                              var result242 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"S\"");
                              }
                            }
                            if (result242 !== null) {
                              var result225 = result242;
                            } else {
                              if (input.substr(pos, 1) === "s") {
                                var result241 = "s";
                                pos += 1;
                              } else {
                                var result241 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"s\"");
                                }
                              }
                              if (result241 !== null) {
                                var result225 = result241;
                              } else {
                                var result225 = null;;
                              };
                            }
                            if (result225 !== null) {
                              if (input.substr(pos, 1) === "T") {
                                var result240 = "T";
                                pos += 1;
                              } else {
                                var result240 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"T\"");
                                }
                              }
                              if (result240 !== null) {
                                var result226 = result240;
                              } else {
                                if (input.substr(pos, 1) === "t") {
                                  var result239 = "t";
                                  pos += 1;
                                } else {
                                  var result239 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"t\"");
                                  }
                                }
                                if (result239 !== null) {
                                  var result226 = result239;
                                } else {
                                  var result226 = null;;
                                };
                              }
                              if (result226 !== null) {
                                if (input.substr(pos, 1) === "I") {
                                  var result238 = "I";
                                  pos += 1;
                                } else {
                                  var result238 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"I\"");
                                  }
                                }
                                if (result238 !== null) {
                                  var result227 = result238;
                                } else {
                                  if (input.substr(pos, 1) === "i") {
                                    var result237 = "i";
                                    pos += 1;
                                  } else {
                                    var result237 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"i\"");
                                    }
                                  }
                                  if (result237 !== null) {
                                    var result227 = result237;
                                  } else {
                                    var result227 = null;;
                                  };
                                }
                                if (result227 !== null) {
                                  if (input.substr(pos, 1) === "N") {
                                    var result236 = "N";
                                    pos += 1;
                                  } else {
                                    var result236 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"N\"");
                                    }
                                  }
                                  if (result236 !== null) {
                                    var result228 = result236;
                                  } else {
                                    if (input.substr(pos, 1) === "n") {
                                      var result235 = "n";
                                      pos += 1;
                                    } else {
                                      var result235 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"n\"");
                                      }
                                    }
                                    if (result235 !== null) {
                                      var result228 = result235;
                                    } else {
                                      var result228 = null;;
                                    };
                                  }
                                  if (result228 !== null) {
                                    if (input.substr(pos, 1) === "C") {
                                      var result234 = "C";
                                      pos += 1;
                                    } else {
                                      var result234 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"C\"");
                                      }
                                    }
                                    if (result234 !== null) {
                                      var result229 = result234;
                                    } else {
                                      if (input.substr(pos, 1) === "c") {
                                        var result233 = "c";
                                        pos += 1;
                                      } else {
                                        var result233 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"c\"");
                                        }
                                      }
                                      if (result233 !== null) {
                                        var result229 = result233;
                                      } else {
                                        var result229 = null;;
                                      };
                                    }
                                    if (result229 !== null) {
                                      if (input.substr(pos, 1) === "T") {
                                        var result232 = "T";
                                        pos += 1;
                                      } else {
                                        var result232 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"T\"");
                                        }
                                      }
                                      if (result232 !== null) {
                                        var result230 = result232;
                                      } else {
                                        if (input.substr(pos, 1) === "t") {
                                          var result231 = "t";
                                          pos += 1;
                                        } else {
                                          var result231 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"t\"");
                                          }
                                        }
                                        if (result231 !== null) {
                                          var result230 = result231;
                                        } else {
                                          var result230 = null;;
                                        };
                                      }
                                      if (result230 !== null) {
                                        var result222 = [result223, result224, result225, result226, result227, result228, result229, result230];
                                      } else {
                                        var result222 = null;
                                        pos = savedPos9;
                                      }
                                    } else {
                                      var result222 = null;
                                      pos = savedPos9;
                                    }
                                  } else {
                                    var result222 = null;
                                    pos = savedPos9;
                                  }
                                } else {
                                  var result222 = null;
                                  pos = savedPos9;
                                }
                              } else {
                                var result222 = null;
                                pos = savedPos9;
                              }
                            } else {
                              var result222 = null;
                              pos = savedPos9;
                            }
                          } else {
                            var result222 = null;
                            pos = savedPos9;
                          }
                        } else {
                          var result222 = null;
                          pos = savedPos9;
                        }
                        var result211 = result222 !== null ? result222 : '';
                        if (result211 !== null) {
                          var result212 = [];
                          var result221 = parse_WS();
                          while (result221 !== null) {
                            result212.push(result221);
                            var result221 = parse_WS();
                          }
                          if (result212 !== null) {
                            if (input.substr(pos, 1) === "*") {
                              var result220 = "*";
                              pos += 1;
                            } else {
                              var result220 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"*\"");
                              }
                            }
                            if (result220 !== null) {
                              var result213 = result220;
                            } else {
                              var result219 = parse_ConditionalOrExpression();
                              if (result219 !== null) {
                                var result213 = result219;
                              } else {
                                var result213 = null;;
                              };
                            }
                            if (result213 !== null) {
                              var result214 = [];
                              var result218 = parse_WS();
                              while (result218 !== null) {
                                result214.push(result218);
                                var result218 = parse_WS();
                              }
                              if (result214 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result215 = ")";
                                  pos += 1;
                                } else {
                                  var result215 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result215 !== null) {
                                  var result216 = [];
                                  var result217 = parse_WS();
                                  while (result217 !== null) {
                                    result216.push(result217);
                                    var result217 = parse_WS();
                                  }
                                  if (result216 !== null) {
                                    var result202 = [result203, result204, result205, result206, result207, result208, result209, result210, result211, result212, result213, result214, result215, result216];
                                  } else {
                                    var result202 = null;
                                    pos = savedPos8;
                                  }
                                } else {
                                  var result202 = null;
                                  pos = savedPos8;
                                }
                              } else {
                                var result202 = null;
                                pos = savedPos8;
                              }
                            } else {
                              var result202 = null;
                              pos = savedPos8;
                            }
                          } else {
                            var result202 = null;
                            pos = savedPos8;
                          }
                        } else {
                          var result202 = null;
                          pos = savedPos8;
                        }
                      } else {
                        var result202 = null;
                        pos = savedPos8;
                      }
                    } else {
                      var result202 = null;
                      pos = savedPos8;
                    }
                  } else {
                    var result202 = null;
                    pos = savedPos8;
                  }
                } else {
                  var result202 = null;
                  pos = savedPos8;
                }
              } else {
                var result202 = null;
                pos = savedPos8;
              }
            } else {
              var result202 = null;
              pos = savedPos8;
            }
          } else {
            var result202 = null;
            pos = savedPos8;
          }
        } else {
          var result202 = null;
          pos = savedPos8;
        }
        var result201 = result202 !== null
          ? (function(d, e) {
                exp = {};
                exp.token = 'expression';
                exp.expressionType = 'aggregate';
                exp.aggregateType = 'count';
                exp.distinct = (d != "" ? 'DISTINCT' : d);
                exp.expression = e;
          
                return exp;
          
            })(result202[8], result202[10])
          : null;
        if (result201 !== null) {
          var result0 = result201;
        } else {
          var savedPos6 = pos;
          if (input.substr(pos, 1) === "S") {
            var result200 = "S";
            pos += 1;
          } else {
            var result200 = null;
            if (reportMatchFailures) {
              matchFailed("\"S\"");
            }
          }
          if (result200 !== null) {
            var result153 = result200;
          } else {
            if (input.substr(pos, 1) === "s") {
              var result199 = "s";
              pos += 1;
            } else {
              var result199 = null;
              if (reportMatchFailures) {
                matchFailed("\"s\"");
              }
            }
            if (result199 !== null) {
              var result153 = result199;
            } else {
              var result153 = null;;
            };
          }
          if (result153 !== null) {
            if (input.substr(pos, 1) === "U") {
              var result198 = "U";
              pos += 1;
            } else {
              var result198 = null;
              if (reportMatchFailures) {
                matchFailed("\"U\"");
              }
            }
            if (result198 !== null) {
              var result154 = result198;
            } else {
              if (input.substr(pos, 1) === "u") {
                var result197 = "u";
                pos += 1;
              } else {
                var result197 = null;
                if (reportMatchFailures) {
                  matchFailed("\"u\"");
                }
              }
              if (result197 !== null) {
                var result154 = result197;
              } else {
                var result154 = null;;
              };
            }
            if (result154 !== null) {
              if (input.substr(pos, 1) === "M") {
                var result196 = "M";
                pos += 1;
              } else {
                var result196 = null;
                if (reportMatchFailures) {
                  matchFailed("\"M\"");
                }
              }
              if (result196 !== null) {
                var result155 = result196;
              } else {
                if (input.substr(pos, 1) === "m") {
                  var result195 = "m";
                  pos += 1;
                } else {
                  var result195 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"m\"");
                  }
                }
                if (result195 !== null) {
                  var result155 = result195;
                } else {
                  var result155 = null;;
                };
              }
              if (result155 !== null) {
                var result156 = [];
                var result194 = parse_WS();
                while (result194 !== null) {
                  result156.push(result194);
                  var result194 = parse_WS();
                }
                if (result156 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result157 = "(";
                    pos += 1;
                  } else {
                    var result157 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result157 !== null) {
                    var result158 = [];
                    var result193 = parse_WS();
                    while (result193 !== null) {
                      result158.push(result193);
                      var result193 = parse_WS();
                    }
                    if (result158 !== null) {
                      var savedPos7 = pos;
                      if (input.substr(pos, 1) === "D") {
                        var result192 = "D";
                        pos += 1;
                      } else {
                        var result192 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"D\"");
                        }
                      }
                      if (result192 !== null) {
                        var result169 = result192;
                      } else {
                        if (input.substr(pos, 1) === "d") {
                          var result191 = "d";
                          pos += 1;
                        } else {
                          var result191 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"d\"");
                          }
                        }
                        if (result191 !== null) {
                          var result169 = result191;
                        } else {
                          var result169 = null;;
                        };
                      }
                      if (result169 !== null) {
                        if (input.substr(pos, 1) === "I") {
                          var result190 = "I";
                          pos += 1;
                        } else {
                          var result190 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"I\"");
                          }
                        }
                        if (result190 !== null) {
                          var result170 = result190;
                        } else {
                          if (input.substr(pos, 1) === "i") {
                            var result189 = "i";
                            pos += 1;
                          } else {
                            var result189 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"i\"");
                            }
                          }
                          if (result189 !== null) {
                            var result170 = result189;
                          } else {
                            var result170 = null;;
                          };
                        }
                        if (result170 !== null) {
                          if (input.substr(pos, 1) === "S") {
                            var result188 = "S";
                            pos += 1;
                          } else {
                            var result188 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"S\"");
                            }
                          }
                          if (result188 !== null) {
                            var result171 = result188;
                          } else {
                            if (input.substr(pos, 1) === "s") {
                              var result187 = "s";
                              pos += 1;
                            } else {
                              var result187 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"s\"");
                              }
                            }
                            if (result187 !== null) {
                              var result171 = result187;
                            } else {
                              var result171 = null;;
                            };
                          }
                          if (result171 !== null) {
                            if (input.substr(pos, 1) === "T") {
                              var result186 = "T";
                              pos += 1;
                            } else {
                              var result186 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"T\"");
                              }
                            }
                            if (result186 !== null) {
                              var result172 = result186;
                            } else {
                              if (input.substr(pos, 1) === "t") {
                                var result185 = "t";
                                pos += 1;
                              } else {
                                var result185 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"t\"");
                                }
                              }
                              if (result185 !== null) {
                                var result172 = result185;
                              } else {
                                var result172 = null;;
                              };
                            }
                            if (result172 !== null) {
                              if (input.substr(pos, 1) === "I") {
                                var result184 = "I";
                                pos += 1;
                              } else {
                                var result184 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"I\"");
                                }
                              }
                              if (result184 !== null) {
                                var result173 = result184;
                              } else {
                                if (input.substr(pos, 1) === "i") {
                                  var result183 = "i";
                                  pos += 1;
                                } else {
                                  var result183 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"i\"");
                                  }
                                }
                                if (result183 !== null) {
                                  var result173 = result183;
                                } else {
                                  var result173 = null;;
                                };
                              }
                              if (result173 !== null) {
                                if (input.substr(pos, 1) === "N") {
                                  var result182 = "N";
                                  pos += 1;
                                } else {
                                  var result182 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"N\"");
                                  }
                                }
                                if (result182 !== null) {
                                  var result174 = result182;
                                } else {
                                  if (input.substr(pos, 1) === "n") {
                                    var result181 = "n";
                                    pos += 1;
                                  } else {
                                    var result181 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"n\"");
                                    }
                                  }
                                  if (result181 !== null) {
                                    var result174 = result181;
                                  } else {
                                    var result174 = null;;
                                  };
                                }
                                if (result174 !== null) {
                                  if (input.substr(pos, 1) === "C") {
                                    var result180 = "C";
                                    pos += 1;
                                  } else {
                                    var result180 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"C\"");
                                    }
                                  }
                                  if (result180 !== null) {
                                    var result175 = result180;
                                  } else {
                                    if (input.substr(pos, 1) === "c") {
                                      var result179 = "c";
                                      pos += 1;
                                    } else {
                                      var result179 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"c\"");
                                      }
                                    }
                                    if (result179 !== null) {
                                      var result175 = result179;
                                    } else {
                                      var result175 = null;;
                                    };
                                  }
                                  if (result175 !== null) {
                                    if (input.substr(pos, 1) === "T") {
                                      var result178 = "T";
                                      pos += 1;
                                    } else {
                                      var result178 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"T\"");
                                      }
                                    }
                                    if (result178 !== null) {
                                      var result176 = result178;
                                    } else {
                                      if (input.substr(pos, 1) === "t") {
                                        var result177 = "t";
                                        pos += 1;
                                      } else {
                                        var result177 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"t\"");
                                        }
                                      }
                                      if (result177 !== null) {
                                        var result176 = result177;
                                      } else {
                                        var result176 = null;;
                                      };
                                    }
                                    if (result176 !== null) {
                                      var result168 = [result169, result170, result171, result172, result173, result174, result175, result176];
                                    } else {
                                      var result168 = null;
                                      pos = savedPos7;
                                    }
                                  } else {
                                    var result168 = null;
                                    pos = savedPos7;
                                  }
                                } else {
                                  var result168 = null;
                                  pos = savedPos7;
                                }
                              } else {
                                var result168 = null;
                                pos = savedPos7;
                              }
                            } else {
                              var result168 = null;
                              pos = savedPos7;
                            }
                          } else {
                            var result168 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result168 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result168 = null;
                        pos = savedPos7;
                      }
                      var result159 = result168 !== null ? result168 : '';
                      if (result159 !== null) {
                        var result160 = [];
                        var result167 = parse_WS();
                        while (result167 !== null) {
                          result160.push(result167);
                          var result167 = parse_WS();
                        }
                        if (result160 !== null) {
                          var result161 = parse_ConditionalOrExpression();
                          if (result161 !== null) {
                            var result162 = [];
                            var result166 = parse_WS();
                            while (result166 !== null) {
                              result162.push(result166);
                              var result166 = parse_WS();
                            }
                            if (result162 !== null) {
                              if (input.substr(pos, 1) === ")") {
                                var result163 = ")";
                                pos += 1;
                              } else {
                                var result163 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result163 !== null) {
                                var result164 = [];
                                var result165 = parse_WS();
                                while (result165 !== null) {
                                  result164.push(result165);
                                  var result165 = parse_WS();
                                }
                                if (result164 !== null) {
                                  var result152 = [result153, result154, result155, result156, result157, result158, result159, result160, result161, result162, result163, result164];
                                } else {
                                  var result152 = null;
                                  pos = savedPos6;
                                }
                              } else {
                                var result152 = null;
                                pos = savedPos6;
                              }
                            } else {
                              var result152 = null;
                              pos = savedPos6;
                            }
                          } else {
                            var result152 = null;
                            pos = savedPos6;
                          }
                        } else {
                          var result152 = null;
                          pos = savedPos6;
                        }
                      } else {
                        var result152 = null;
                        pos = savedPos6;
                      }
                    } else {
                      var result152 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result152 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result152 = null;
                  pos = savedPos6;
                }
              } else {
                var result152 = null;
                pos = savedPos6;
              }
            } else {
              var result152 = null;
              pos = savedPos6;
            }
          } else {
            var result152 = null;
            pos = savedPos6;
          }
          var result151 = result152 !== null
            ? (function(d, e) {
                  exp = {};
                  exp.token = 'expression';
                  exp.expressionType = 'aggregate';
                  exp.aggregateType = 'sum';
                  exp.distinct = (d != "" ? 'DISTINCT' : d);
                  exp.expression = e;
            
                  return exp;
            
              })(result152[6], result152[8])
            : null;
          if (result151 !== null) {
            var result0 = result151;
          } else {
            var savedPos4 = pos;
            if (input.substr(pos, 1) === "M") {
              var result150 = "M";
              pos += 1;
            } else {
              var result150 = null;
              if (reportMatchFailures) {
                matchFailed("\"M\"");
              }
            }
            if (result150 !== null) {
              var result103 = result150;
            } else {
              if (input.substr(pos, 1) === "m") {
                var result149 = "m";
                pos += 1;
              } else {
                var result149 = null;
                if (reportMatchFailures) {
                  matchFailed("\"m\"");
                }
              }
              if (result149 !== null) {
                var result103 = result149;
              } else {
                var result103 = null;;
              };
            }
            if (result103 !== null) {
              if (input.substr(pos, 1) === "I") {
                var result148 = "I";
                pos += 1;
              } else {
                var result148 = null;
                if (reportMatchFailures) {
                  matchFailed("\"I\"");
                }
              }
              if (result148 !== null) {
                var result104 = result148;
              } else {
                if (input.substr(pos, 1) === "i") {
                  var result147 = "i";
                  pos += 1;
                } else {
                  var result147 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"i\"");
                  }
                }
                if (result147 !== null) {
                  var result104 = result147;
                } else {
                  var result104 = null;;
                };
              }
              if (result104 !== null) {
                if (input.substr(pos, 1) === "N") {
                  var result146 = "N";
                  pos += 1;
                } else {
                  var result146 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"N\"");
                  }
                }
                if (result146 !== null) {
                  var result105 = result146;
                } else {
                  if (input.substr(pos, 1) === "n") {
                    var result145 = "n";
                    pos += 1;
                  } else {
                    var result145 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"n\"");
                    }
                  }
                  if (result145 !== null) {
                    var result105 = result145;
                  } else {
                    var result105 = null;;
                  };
                }
                if (result105 !== null) {
                  var result106 = [];
                  var result144 = parse_WS();
                  while (result144 !== null) {
                    result106.push(result144);
                    var result144 = parse_WS();
                  }
                  if (result106 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result107 = "(";
                      pos += 1;
                    } else {
                      var result107 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result107 !== null) {
                      var result108 = [];
                      var result143 = parse_WS();
                      while (result143 !== null) {
                        result108.push(result143);
                        var result143 = parse_WS();
                      }
                      if (result108 !== null) {
                        var savedPos5 = pos;
                        if (input.substr(pos, 1) === "D") {
                          var result142 = "D";
                          pos += 1;
                        } else {
                          var result142 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"D\"");
                          }
                        }
                        if (result142 !== null) {
                          var result119 = result142;
                        } else {
                          if (input.substr(pos, 1) === "d") {
                            var result141 = "d";
                            pos += 1;
                          } else {
                            var result141 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"d\"");
                            }
                          }
                          if (result141 !== null) {
                            var result119 = result141;
                          } else {
                            var result119 = null;;
                          };
                        }
                        if (result119 !== null) {
                          if (input.substr(pos, 1) === "I") {
                            var result140 = "I";
                            pos += 1;
                          } else {
                            var result140 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"I\"");
                            }
                          }
                          if (result140 !== null) {
                            var result120 = result140;
                          } else {
                            if (input.substr(pos, 1) === "i") {
                              var result139 = "i";
                              pos += 1;
                            } else {
                              var result139 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"i\"");
                              }
                            }
                            if (result139 !== null) {
                              var result120 = result139;
                            } else {
                              var result120 = null;;
                            };
                          }
                          if (result120 !== null) {
                            if (input.substr(pos, 1) === "S") {
                              var result138 = "S";
                              pos += 1;
                            } else {
                              var result138 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"S\"");
                              }
                            }
                            if (result138 !== null) {
                              var result121 = result138;
                            } else {
                              if (input.substr(pos, 1) === "s") {
                                var result137 = "s";
                                pos += 1;
                              } else {
                                var result137 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"s\"");
                                }
                              }
                              if (result137 !== null) {
                                var result121 = result137;
                              } else {
                                var result121 = null;;
                              };
                            }
                            if (result121 !== null) {
                              if (input.substr(pos, 1) === "T") {
                                var result136 = "T";
                                pos += 1;
                              } else {
                                var result136 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"T\"");
                                }
                              }
                              if (result136 !== null) {
                                var result122 = result136;
                              } else {
                                if (input.substr(pos, 1) === "t") {
                                  var result135 = "t";
                                  pos += 1;
                                } else {
                                  var result135 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"t\"");
                                  }
                                }
                                if (result135 !== null) {
                                  var result122 = result135;
                                } else {
                                  var result122 = null;;
                                };
                              }
                              if (result122 !== null) {
                                if (input.substr(pos, 1) === "I") {
                                  var result134 = "I";
                                  pos += 1;
                                } else {
                                  var result134 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"I\"");
                                  }
                                }
                                if (result134 !== null) {
                                  var result123 = result134;
                                } else {
                                  if (input.substr(pos, 1) === "i") {
                                    var result133 = "i";
                                    pos += 1;
                                  } else {
                                    var result133 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"i\"");
                                    }
                                  }
                                  if (result133 !== null) {
                                    var result123 = result133;
                                  } else {
                                    var result123 = null;;
                                  };
                                }
                                if (result123 !== null) {
                                  if (input.substr(pos, 1) === "N") {
                                    var result132 = "N";
                                    pos += 1;
                                  } else {
                                    var result132 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"N\"");
                                    }
                                  }
                                  if (result132 !== null) {
                                    var result124 = result132;
                                  } else {
                                    if (input.substr(pos, 1) === "n") {
                                      var result131 = "n";
                                      pos += 1;
                                    } else {
                                      var result131 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"n\"");
                                      }
                                    }
                                    if (result131 !== null) {
                                      var result124 = result131;
                                    } else {
                                      var result124 = null;;
                                    };
                                  }
                                  if (result124 !== null) {
                                    if (input.substr(pos, 1) === "C") {
                                      var result130 = "C";
                                      pos += 1;
                                    } else {
                                      var result130 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"C\"");
                                      }
                                    }
                                    if (result130 !== null) {
                                      var result125 = result130;
                                    } else {
                                      if (input.substr(pos, 1) === "c") {
                                        var result129 = "c";
                                        pos += 1;
                                      } else {
                                        var result129 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"c\"");
                                        }
                                      }
                                      if (result129 !== null) {
                                        var result125 = result129;
                                      } else {
                                        var result125 = null;;
                                      };
                                    }
                                    if (result125 !== null) {
                                      if (input.substr(pos, 1) === "T") {
                                        var result128 = "T";
                                        pos += 1;
                                      } else {
                                        var result128 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"T\"");
                                        }
                                      }
                                      if (result128 !== null) {
                                        var result126 = result128;
                                      } else {
                                        if (input.substr(pos, 1) === "t") {
                                          var result127 = "t";
                                          pos += 1;
                                        } else {
                                          var result127 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"t\"");
                                          }
                                        }
                                        if (result127 !== null) {
                                          var result126 = result127;
                                        } else {
                                          var result126 = null;;
                                        };
                                      }
                                      if (result126 !== null) {
                                        var result118 = [result119, result120, result121, result122, result123, result124, result125, result126];
                                      } else {
                                        var result118 = null;
                                        pos = savedPos5;
                                      }
                                    } else {
                                      var result118 = null;
                                      pos = savedPos5;
                                    }
                                  } else {
                                    var result118 = null;
                                    pos = savedPos5;
                                  }
                                } else {
                                  var result118 = null;
                                  pos = savedPos5;
                                }
                              } else {
                                var result118 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result118 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result118 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result118 = null;
                          pos = savedPos5;
                        }
                        var result109 = result118 !== null ? result118 : '';
                        if (result109 !== null) {
                          var result110 = [];
                          var result117 = parse_WS();
                          while (result117 !== null) {
                            result110.push(result117);
                            var result117 = parse_WS();
                          }
                          if (result110 !== null) {
                            var result111 = parse_ConditionalOrExpression();
                            if (result111 !== null) {
                              var result112 = [];
                              var result116 = parse_WS();
                              while (result116 !== null) {
                                result112.push(result116);
                                var result116 = parse_WS();
                              }
                              if (result112 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result113 = ")";
                                  pos += 1;
                                } else {
                                  var result113 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                  }
                                }
                                if (result113 !== null) {
                                  var result114 = [];
                                  var result115 = parse_WS();
                                  while (result115 !== null) {
                                    result114.push(result115);
                                    var result115 = parse_WS();
                                  }
                                  if (result114 !== null) {
                                    var result102 = [result103, result104, result105, result106, result107, result108, result109, result110, result111, result112, result113, result114];
                                  } else {
                                    var result102 = null;
                                    pos = savedPos4;
                                  }
                                } else {
                                  var result102 = null;
                                  pos = savedPos4;
                                }
                              } else {
                                var result102 = null;
                                pos = savedPos4;
                              }
                            } else {
                              var result102 = null;
                              pos = savedPos4;
                            }
                          } else {
                            var result102 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result102 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result102 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result102 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result102 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result102 = null;
                  pos = savedPos4;
                }
              } else {
                var result102 = null;
                pos = savedPos4;
              }
            } else {
              var result102 = null;
              pos = savedPos4;
            }
            var result101 = result102 !== null
              ? (function(d, e) {
                    exp = {};
                    exp.token = 'expression';
                    exp.expressionType = 'aggregate';
                    exp.aggregateType = 'min';
                    exp.distinct = (d != "" ? 'DISTINCT' : d);
                    exp.expression = e;
              
                    return exp;
              
                })(result102[6], result102[8])
              : null;
            if (result101 !== null) {
              var result0 = result101;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 1) === "M") {
                var result100 = "M";
                pos += 1;
              } else {
                var result100 = null;
                if (reportMatchFailures) {
                  matchFailed("\"M\"");
                }
              }
              if (result100 !== null) {
                var result53 = result100;
              } else {
                if (input.substr(pos, 1) === "m") {
                  var result99 = "m";
                  pos += 1;
                } else {
                  var result99 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"m\"");
                  }
                }
                if (result99 !== null) {
                  var result53 = result99;
                } else {
                  var result53 = null;;
                };
              }
              if (result53 !== null) {
                if (input.substr(pos, 1) === "A") {
                  var result98 = "A";
                  pos += 1;
                } else {
                  var result98 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"A\"");
                  }
                }
                if (result98 !== null) {
                  var result54 = result98;
                } else {
                  if (input.substr(pos, 1) === "a") {
                    var result97 = "a";
                    pos += 1;
                  } else {
                    var result97 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"a\"");
                    }
                  }
                  if (result97 !== null) {
                    var result54 = result97;
                  } else {
                    var result54 = null;;
                  };
                }
                if (result54 !== null) {
                  if (input.substr(pos, 1) === "X") {
                    var result96 = "X";
                    pos += 1;
                  } else {
                    var result96 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"X\"");
                    }
                  }
                  if (result96 !== null) {
                    var result55 = result96;
                  } else {
                    if (input.substr(pos, 1) === "x") {
                      var result95 = "x";
                      pos += 1;
                    } else {
                      var result95 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"x\"");
                      }
                    }
                    if (result95 !== null) {
                      var result55 = result95;
                    } else {
                      var result55 = null;;
                    };
                  }
                  if (result55 !== null) {
                    var result56 = [];
                    var result94 = parse_WS();
                    while (result94 !== null) {
                      result56.push(result94);
                      var result94 = parse_WS();
                    }
                    if (result56 !== null) {
                      if (input.substr(pos, 1) === "(") {
                        var result57 = "(";
                        pos += 1;
                      } else {
                        var result57 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result57 !== null) {
                        var result58 = [];
                        var result93 = parse_WS();
                        while (result93 !== null) {
                          result58.push(result93);
                          var result93 = parse_WS();
                        }
                        if (result58 !== null) {
                          var savedPos3 = pos;
                          if (input.substr(pos, 1) === "D") {
                            var result92 = "D";
                            pos += 1;
                          } else {
                            var result92 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"D\"");
                            }
                          }
                          if (result92 !== null) {
                            var result69 = result92;
                          } else {
                            if (input.substr(pos, 1) === "d") {
                              var result91 = "d";
                              pos += 1;
                            } else {
                              var result91 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"d\"");
                              }
                            }
                            if (result91 !== null) {
                              var result69 = result91;
                            } else {
                              var result69 = null;;
                            };
                          }
                          if (result69 !== null) {
                            if (input.substr(pos, 1) === "I") {
                              var result90 = "I";
                              pos += 1;
                            } else {
                              var result90 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"I\"");
                              }
                            }
                            if (result90 !== null) {
                              var result70 = result90;
                            } else {
                              if (input.substr(pos, 1) === "i") {
                                var result89 = "i";
                                pos += 1;
                              } else {
                                var result89 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"i\"");
                                }
                              }
                              if (result89 !== null) {
                                var result70 = result89;
                              } else {
                                var result70 = null;;
                              };
                            }
                            if (result70 !== null) {
                              if (input.substr(pos, 1) === "S") {
                                var result88 = "S";
                                pos += 1;
                              } else {
                                var result88 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"S\"");
                                }
                              }
                              if (result88 !== null) {
                                var result71 = result88;
                              } else {
                                if (input.substr(pos, 1) === "s") {
                                  var result87 = "s";
                                  pos += 1;
                                } else {
                                  var result87 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"s\"");
                                  }
                                }
                                if (result87 !== null) {
                                  var result71 = result87;
                                } else {
                                  var result71 = null;;
                                };
                              }
                              if (result71 !== null) {
                                if (input.substr(pos, 1) === "T") {
                                  var result86 = "T";
                                  pos += 1;
                                } else {
                                  var result86 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"T\"");
                                  }
                                }
                                if (result86 !== null) {
                                  var result72 = result86;
                                } else {
                                  if (input.substr(pos, 1) === "t") {
                                    var result85 = "t";
                                    pos += 1;
                                  } else {
                                    var result85 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"t\"");
                                    }
                                  }
                                  if (result85 !== null) {
                                    var result72 = result85;
                                  } else {
                                    var result72 = null;;
                                  };
                                }
                                if (result72 !== null) {
                                  if (input.substr(pos, 1) === "I") {
                                    var result84 = "I";
                                    pos += 1;
                                  } else {
                                    var result84 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"I\"");
                                    }
                                  }
                                  if (result84 !== null) {
                                    var result73 = result84;
                                  } else {
                                    if (input.substr(pos, 1) === "i") {
                                      var result83 = "i";
                                      pos += 1;
                                    } else {
                                      var result83 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"i\"");
                                      }
                                    }
                                    if (result83 !== null) {
                                      var result73 = result83;
                                    } else {
                                      var result73 = null;;
                                    };
                                  }
                                  if (result73 !== null) {
                                    if (input.substr(pos, 1) === "N") {
                                      var result82 = "N";
                                      pos += 1;
                                    } else {
                                      var result82 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"N\"");
                                      }
                                    }
                                    if (result82 !== null) {
                                      var result74 = result82;
                                    } else {
                                      if (input.substr(pos, 1) === "n") {
                                        var result81 = "n";
                                        pos += 1;
                                      } else {
                                        var result81 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"n\"");
                                        }
                                      }
                                      if (result81 !== null) {
                                        var result74 = result81;
                                      } else {
                                        var result74 = null;;
                                      };
                                    }
                                    if (result74 !== null) {
                                      if (input.substr(pos, 1) === "C") {
                                        var result80 = "C";
                                        pos += 1;
                                      } else {
                                        var result80 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"C\"");
                                        }
                                      }
                                      if (result80 !== null) {
                                        var result75 = result80;
                                      } else {
                                        if (input.substr(pos, 1) === "c") {
                                          var result79 = "c";
                                          pos += 1;
                                        } else {
                                          var result79 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"c\"");
                                          }
                                        }
                                        if (result79 !== null) {
                                          var result75 = result79;
                                        } else {
                                          var result75 = null;;
                                        };
                                      }
                                      if (result75 !== null) {
                                        if (input.substr(pos, 1) === "T") {
                                          var result78 = "T";
                                          pos += 1;
                                        } else {
                                          var result78 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"T\"");
                                          }
                                        }
                                        if (result78 !== null) {
                                          var result76 = result78;
                                        } else {
                                          if (input.substr(pos, 1) === "t") {
                                            var result77 = "t";
                                            pos += 1;
                                          } else {
                                            var result77 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"t\"");
                                            }
                                          }
                                          if (result77 !== null) {
                                            var result76 = result77;
                                          } else {
                                            var result76 = null;;
                                          };
                                        }
                                        if (result76 !== null) {
                                          var result68 = [result69, result70, result71, result72, result73, result74, result75, result76];
                                        } else {
                                          var result68 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result68 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result68 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result68 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result68 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result68 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result68 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result68 = null;
                            pos = savedPos3;
                          }
                          var result59 = result68 !== null ? result68 : '';
                          if (result59 !== null) {
                            var result60 = [];
                            var result67 = parse_WS();
                            while (result67 !== null) {
                              result60.push(result67);
                              var result67 = parse_WS();
                            }
                            if (result60 !== null) {
                              var result61 = parse_ConditionalOrExpression();
                              if (result61 !== null) {
                                var result62 = [];
                                var result66 = parse_WS();
                                while (result66 !== null) {
                                  result62.push(result66);
                                  var result66 = parse_WS();
                                }
                                if (result62 !== null) {
                                  if (input.substr(pos, 1) === ")") {
                                    var result63 = ")";
                                    pos += 1;
                                  } else {
                                    var result63 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\")\"");
                                    }
                                  }
                                  if (result63 !== null) {
                                    var result64 = [];
                                    var result65 = parse_WS();
                                    while (result65 !== null) {
                                      result64.push(result65);
                                      var result65 = parse_WS();
                                    }
                                    if (result64 !== null) {
                                      var result52 = [result53, result54, result55, result56, result57, result58, result59, result60, result61, result62, result63, result64];
                                    } else {
                                      var result52 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result52 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result52 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result52 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result52 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result52 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result52 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result52 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result52 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result52 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result52 = null;
                  pos = savedPos2;
                }
              } else {
                var result52 = null;
                pos = savedPos2;
              }
              var result51 = result52 !== null
                ? (function(d, e) {
                      exp = {};
                      exp.token = 'expression'
                      exp.expressionType = 'aggregate'
                      exp.aggregateType = 'max'
                      exp.distinct = (d != "" ? 'DISTINCT' : d);
                      exp.expression = e
                
                      return exp
                
                  })(result52[6], result52[8])
                : null;
              if (result51 !== null) {
                var result0 = result51;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 1) === "A") {
                  var result50 = "A";
                  pos += 1;
                } else {
                  var result50 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"A\"");
                  }
                }
                if (result50 !== null) {
                  var result3 = result50;
                } else {
                  if (input.substr(pos, 1) === "a") {
                    var result49 = "a";
                    pos += 1;
                  } else {
                    var result49 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"a\"");
                    }
                  }
                  if (result49 !== null) {
                    var result3 = result49;
                  } else {
                    var result3 = null;;
                  };
                }
                if (result3 !== null) {
                  if (input.substr(pos, 1) === "V") {
                    var result48 = "V";
                    pos += 1;
                  } else {
                    var result48 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"V\"");
                    }
                  }
                  if (result48 !== null) {
                    var result4 = result48;
                  } else {
                    if (input.substr(pos, 1) === "v") {
                      var result47 = "v";
                      pos += 1;
                    } else {
                      var result47 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"v\"");
                      }
                    }
                    if (result47 !== null) {
                      var result4 = result47;
                    } else {
                      var result4 = null;;
                    };
                  }
                  if (result4 !== null) {
                    if (input.substr(pos, 1) === "G") {
                      var result46 = "G";
                      pos += 1;
                    } else {
                      var result46 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"G\"");
                      }
                    }
                    if (result46 !== null) {
                      var result5 = result46;
                    } else {
                      if (input.substr(pos, 1) === "g") {
                        var result45 = "g";
                        pos += 1;
                      } else {
                        var result45 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"g\"");
                        }
                      }
                      if (result45 !== null) {
                        var result5 = result45;
                      } else {
                        var result5 = null;;
                      };
                    }
                    if (result5 !== null) {
                      var result6 = [];
                      var result44 = parse_WS();
                      while (result44 !== null) {
                        result6.push(result44);
                        var result44 = parse_WS();
                      }
                      if (result6 !== null) {
                        if (input.substr(pos, 1) === "(") {
                          var result7 = "(";
                          pos += 1;
                        } else {
                          var result7 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"(\"");
                          }
                        }
                        if (result7 !== null) {
                          var result8 = [];
                          var result43 = parse_WS();
                          while (result43 !== null) {
                            result8.push(result43);
                            var result43 = parse_WS();
                          }
                          if (result8 !== null) {
                            var savedPos1 = pos;
                            if (input.substr(pos, 1) === "D") {
                              var result42 = "D";
                              pos += 1;
                            } else {
                              var result42 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"D\"");
                              }
                            }
                            if (result42 !== null) {
                              var result19 = result42;
                            } else {
                              if (input.substr(pos, 1) === "d") {
                                var result41 = "d";
                                pos += 1;
                              } else {
                                var result41 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"d\"");
                                }
                              }
                              if (result41 !== null) {
                                var result19 = result41;
                              } else {
                                var result19 = null;;
                              };
                            }
                            if (result19 !== null) {
                              if (input.substr(pos, 1) === "I") {
                                var result40 = "I";
                                pos += 1;
                              } else {
                                var result40 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"I\"");
                                }
                              }
                              if (result40 !== null) {
                                var result20 = result40;
                              } else {
                                if (input.substr(pos, 1) === "i") {
                                  var result39 = "i";
                                  pos += 1;
                                } else {
                                  var result39 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"i\"");
                                  }
                                }
                                if (result39 !== null) {
                                  var result20 = result39;
                                } else {
                                  var result20 = null;;
                                };
                              }
                              if (result20 !== null) {
                                if (input.substr(pos, 1) === "S") {
                                  var result38 = "S";
                                  pos += 1;
                                } else {
                                  var result38 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"S\"");
                                  }
                                }
                                if (result38 !== null) {
                                  var result21 = result38;
                                } else {
                                  if (input.substr(pos, 1) === "s") {
                                    var result37 = "s";
                                    pos += 1;
                                  } else {
                                    var result37 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"s\"");
                                    }
                                  }
                                  if (result37 !== null) {
                                    var result21 = result37;
                                  } else {
                                    var result21 = null;;
                                  };
                                }
                                if (result21 !== null) {
                                  if (input.substr(pos, 1) === "T") {
                                    var result36 = "T";
                                    pos += 1;
                                  } else {
                                    var result36 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"T\"");
                                    }
                                  }
                                  if (result36 !== null) {
                                    var result22 = result36;
                                  } else {
                                    if (input.substr(pos, 1) === "t") {
                                      var result35 = "t";
                                      pos += 1;
                                    } else {
                                      var result35 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"t\"");
                                      }
                                    }
                                    if (result35 !== null) {
                                      var result22 = result35;
                                    } else {
                                      var result22 = null;;
                                    };
                                  }
                                  if (result22 !== null) {
                                    if (input.substr(pos, 1) === "I") {
                                      var result34 = "I";
                                      pos += 1;
                                    } else {
                                      var result34 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"I\"");
                                      }
                                    }
                                    if (result34 !== null) {
                                      var result23 = result34;
                                    } else {
                                      if (input.substr(pos, 1) === "i") {
                                        var result33 = "i";
                                        pos += 1;
                                      } else {
                                        var result33 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"i\"");
                                        }
                                      }
                                      if (result33 !== null) {
                                        var result23 = result33;
                                      } else {
                                        var result23 = null;;
                                      };
                                    }
                                    if (result23 !== null) {
                                      if (input.substr(pos, 1) === "N") {
                                        var result32 = "N";
                                        pos += 1;
                                      } else {
                                        var result32 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"N\"");
                                        }
                                      }
                                      if (result32 !== null) {
                                        var result24 = result32;
                                      } else {
                                        if (input.substr(pos, 1) === "n") {
                                          var result31 = "n";
                                          pos += 1;
                                        } else {
                                          var result31 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"n\"");
                                          }
                                        }
                                        if (result31 !== null) {
                                          var result24 = result31;
                                        } else {
                                          var result24 = null;;
                                        };
                                      }
                                      if (result24 !== null) {
                                        if (input.substr(pos, 1) === "C") {
                                          var result30 = "C";
                                          pos += 1;
                                        } else {
                                          var result30 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"C\"");
                                          }
                                        }
                                        if (result30 !== null) {
                                          var result25 = result30;
                                        } else {
                                          if (input.substr(pos, 1) === "c") {
                                            var result29 = "c";
                                            pos += 1;
                                          } else {
                                            var result29 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"c\"");
                                            }
                                          }
                                          if (result29 !== null) {
                                            var result25 = result29;
                                          } else {
                                            var result25 = null;;
                                          };
                                        }
                                        if (result25 !== null) {
                                          if (input.substr(pos, 1) === "T") {
                                            var result28 = "T";
                                            pos += 1;
                                          } else {
                                            var result28 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"T\"");
                                            }
                                          }
                                          if (result28 !== null) {
                                            var result26 = result28;
                                          } else {
                                            if (input.substr(pos, 1) === "t") {
                                              var result27 = "t";
                                              pos += 1;
                                            } else {
                                              var result27 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"t\"");
                                              }
                                            }
                                            if (result27 !== null) {
                                              var result26 = result27;
                                            } else {
                                              var result26 = null;;
                                            };
                                          }
                                          if (result26 !== null) {
                                            var result18 = [result19, result20, result21, result22, result23, result24, result25, result26];
                                          } else {
                                            var result18 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result18 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result18 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result18 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result18 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result18 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result18 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result18 = null;
                              pos = savedPos1;
                            }
                            var result9 = result18 !== null ? result18 : '';
                            if (result9 !== null) {
                              var result10 = [];
                              var result17 = parse_WS();
                              while (result17 !== null) {
                                result10.push(result17);
                                var result17 = parse_WS();
                              }
                              if (result10 !== null) {
                                var result11 = parse_ConditionalOrExpression();
                                if (result11 !== null) {
                                  var result12 = [];
                                  var result16 = parse_WS();
                                  while (result16 !== null) {
                                    result12.push(result16);
                                    var result16 = parse_WS();
                                  }
                                  if (result12 !== null) {
                                    if (input.substr(pos, 1) === ")") {
                                      var result13 = ")";
                                      pos += 1;
                                    } else {
                                      var result13 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (result13 !== null) {
                                      var result14 = [];
                                      var result15 = parse_WS();
                                      while (result15 !== null) {
                                        result14.push(result15);
                                        var result15 = parse_WS();
                                      }
                                      if (result14 !== null) {
                                        var result2 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                                      } else {
                                        var result2 = null;
                                        pos = savedPos0;
                                      }
                                    } else {
                                      var result2 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result2 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
                var result1 = result2 !== null
                  ? (function(d, e) {
                        exp = {};
                        exp.token = 'expression'
                        exp.expressionType = 'aggregate'
                        exp.aggregateType = 'avg'
                        exp.distinct = (d != "" ? 'DISTINCT' : d);
                        exp.expression = e
                  
                        return exp
                  
                    })(result2[6], result2[8])
                  : null;
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[110] Aggregate");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRIrefOrFunction() {
        var cacheKey = 'IRIrefOrFunction@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_IRIref();
        if (result2 !== null) {
          var result4 = parse_ArgList();
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(i, args) {
                var fcall = {};
                fcall.token = "expression";
                fcall.expressionType = 'irireforfunction';
                fcall.iriref = i;
                fcall.args = args.value;
          
                return fcall;
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[117] IRIrefOrFunction");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RDFLiteral() {
        var cacheKey = 'RDFLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_String();
        if (result2 !== null) {
          var result8 = parse_LANGTAG();
          if (result8 !== null) {
            var result4 = result8;
          } else {
            var savedPos1 = pos;
            if (input.substr(pos, 2) === "^^") {
              var result6 = "^^";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"^^\"");
              }
            }
            if (result6 !== null) {
              var result7 = parse_IRIref();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(s, e) {
                if(typeof(e) === "string" && e.length > 0) {
                    return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                } else {
                    if(typeof(e) === "object") {
                        e.shift(); // remove the '^^' char
                        return {token:'literal', value:s.value, lang:null, type:e[0] }
                    } else {
                        return { token:'literal', value:s.value, lang:null, type:null }
                    }
                }
          })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[112] RDFLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteral() {
        var cacheKey = 'NumericLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_NumericLiteralUnsigned();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NumericLiteralPositive();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_NumericLiteralNegative();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[113] NumericLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralUnsigned() {
        var cacheKey = 'NumericLiteralUnsigned@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[114] NumericLiteralUnsigned");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralPositive() {
        var cacheKey = 'NumericLiteralPositive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_POSITIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_POSITIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_POSITIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[115] NumericLiteralPositive");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteralNegative() {
        var cacheKey = 'NumericLiteralNegative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_DOUBLE_NEGATIVE();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_DECIMAL_NEGATIVE();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_INTEGER_NEGATIVE();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[116] NumericLiteralNegative");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanLiteral() {
        var cacheKey = 'BooleanLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "T") {
          var result31 = "T";
          pos += 1;
        } else {
          var result31 = null;
          if (reportMatchFailures) {
            matchFailed("\"T\"");
          }
        }
        if (result31 !== null) {
          var result20 = result31;
        } else {
          if (input.substr(pos, 1) === "t") {
            var result30 = "t";
            pos += 1;
          } else {
            var result30 = null;
            if (reportMatchFailures) {
              matchFailed("\"t\"");
            }
          }
          if (result30 !== null) {
            var result20 = result30;
          } else {
            var result20 = null;;
          };
        }
        if (result20 !== null) {
          if (input.substr(pos, 1) === "R") {
            var result29 = "R";
            pos += 1;
          } else {
            var result29 = null;
            if (reportMatchFailures) {
              matchFailed("\"R\"");
            }
          }
          if (result29 !== null) {
            var result21 = result29;
          } else {
            if (input.substr(pos, 1) === "r") {
              var result28 = "r";
              pos += 1;
            } else {
              var result28 = null;
              if (reportMatchFailures) {
                matchFailed("\"r\"");
              }
            }
            if (result28 !== null) {
              var result21 = result28;
            } else {
              var result21 = null;;
            };
          }
          if (result21 !== null) {
            if (input.substr(pos, 1) === "U") {
              var result27 = "U";
              pos += 1;
            } else {
              var result27 = null;
              if (reportMatchFailures) {
                matchFailed("\"U\"");
              }
            }
            if (result27 !== null) {
              var result22 = result27;
            } else {
              if (input.substr(pos, 1) === "u") {
                var result26 = "u";
                pos += 1;
              } else {
                var result26 = null;
                if (reportMatchFailures) {
                  matchFailed("\"u\"");
                }
              }
              if (result26 !== null) {
                var result22 = result26;
              } else {
                var result22 = null;;
              };
            }
            if (result22 !== null) {
              if (input.substr(pos, 1) === "E") {
                var result25 = "E";
                pos += 1;
              } else {
                var result25 = null;
                if (reportMatchFailures) {
                  matchFailed("\"E\"");
                }
              }
              if (result25 !== null) {
                var result23 = result25;
              } else {
                if (input.substr(pos, 1) === "e") {
                  var result24 = "e";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"e\"");
                  }
                }
                if (result24 !== null) {
                  var result23 = result24;
                } else {
                  var result23 = null;;
                };
              }
              if (result23 !== null) {
                var result19 = [result20, result21, result22, result23];
              } else {
                var result19 = null;
                pos = savedPos1;
              }
            } else {
              var result19 = null;
              pos = savedPos1;
            }
          } else {
            var result19 = null;
            pos = savedPos1;
          }
        } else {
          var result19 = null;
          pos = savedPos1;
        }
        var result18 = result19 !== null
          ? (function() {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                lit.value = true;
                return lit;
           })()
          : null;
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "F") {
            var result17 = "F";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"F\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            if (input.substr(pos, 1) === "f") {
              var result16 = "f";
              pos += 1;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"f\"");
              }
            }
            if (result16 !== null) {
              var result3 = result16;
            } else {
              var result3 = null;;
            };
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "A") {
              var result15 = "A";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"A\"");
              }
            }
            if (result15 !== null) {
              var result4 = result15;
            } else {
              if (input.substr(pos, 1) === "a") {
                var result14 = "a";
                pos += 1;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"a\"");
                }
              }
              if (result14 !== null) {
                var result4 = result14;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "L") {
                var result13 = "L";
                pos += 1;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("\"L\"");
                }
              }
              if (result13 !== null) {
                var result5 = result13;
              } else {
                if (input.substr(pos, 1) === "l") {
                  var result12 = "l";
                  pos += 1;
                } else {
                  var result12 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"l\"");
                  }
                }
                if (result12 !== null) {
                  var result5 = result12;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                if (input.substr(pos, 1) === "S") {
                  var result11 = "S";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"S\"");
                  }
                }
                if (result11 !== null) {
                  var result6 = result11;
                } else {
                  if (input.substr(pos, 1) === "s") {
                    var result10 = "s";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"s\"");
                    }
                  }
                  if (result10 !== null) {
                    var result6 = result10;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  if (input.substr(pos, 1) === "E") {
                    var result9 = "E";
                    pos += 1;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"E\"");
                    }
                  }
                  if (result9 !== null) {
                    var result7 = result9;
                  } else {
                    if (input.substr(pos, 1) === "e") {
                      var result8 = "e";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"e\"");
                      }
                    }
                    if (result8 !== null) {
                      var result7 = result8;
                    } else {
                      var result7 = null;;
                    };
                  }
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function() {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                  lit.value = false;
                  return lit;
            })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[117] BooleanLiteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_String() {
        var cacheKey = 'String@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_STRING_LITERAL_LONG1();
        var result7 = result8 !== null
          ? (function(s) { return {token:'string', value:s} })(result8)
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_STRING_LITERAL_LONG2();
          var result5 = result6 !== null
            ? (function(s) { return {token:'string', value:s} })(result6)
            : null;
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_STRING_LITERAL1();
            var result3 = result4 !== null
              ? (function(s) { return {token:'string', value:s} })(result4)
              : null;
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_STRING_LITERAL2();
              var result1 = result2 !== null
                ? (function(s) { return {token:'string', value:s} })(result2)
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[118] String");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRIref() {
        var cacheKey = 'IRIref@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_IRI_REF();
        var result3 = result4 !== null
          ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PrefixedName();
          var result1 = result2 !== null
            ? (function(p) { return p })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[119] IRIref");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixedName() {
        var cacheKey = 'PrefixedName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_PNAME_LN();
        var result3 = result4 !== null
          ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_PNAME_NS();
          var result1 = result2 !== null
            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[120] PrefixedName");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BlankNode() {
        var cacheKey = 'BlankNode@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_BLANK_NODE_LABEL();
        var result3 = result4 !== null
          ? (function(l) { return {token:'blank', label:l}})(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_ANON();
          var result1 = result2 !== null
            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', label:''+GlobalBlankNodeCounter} })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[121] BlankNode");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IRI_REF() {
        var cacheKey = 'IRI_REF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "<") {
          var result2 = "<";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^<>"{} | ^\\]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[^<>\"{} | ^\\\\]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^<>"{} | ^\\]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[^<>\"{} | ^\\\\]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ">") {
              var result4 = ">";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[122] IRI_REF");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_NS() {
        var cacheKey = 'PNAME_NS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result4 = parse_PN_PREFIX();
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result3 = ":";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p) { return p })(result1[0])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[123] PNAME_NS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PNAME_LN() {
        var cacheKey = 'PNAME_LN@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PNAME_NS();
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(p, s) { return [p, s] })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[124] PNAME_LN");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BLANK_NODE_LABEL() {
        var cacheKey = 'BLANK_NODE_LABEL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "_:") {
          var result2 = "_:";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"_:\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_PN_LOCAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(l) { return l })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[125] BLANK_NODE_LABEL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR1() {
        var cacheKey = 'VAR1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "?") {
          var result2 = "?";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"?\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[126] VAR1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR2() {
        var cacheKey = 'VAR2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "$") {
          var result2 = "$";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"$\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_VARNAME();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(v) { return v })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[127] VAR2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LANGTAG() {
        var cacheKey = 'LANGTAG@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "@") {
          var result2 = "@";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"@\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result9 = input.charAt(pos);
            pos++;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result9 !== null) {
            var result3 = [];
            while (result9 !== null) {
              result3.push(result9);
              if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "-") {
              var result6 = "-";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result6 !== null) {
              if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[a-zA-Z0-9]");
                }
              }
              if (result8 !== null) {
                var result7 = [];
                while (result8 !== null) {
                  result7.push(result8);
                  if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                    var result8 = input.charAt(pos);
                    pos++;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("[a-zA-Z0-9]");
                    }
                  }
                }
              } else {
                var result7 = null;
              }
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result6 !== null) {
                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                  var result8 = input.charAt(pos);
                  pos++;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("[a-zA-Z0-9]");
                  }
                }
                if (result8 !== null) {
                  var result7 = [];
                  while (result8 !== null) {
                    result7.push(result8);
                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[a-zA-Z0-9]");
                      }
                    }
                  }
                } else {
                  var result7 = null;
                }
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b) {
          
                if(b.length===0) {
                    return ("@"+a.join('')).toLowerCase();
                } else {
                    return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
                }
          })(result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[128] LANGTAG");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER() {
        var cacheKey = 'INTEGER@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(d) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                lit.value = flattenString(d);
                return lit;
          })(result1)
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[129] INTEGER");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL() {
        var cacheKey = 'DECIMAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result12 = input.charAt(pos);
          pos++;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result12 !== null) {
          var result8 = [];
          while (result12 !== null) {
            result8.push(result12);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result8 = null;
        }
        if (result8 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result9 = ".";
            pos += 1;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result9 !== null) {
            var result10 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result11 !== null) {
              result10.push(result11);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result10 !== null) {
              var result7 = [result8, result9, result10];
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
        } else {
          var result7 = null;
          pos = savedPos1;
        }
        var result6 = result7 !== null
          ? (function(a, b, c) {
          
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                lit.value = flattenString([a,b,c]);
                return lit;
          })(result7[0], result7[1], result7[2])
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ".") {
            var result3 = ".";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(a, b) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                  lit.value = flattenString([a,b]);
                  return lit;
             })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[130] DECIMAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE() {
        var cacheKey = 'DOUBLE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result19 = input.charAt(pos);
          pos++;
        } else {
          var result19 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result19 !== null) {
          var result14 = [];
          while (result19 !== null) {
            result14.push(result19);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result19 = input.charAt(pos);
              pos++;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        if (result14 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result15 = ".";
            pos += 1;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result15 !== null) {
            var result16 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result18 !== null) {
              result16.push(result18);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result18 = input.charAt(pos);
                pos++;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result16 !== null) {
              var result17 = parse_EXPONENT();
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        var result12 = result13 !== null
          ? (function(a, b, c, e) {
                lit = {};
                lit.token = "literal";
                lit.lang = null;
                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                lit.value = flattenString([a,b,c,e]);
                return lit;
          })(result13[0], result13[1], result13[2], result13[3])
          : null;
        if (result12 !== null) {
          var result0 = result12;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === ".") {
            var result8 = ".";
            pos += 1;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result11 !== null) {
              var result9 = [];
              while (result11 !== null) {
                result9.push(result11);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result10 = parse_EXPONENT();
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a, b, c) {
                  lit = {};
                  lit.token = "literal";
                  lit.lang = null;
                  lit.type = "http://www.w3.org/2001/XMLSchema#double";
                  lit.value = flattenString([a,b,c]);
                  return lit;
            })(result7[0], result7[1], result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result3 = [];
              while (result5 !== null) {
                result3.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result4 = parse_EXPONENT();
              if (result4 !== null) {
                var result2 = [result3, result4];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(a, b) {
                    lit = {};
                    lit.token = "literal";
                    lit.lang = null;
                    lit.type = "http://www.w3.org/2001/XMLSchema#double";
                    lit.value = flattenString([a,b]);
                    return lit;
              })(result2[0], result2[1])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[131] DOUBLE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_POSITIVE() {
        var cacheKey = 'INTEGER_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[132] INTEGER_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_POSITIVE() {
        var cacheKey = 'DECIMAL_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[133] DECIMAL_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_POSITIVE() {
        var cacheKey = 'DOUBLE_POSITIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "+") {
          var result2 = "+";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[134] DOUBLE_POSITIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_INTEGER_NEGATIVE() {
        var cacheKey = 'INTEGER_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_INTEGER();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[135] INTEGER_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DECIMAL_NEGATIVE() {
        var cacheKey = 'DECIMAL_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DECIMAL();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[136] DECIMAL_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DOUBLE_NEGATIVE() {
        var cacheKey = 'DOUBLE_NEGATIVE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "-") {
          var result2 = "-";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"-\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_DOUBLE();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[137] DOUBLE_NEGATIVE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EXPONENT() {
        var cacheKey = 'EXPONENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result3 = result6 !== null ? result6 : '';
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[138] EXPONENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL1() {
        var cacheKey = 'STRING_LITERAL1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "'") {
          var result2 = "'";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "'") {
              var result4 = "'";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"'\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[139] STRING_LITERAL1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL2() {
        var cacheKey = 'STRING_LITERAL2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result2 = "\"";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\\\n\\r]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\\\n\\r]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result4 = "\"";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[140] STRING_LITERAL2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG1() {
        var cacheKey = 'STRING_LITERAL_LONG1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "'''") {
          var result2 = "'''";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"'''\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^'\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^'\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^'\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^'\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "'''") {
              var result4 = "'''";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"'''\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[141] STRING_LITERAL_LONG1");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_STRING_LITERAL_LONG2() {
        var cacheKey = 'STRING_LITERAL_LONG2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "\"\"\"") {
          var result2 = "\"\"\"";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\\\"\\\"\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^"\\]/) !== null) {
            var result7 = input.charAt(pos);
            pos++;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"\\\\]");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result6 = parse_ECHAR();
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^"\\]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"\\\\]");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_ECHAR();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "\"\"\"") {
              var result4 = "\"\"\"";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\\\"\\\"\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(content) { return flattenString(content) })(result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[142] STRING_LITERAL_LONG2");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ECHAR() {
        var cacheKey = 'ECHAR@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result1 = "\\";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result1 !== null) {
          if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("[tbnrf\"']");
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[143] ECHAR");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NIL() {
        var cacheKey = 'NIL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          var result5 = parse_WS();
          while (result5 !== null) {
            result3.push(result5);
            var result5 = parse_WS();
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result4 = ")";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
          
                return  {token: "triplesnodecollection", 
                         triplesContext:[], 
                         chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
          })()
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[144] NIL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WS() {
        var cacheKey = 'WS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ ]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[ ]");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos).match(/^[	]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[	]");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos).match(/^[\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[\\r]");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos).match(/^[\n]/) !== null) {
                var result2 = input.charAt(pos);
                pos++;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\n]");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_COMMENT();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[145] WS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMENT() {
        var cacheKey = 'COMMENT@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result1 = "#";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result3 !== null) {
            result2.push(result3);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed(" COMMENT");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ANON() {
        var cacheKey = 'ANON@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var result4 = parse_WS();
          while (result4 !== null) {
            result2.push(result4);
            var result4 = parse_WS();
          }
          if (result2 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result3 = "]";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[146] ANON");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_BASE() {
        var cacheKey = 'PN_CHARS_BASE@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          var result14 = input.charAt(pos);
          pos++;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Z]");
          }
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          if (input.substr(pos).match(/^[a-z]/) !== null) {
            var result13 = input.charAt(pos);
            pos++;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("[a-z]");
            }
          }
          if (result13 !== null) {
            var result0 = result13;
          } else {
            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result12 !== null) {
              var result0 = result12;
            } else {
              if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                var result11 = input.charAt(pos);
                pos++;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result11 !== null) {
                var result0 = result11;
              } else {
                if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xF8-\\u02FF]");
                  }
                }
                if (result10 !== null) {
                  var result0 = result10;
                } else {
                  if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0370-\\u037D]");
                    }
                  }
                  if (result9 !== null) {
                    var result0 = result9;
                  } else {
                    if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                      var result8 = input.charAt(pos);
                      pos++;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u037F-\\u1FFF]");
                      }
                    }
                    if (result8 !== null) {
                      var result0 = result8;
                    } else {
                      if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                        var result7 = input.charAt(pos);
                        pos++;
                      } else {
                        var result7 = null;
                        if (reportMatchFailures) {
                          matchFailed("[\\u200C-\\u200D]");
                        }
                      }
                      if (result7 !== null) {
                        var result0 = result7;
                      } else {
                        if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                          var result6 = input.charAt(pos);
                          pos++;
                        } else {
                          var result6 = null;
                          if (reportMatchFailures) {
                            matchFailed("[\\u2070-\\u218F]");
                          }
                        }
                        if (result6 !== null) {
                          var result0 = result6;
                        } else {
                          if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                            var result5 = input.charAt(pos);
                            pos++;
                          } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                              matchFailed("[\\u2C00-\\u2FEF]");
                            }
                          }
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                              var result4 = input.charAt(pos);
                              pos++;
                            } else {
                              var result4 = null;
                              if (reportMatchFailures) {
                                matchFailed("[\\u3001-\\uD7FF]");
                              }
                            }
                            if (result4 !== null) {
                              var result0 = result4;
                            } else {
                              if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                              } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                  matchFailed("[\\uF900-\\uFDCF]");
                                }
                              }
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                  var result2 = input.charAt(pos);
                                  pos++;
                                } else {
                                  var result2 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("[\\uFDF0-\\uFFFD]");
                                  }
                                }
                                if (result2 !== null) {
                                  var result0 = result2;
                                } else {
                                  if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                    var result1 = input.charAt(pos);
                                    pos++;
                                  } else {
                                    var result1 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("[\\u1000-\\uEFFF]");
                                    }
                                  }
                                  if (result1 !== null) {
                                    var result0 = result1;
                                  } else {
                                    var result0 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[147] PN_CHARS_BASE");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS_U() {
        var cacheKey = 'PN_CHARS_U@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_PN_CHARS_BASE();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 1) === "_") {
            var result1 = "_";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[148] PN_CHARS_U");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VARNAME() {
        var cacheKey = 'VARNAME@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result11 = parse_PN_CHARS_U();
        if (result11 !== null) {
          var result2 = result11;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result10 = input.charAt(pos);
            pos++;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result10 !== null) {
            var result2 = result10;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result9 = parse_PN_CHARS_U();
          if (result9 !== null) {
            var result4 = result9;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result8 = input.charAt(pos);
              pos++;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result8 !== null) {
              var result4 = result8;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result7 !== null) {
                var result4 = result7;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result6 = input.charAt(pos);
                  pos++;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result6 !== null) {
                  var result4 = result6;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result5 = input.charAt(pos);
                    pos++;
                  } else {
                    var result5 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result5 !== null) {
                    var result4 = result5;
                  } else {
                    var result4 = null;;
                  };
                };
              };
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result9 = parse_PN_CHARS_U();
            if (result9 !== null) {
              var result4 = result9;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result8 = input.charAt(pos);
                pos++;
              } else {
                var result8 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result8 !== null) {
                var result4 = result8;
              } else {
                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                  var result7 = input.charAt(pos);
                  pos++;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\xB7]");
                  }
                }
                if (result7 !== null) {
                  var result4 = result7;
                } else {
                  if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                    var result6 = input.charAt(pos);
                    pos++;
                  } else {
                    var result6 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result6 !== null) {
                    var result4 = result6;
                  } else {
                    if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                      var result5 = input.charAt(pos);
                      pos++;
                    } else {
                      var result5 = null;
                      if (reportMatchFailures) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                    if (result5 !== null) {
                      var result4 = result5;
                    } else {
                      var result4 = null;;
                    };
                  };
                };
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(init, rpart) { return init+rpart.join('') })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[149] VARNAME");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_CHARS() {
        var cacheKey = 'PN_CHARS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result6 = parse_PN_CHARS_U();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          if (input.substr(pos, 1) === "-") {
            var result5 = "-";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[\xB7]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\xB7]");
                }
              }
              if (result3 !== null) {
                var result0 = result3;
              } else {
                if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                  var result2 = input.charAt(pos);
                  pos++;
                } else {
                  var result2 = null;
                  if (reportMatchFailures) {
                    matchFailed("[\\u0300-\\u036F]");
                  }
                }
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                    var result1 = input.charAt(pos);
                    pos++;
                  } else {
                    var result1 = null;
                    if (reportMatchFailures) {
                      matchFailed("[\\u203F-\\u2040]");
                    }
                  }
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[150] PN_CHARS");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_PREFIX() {
        var cacheKey = 'PN_PREFIX@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_PN_CHARS_BASE();
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_PN_CHARS();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === ".") {
              var result5 = ".";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_PN_CHARS();
            if (result6 !== null) {
              var result4 = result6;
            } else {
              if (input.substr(pos, 1) === ".") {
                var result5 = ".";
                pos += 1;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\".\"");
                }
              }
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                                                        	throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
          					      } else {
          						  return base + rest.join('');
          					      }})(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[151] PN_PREFIX");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PN_LOCAL() {
        var cacheKey = 'PN_LOCAL@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result6 = parse_PN_CHARS_U();
        if (result6 !== null) {
          var result2 = result6;
        } else {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result2 = result5;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = [];
          var result4 = parse_PN_CHARS();
          while (result4 !== null) {
            result3.push(result4);
            var result4 = parse_PN_CHARS();
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(base, rest) { 
                                                                 return base + rest.join('');
                                                               })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("[152] PN_LOCAL");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var flattenString = function(arrs) {
      
            var acum ="";
      
            for(var i=0; i< arrs.length; i++) {
      
              if(typeof(arrs[i])==='string') {
      
                acum = acum + arrs[i];
      
              } else {
      
                acum = acum + arrs[i].join('');
      
              }
      
            }
      
    
      
            return acum;
      
        }
      
    
      
    
      
        var GlobalBlankNodeCounter = 0;
      
    
      
        var prefixes = {};
      
    
      
        var registerPrefix = function(prefix, uri) {
      
            prefixes[prefix] = uri;
      
        }
      
    
      
        var registerDefaultPrefix = function(uri) {
      
            prefixes[null] = uri;
      
        }
      
    
      
        var arrayToString = function(array) {
      
            var tmp = "";
      
            for(var i=0; i<array.length; i++) {
      
                tmp = tmp + array[i];            
      
            }
      
    
      
            return tmp.toUpperCase();
      
        }
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

// end of ./src/js-sparql-parser/src/sparql_parser.js 
// exports
var RDFJSInterface = {};

// imports

/**
 * Implementation of <http://www.w3.org/TR/rdf-interfaces/>
 */

// Uris map

RDFJSInterface.defaultContext = { "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                                  "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                                  "owl": "http://www.w3.org/2002/07/owl#",
                                  "xsd": "http://www.w3.org/2001/XMLSchema#",
                                  "dcterms": "http://purl.org/dc/terms/",
                                  "foaf": "http://xmlns.com/foaf/0.1/",
                                  "cal": "http://www.w3.org/2002/12/cal/ical#",
                                  "vcard": "http://www.w3.org/2006/vcard/ns# ",
                                  "geo": "http://www.w3.org/2003/01/geo/wgs84_pos#",
                                  "cc": "http://creativecommons.org/ns#",
                                  "sioc": "http://rdfs.org/sioc/ns#",
                                  "doap": "http://usefulinc.com/ns/doap#",
                                  "com": "http://purl.org/commerce#",
                                  "ps": "http://purl.org/payswarm#",
                                  "gr": "http://purl.org/goodrelations/v1#",
                                  "sig": "http://purl.org/signature#",
                                  "ccard": "http://purl.org/commerce/creditcard#"
                                };

RDFJSInterface.UrisMap = function() {
    this.defaultNs = "";
    this.interfaceProperties = ['get', 'remove', 'set', 'setDefault',
                                'addAll', 'resolve', 'shrink'];
};

RDFJSInterface.UrisMap.prototype.values = function() {
    var collected = {};
    for(var p in this) {
        if(!Utils.include(this.interfaceProperties,p)) {
            collected[p] = this[p];
        }
    }

    return collected;
};

RDFJSInterface.UrisMap.prototype.get = function(prefix) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }
    return this[prefix];
};

RDFJSInterface.UrisMap.prototype.remove = function(prefix) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }

    delete this[prefix];

    return null;
};

RDFJSInterface.UrisMap.prototype.set = function(prefix, iri) {
    if(prefix.indexOf(" ") != -1) {
        throw "Prefix must not contain any whitespaces";
    }

    this[prefix] = iri;
};


RDFJSInterface.UrisMap.prototype.setDefault = function(iri) {
    this.defaultNs =iri;
};

RDFJSInterface.UrisMap.prototype.addAll = function(prefixMap, override) {
    for(var prefix in prefixMap) {
        if(!Utils.include(this.interfaceProperties, prefix)) {
            if(this[prefix] != null) {
                if(override === true) {
                    this[prefix] = prefixMap[prefix];
                }
            } else {
                this[prefix] = prefixMap[prefix];
            }
        }
    }

    return this;
};

RDFJSInterface.UrisMap.prototype.resolve = function(curie) {
    var parts = curie.split(":");
    var ns = parts[0];
    var suffix = parts[1];
    if(ns === '') {
        return this.defaultNs + suffix;
    } else if(this[ns] != null) {
        return this[ns] + suffix;
    } else {
        return null;
    }
};

RDFJSInterface.UrisMap.prototype.shrink = function(iri) {
    for(var ns in this) {
        var prefix = this[ns];
        if(iri.indexOf(prefix) === 0) {
            if(prefix !== '') {
                var suffix = iri.split(prefix)[1];
                return ns + ":" + suffix;
            }
        }
    }

    return iri;
};

// Profile

RDFJSInterface.Profile = function() {
    this.prefixes = new RDFJSInterface.UrisMap();
    this.terms = new RDFJSInterface.UrisMap();
};

RDFJSInterface.Profile.prototype.importProfile = function(profile, override) {    
    this.prefixes.addAll(profile.prefixes, override);
    this.terms.addAll(profile.terms, override);
};


RDFJSInterface.Profile.prototype.resolve = function(toResolve) {
    if(toResolve.indexOf(":") != -1) {
        return this.prefixes.resolve(toResolve);
    } else if(this.terms[toResolve] != null) {
        return this.terms.resolve(toResolve);
    } else {
        return null;
    }
};

RDFJSInterface.Profile.prototype.setDefaultPrefix = function(iri) {
    this.prefixes.setDefault(iri);
};

RDFJSInterface.Profile.prototype.setDefaultVocabulary = function(iri) {
    this.terms.setDefault(iri);
};

RDFJSInterface.Profile.prototype.setPrefix = function(prefix, iri) {
    this.prefixes.set(prefix, iri);
};

RDFJSInterface.Profile.prototype.setTerm = function(term, iri) {
    this.terms.set(term, iri);
};

// RDF environemnt
RDFJSInterface.RDFEnvironment  = function(){
    this.blankNodeCounter = 0;
    var that = this;
    this.filters = {
        s: function(s) { return function(t) { return t.subject.equals(s); }; },
        p: function(p) { return function(t) { return t.predicate.equals(p); }; },
        o: function(o) { return function(t) { return t.object.equals(o); }; },
        sp: function(s,p) { return function(t) { return t.subject.equals(s) && t.predicate.equals(p); }; },
        so: function(s,o) { return function(t) { return t.subject.equals(s) && t.object.equals(o); }; },
        po: function(p,o) { return function(t) { return t.predicate.equals(p) && t.object.equals(o); }; },
        spo: function(s,p,o) { return function(t) { return t.subject.equals(s) && t.predicate.equals(p) && t.object.equals(o); }; },
        describes: function(v) { return function(t) { return t.subject.equals(v) || t.object.equals(v); }; },
        type: function(o) {
            var type = that.resolve("rdf:type"); 
            return function(t) { return t.predicate.equals(type) && t.object.equals(o); };
        }
    };

    for(var p in RDFJSInterface.defaultContext) {
        this.prefixes.set(p, RDFJSInterface.defaultContext[p]);
    }
}
Utils['extends'](RDFJSInterface.Profile,RDFJSInterface.RDFEnvironment);

RDFJSInterface.RDFEnvironment.prototype.createBlankNode = function() {
     var bnode =  RDFJSInterface.BlankNode(this.blankNodeCounter);
    this.blankNodeCounter++;
    return bnode;
};

RDFJSInterface.RDFEnvironment.prototype.createNamedNode = function(value) {
    var resolvedValue = this.resolve(value);
    if(resolvedValue != null) {
        return new RDFJSInterface.NamedNode(resolvedValue);
    } else {
        return new RDFJSInterface.NamedNode(value);
    }
};

RDFJSInterface.RDFEnvironment.prototype.createLiteral = function(value, language, datatype) {
    if(datatype != null) {
        return new RDFJSInterface.Literal(value, language, datatype.toString());
    } else {
        return new RDFJSInterface.Literal(value, language, datatype);
    }
};

RDFJSInterface.RDFEnvironment.prototype.createTriple = function(subject, predicate, object) {
    return new RDFJSInterface.Triple(subject, predicate, object);
};

RDFJSInterface.RDFEnvironment.prototype.createGraph = function(triples) {
    var graph = new RDFJSInterface.Graph();
    if(triples != null) {
        for(var i=0; i<triples.length; i++) {
            graph.add(triples[i]);
        }
    }
    return graph;
};

RDFJSInterface.RDFEnvironment.prototype.createAction = function(test, action) {
    return function(triple) {
        if(test(triple)) {
            return action(triple);
        } else {
            return triple;
        }
    }
};

RDFJSInterface.RDFEnvironment.prototype.createProfile = function(empty) {
    // empty (opt);
    if(empty === true) {
        return new RDFJSInterface.RDFEnvironment.Profile();
    } else {
        var profile = new RDFJSInterface.RDFEnvironment.Profile();
        profile.importProfile(this);

        return profile;
    }
};

RDFJSInterface.RDFEnvironment.prototype.createTermMap = function(empty) {
    if(empty === true) {
        return new RDFJSInterface.UrisMap();
    } else {
      var cloned = this.terms.values();
      var termMap = new RDFJSInterface.UrisMap();
   
      for(var p in cloned) {
          termMap[p] = cloned[p];
      }
   
      return termMap;
    }
};

RDFJSInterface.RDFEnvironment.prototype.createPrefixMap = function(empty) {
    if(empty === true) {
        return new RDFJSInterface.UrisMap();
    } else {
      var cloned = this.prefixes.values();
      var prefixMap = new RDFJSInterface.UrisMap();
   
      for(var p in cloned) {
          prefixMap[p] = cloned[p];
      }
   
      return prefixMap;
    }    
};

// Common RDFNode interface

RDFJSInterface.RDFNode = function(interfaceName){
    this.interfaceName = interfaceName;
    this.attributes  = ["interfaceName", "nominalValue"]
};

RDFJSInterface.RDFNode.prototype.equals = function(otherNode) {
    if(otherNode.interfaceName == null) {
        return this.valueOf() == otherNode;

    } else {
        for(var i in this.attributes) {
            var attribute = this.attributes[i];
            if(this[attribute] != otherNode[attribute]) {
                return false;
            }
        }
      
        return true;
    }
};


// Blank node

RDFJSInterface.BlankNode = function(bnodeId) {
    RDFJSInterface.RDFNode.call(this, "BlankNode");
    this.nominalValue = "_:"+bnodeId;
    this.bnodeId = bnodeId;
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.BlankNode);

RDFJSInterface.BlankNode.prototype.toString = function(){
    return this.nominalValue;
};

RDFJSInterface.BlankNode.prototype.toNT = function() {
    return this.nominalValue;
};

RDFJSInterface.BlankNode.prototype.valueOf = function() {
    return this.nominalValue;
};

// Literal node

RDFJSInterface.Literal = function(value, language, datatype) {
    RDFJSInterface.RDFNode.call(this, "Literal");
    this.nominalValue = value;
    if(language != null) {
        this.language = language;
    } else if(datatype != null) {
        this.datatype = datatype;
    }
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.Literal);

RDFJSInterface.Literal.prototype.toString = function(){
    var tmp = "\""+this.nominalValue+"\"";
    if(this.language != null) {
        tmp = tmp + "@" + this.language;
    } else if(this.type != null) {
        tmp = tmp + "^^" + this.datatype;
    }

    return tmp;
};

RDFJSInterface.Literal.prototype.toNT = function() {
    return this.toString();
};

RDFJSInterface.Literal.prototype.valueOf = function() {
    return QueryFilters.effectiveTypeValue({token: 'literal', 
                                            type: this.type, 
                                            value: this.nominalValue, 
                                            language: this.language});
};

// NamedNode node

RDFJSInterface.NamedNode = function(val) {
    RDFJSInterface.RDFNode.call(this, "NamedNode");
    if(val.value != null) {
        this.nominalValue = val.value;
    } else {
        this.nominalValue = val;
    }
};

Utils['extends'](RDFJSInterface.RDFNode,RDFJSInterface.NamedNode);

RDFJSInterface.NamedNode.prototype.toString = function(){
    return this.nominalValue;
};

RDFJSInterface.NamedNode.prototype.toNT = function() {
    return "<"+this.toString()+">";
};

RDFJSInterface.NamedNode.prototype.valueOf = function() {
    return this.nominalValue;
};

// Triple interface
RDFJSInterface.Triple = function(subject, predicate, object){
    this.subject = subject;
    this.predicate = predicate;
    this.object = object;
};

RDFJSInterface.Triple.prototype.equals = function(otherTriple) {
    return this.subject.equals(otherTriple.subject) &&
           this.predicate.equals(otherTriple.predicate) &&
           this.object.equals(otherTriple.object);
};

RDFJSInterface.Triple.prototype.toString = function() {
    return this.subject.toNT()+" "+this.predicate.toNT()+" "+this.object.toNT()+" . \r\n";
};

// Graph interface

RDFJSInterface.Graph = function() {
    this.triples = [];
    this.duplicates = {};
    this.actions = [];
};

RDFJSInterface.Graph.prototype.add = function(triple) {
    for(var i=0; i<this.actions.length; i++) {
        triple = this.actions[i](triple);
    }
    
    var id = triple.subject.toString()+triple.predicate.toString()+triple.object.toString();
    if(!this.duplicates[id]) {
        this.duplicates[id] = true;
        this.triples.push(triple);
    }

    return this;
};

RDFJSInterface.Graph.prototype.addAction = function(tripleAction, run) {
    this.actions.push(tripleAction);
    if(run == true) {
        for(var i=0; i<this.triples.length; i++) {
            this.triples[i] = tripleAction(this.triples[i]);
        }
    }

    return this;
}

RDFJSInterface.Graph.prototype.addAll = function(graph) {
    var newTriples = graph.toArray();
    for(var i=0; i<newTriples.length; i++) {
        this.add(newTriples[i]);
    }


    return this;
}

RDFJSInterface.Graph.prototype.remove = function(triple) {
    var toRemove = null;
    for(var i=0; i<this.triples.length; i++) {
        if(this.triples[i].equals(triple)) {
            var id = triple.subject.toString()+triple.predicate.toString()+triple.object.toString();
            delete this.duplicates[id];
            toRemove = i;
            break;
        }
    }

    if(toRemove!=null) {
        this.triples.splice(toRemove,1);
    }

    return this;
};

RDFJSInterface.Graph.prototype.toArray = function() {
    return this.triples;
};

RDFJSInterface.Graph.prototype.some = function(p) {
    for(var i=0; i<this.triples.length; i++) {
        if(p(this.triples[i],this) === true) {
            return true;
        }
    }

    return false;
};

RDFJSInterface.Graph.prototype.every = function(p) {
    for(var i=0; i<this.triples.length; i++) {
        if(p(this.triples[i],this) === false) {
            return false;
        }
    }

    return true;
};

RDFJSInterface.Graph.prototype.filter = function(f) {
    var tmp = new RDFJSInterface.Graph();

    for(var i=0; i<this.triples.length; i++) {
        if(f(this.triples[i],this) === true) {
            tmp.add(this.triples[i]);
        }
    }

    return tmp;
};

RDFJSInterface.Graph.prototype.forEach = function(f) {
    for(var i=0; i<this.triples.length; i++) {
        f(this.triples[i],this);
    }
};

RDFJSInterface.Graph.prototype.merge = function(g) {
    var newGraph = new RDFJSInterface.Graph();
    for(var i=0; i<this.triples; i++) {
        var triple = this.triples[i];
        newGraph.add(triple);
    }

    for(var i=0; i<triples.length; i++) {
        var triple = triples[i];
        this.add(triple);
    }

    return newGraph;
};

RDFJSInterface.Graph.prototype.match = function(subject, predicate, object, limit) {
    var graph = new RDFJSInterface.Graph();

    var matched = 0;
    for(var i=0; i<this.triples.length; i++) {
        var triple = this.triples[i];
        if(subject == null || (triple.subject.equals(subject))) {
            if(predicate == null || (triple.predicate.equals(predicate))) {
                if(object == null || (triple.object.equals(object))) {
                    if(limit==null || matched < limit) {
                        matched++;
                        graph.add(triple);
                    } else {
                        return graph;
                    }
                }
            }
        }
    }

    return graph;
};

RDFJSInterface.Graph.prototype.removeMatches = function(subject, predicate, object) {
    var matched = [];
    var toRemove = [];
    for(var i=0; i<this.triples.length; i++) {
        var triple = this.triples[i];
        if(subject == null || (triple.subject.equals(subject))) {
            if(predicate == null || (triple.predicate.equals(predicate))) {
                if(object == null || (triple.object.equals(object))) {
                    toRemove.push(triple);
                }
            }
        }
    }

    for(var i=0; i<toRemove.length; i++) {
        this.remove(toRemove[i]);
    }

    return this;
};

RDFJSInterface.Graph.prototype.toNT = function() {
    var n3 = "";

    this.forEach(function(triple) {
        n3 = n3 + triple.toString();
    });

    return n3;
};

// Builders for the query engine

RDFJSInterface.buildRDFResource = function(value, bindings, engine, env) {
    if(value.token === 'blank') {
        return RDFJSInterface.buildBlankNode(value, bindings, engine, env);
    } else if(value.token === 'literal') {
        return RDFJSInterface.buildLiteral(value, bindings, engine, env);
    } else if(value.token === 'uri') {
        return RDFJSInterface.buildNamedNode(value, bindings, engine, env);
    } else if(value.token === 'var') {
        var result = bindings[value.value];
        if(result != null) {
            return RDFJSInterface.buildRDFResource(result, bindings, engine, env);
        } else {
            return null;
        }
    } else {
        return null;
    }
};

RDFJSInterface.buildBlankNode = function(value, bindings, engine, env) {
    if(value.value == null && value.label) {
        value.value = value.label;
    }
    if(value.value.indexOf("_:") === 0) {
        value.value = value.value.split("_:")[1];
    }
    return new RDFJSInterface.BlankNode(value.value);
};

RDFJSInterface.buildLiteral = function(value, bindings, engine, env) {
    return new RDFJSInterface.Literal(value.value, value.lang, value.type);
};

RDFJSInterface.buildNamedNode = function(value, bindings, engine, env) {
    if(value.value != null) {
        return new RDFJSInterface.NamedNode(value);
    } else {
        if(value.prefix != null) {
            var prefix = engine.resolveNsInEnvironment(value.prefix, env);
            value.value = prefix+value.suffix;
            return new RDFJSInterface.NamedNode(value);
        } else {
            return new RDFJSInterface.NamedNode(value);
        }
    }
};

RDFJSInterface.rdf = new RDFJSInterface.RDFEnvironment();

// end of ./src/js-query-engine/src/rdf_js_interface.js 
// exports
var QueryFilters = {};

// imports

QueryFilters.checkFilters = function(pattern, bindings, nullifyErrors, queryEnv, queryEngine) {

    var filters = pattern.filter;
    var nullified = [];
    if(filters==null || pattern.length != null) {
        return bindings;
    }

    for(var i=0; i<filters.length; i++) {
        var filter = filters[i];

        var filteredBindings = QueryFilters.run(filter.value, bindings, nullifyErrors, queryEnv, queryEngine);
        var acum = [];
        for(var j=0; j<filteredBindings.length; j++) {
            if(filteredBindings[j]["__nullify__"]!=null) {
                nullified.push(filteredBindings[j]);
            } else {
                acum.push(filteredBindings[j]);
            }
        }

        bindings = acum;
    }

    return bindings.concat(nullified);
};

QueryFilters.boundVars = function(filterExpr) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            var op1 = filterExpr.op1;
            var op2 = filterExpr.op2;
            return QueryFilters.boundVars(op1)+QueryFilters.boundVars(op2);
        } else if(expressionType == 'conditionalor' || expressionType == 'conditionaland') {
            var vars = [];
            for(var i=0; i< filterExpr.operands; i++) {
                vars = vars.concat(QueryFilters.boundVars(filterExpr.operands[i]));
            }
            return vars;
        } else if(expressionType == 'builtincall') {
            if(filterExpr.args == null) {
                return [];
            } else {
                var acum = [];
                for(var i=0; i< filterExpr.args.length; i++) {
                    acum = acum.concat(QueryFilters.boundVars(filterExpr.args[i]));
                }
                return acum;
            }
        } else if(expressionType == 'multiplicativeexpression') {
            var acum = QueryFilters.boundVars(filterExpr.factor);
            for(var i=0; i<filterExpr.factors.length; i++) {
                acum = acum.concat(QueryFilters.boundVars(filterExpr.factors[i].expression))
            }
            return acum;
        } else if(expressionType == 'additiveexpression') {
            var acum = QueryFilters.boundVars(filterExpr.summand);
            for(var i=0; i<filterExpr.summands.length; i++) {
                acum = acum.concat(QueryFilters.boundVars(filterExpr.summands[i].expression))
            }

            return acum;
        } else if(expressionType == 'regex') {
            var acum = QueryFilters.boundVars(filterExpr.expression1);
            return acum.concat(QueryFilters.boundVars(filterExpr.expression2));
        } else if(expressionType == 'unaryexpression') {
            return QueryFilters.boundVars(filterExpr.expression);
        } else if(expressionType == 'atomic') {           
            if(filterExpr.primaryexpression == 'var') {
                return [filterExpr.value];
            } else {
                // numeric, literal, etc...
                return [];
            }
        }
    } else {
        console.log("ERROR");
        console.log(filterExpr);
        throw("Cannot find bound expressions in a no expression token");
    }
};

QueryFilters.run = function(filterExpr, bindings, nullifyFilters, env, queryEngine) {    
    var denormBindings = queryEngine.copyDenormalizedBindings(bindings, env.outCache);
    var filteredBindings = [];
    for(var i=0; i<bindings.length; i++) {
        var thisDenormBindings = denormBindings[i];
        var ebv = QueryFilters.runFilter(filterExpr, thisDenormBindings, queryEngine, env);
        // ebv can be directly a RDFTerm (e.g. atomic expression in filter)
        // this additional call to ebv will return -> true/false/error
        var ebv = QueryFilters.ebv(ebv);
        //console.log("EBV:")
        //console.log(ebv)
        //console.log("FOR:")
        //console.log(thisDenormBindings)
        if(QueryFilters.isEbvError(ebv)) {
            // error
            if(nullifyFilters) {
                var thisBindings = {"__nullify__": true, "bindings": bindings[i]};
                filteredBindings.push(thisBindings);
            }
        } else if(ebv === true) {
            // true
            filteredBindings.push(bindings[i]);
        } else {
            // false
            if(nullifyFilters) {
                var thisBindings = {"__nullify__": true, "bindings": bindings[i]};
                filteredBindings.push(thisBindings);
            }
        }
    }
    return filteredBindings;
};

QueryFilters.collect = function(filterExpr, bindings, env, queryEngine, callback) {
    var denormBindings = queryEngine.copyDenormalizedBindings(bindings, env.outCache);
    var filteredBindings = [];
    for(var i=0; i<denormBindings.length; i++) {
        var thisDenormBindings = denormBindings[i];
        var ebv = QueryFilters.runFilter(filterExpr, thisDenormBindings, queryEngine, env);
        filteredBindings.push({binding:bindings[i], value:ebv});
    }
    return(filteredBindings);
};

QueryFilters.runDistinct = function(projectedBindings, projectionVariables) {
};

// @todo add more aggregation functions here
QueryFilters.runAggregator = function(aggregator, bindingsGroup, queryEngine, env) {
    if(bindingsGroup == null || bindingsGroup.length === 0) {
        return QueryFilters.ebvError();
    } else if(aggregator.token === 'variable' && aggregator.kind == 'var') {
        return bindingsGroup[0][aggregator.value.value];
    } else if(aggregator.token === 'variable' && aggregator.kind === 'aliased') {
        if(aggregator.expression.expressionType === 'atomic' && aggregator.expression.primaryexpression === 'var') {
            return bindingsGroup[0][aggregator.expression.value.value];
        } else if(aggregator.expression.expressionType === 'aggregate') {
            if(aggregator.expression.aggregateType === 'max') {
                var max = null;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(max === null) {
                            max = ebv;
                        } else {
                            if(QueryFilters.runLtFunction(max, ebv).value === true) {
                                max = ebv;
                            }
                        }
                    }
                }

                if(max===null) {
                    return QueryFilters.ebvError();
                } else {
                    return max;
                }
            } else if(aggregator.expression.aggregateType === 'min') {
                var min = null;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(min === null) {
                            min = ebv;
                        } else {
                            if(QueryFilters.runGtFunction(min, ebv).value === true) {
                                min = ebv;
                            }
                        }
                    }
                }

                if(min===null) {
                    return QueryFilters.ebvError();
                } else {
                    return min;
                }
            } else if(aggregator.expression.aggregateType === 'count') {
                var distinct = {}
                var count = 0;
                if(aggregator.expression.expression === '*') {
                    if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                        for(var i=0; i< bindingsGroup.length; i++) {
                            var bindings = bindingsGroup[i];
                            var key = Utils.hashTerm(bindings);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                count++;
                            }
                        } 
                    } else {
                        count = bindingsGroup.length;
                    }                   
                } else {
                  for(var i=0; i< bindingsGroup.length; i++) {
                      var bindings = bindingsGroup[i];
                      var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, env);                    
                      if(!QueryFilters.isEbvError(ebv)) {
                          if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                              var key = Utils.hashTerm(ebv);
                              if(distinct[key] == null) {
                                  distinct[key] = true;
                                  count++;
                              }
                          } else {
                              count++;
                          }
                      }
                  }
                }

                return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:''+count};
            } else if(aggregator.expression.aggregateType === 'avg') {
                var distinct = {}
                var aggregated = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:'0'};
                var count = 0;
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                            var key = Utils.hashTerm(ebv);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                if(QueryFilters.isNumeric(ebv)) {
                                    aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                    count++;
                                }
                            }
                        } else {
                            if(QueryFilters.isNumeric(ebv)) {
                                aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                count++;
                            }
                        }
                    }
                }

                var result = QueryFilters.runDivFunction(aggregated, {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:''+count});
                result.value = ''+result.value;
                return result;
            } else if(aggregator.expression.aggregateType === 'sum') {
                var distinct = {}
                var aggregated = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:'0'};
                for(var i=0; i< bindingsGroup.length; i++) {
                    var bindings = bindingsGroup[i];
                    var ebv = QueryFilters.runFilter(aggregator.expression.expression, bindings, queryEngine, env);                    
                    if(!QueryFilters.isEbvError(ebv)) {
                        if(aggregator.expression.distinct != null && aggregator.expression.distinct != '') {
                            var key = Utils.hashTerm(ebv);
                            if(distinct[key] == null) {
                                distinct[key] = true;
                                if(QueryFilters.isNumeric(ebv)) {
                                    aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                                }
                            }
                        } else {
                            if(QueryFilters.isNumeric(ebv)) {
                                aggregated = QueryFilters.runSumFunction(aggregated, ebv);
                            }
                        }
                    }
                }
                
                aggregated.value =''+aggregated.value;
                return aggregated;
            } else {
                var ebv = QueryFilters.runFilter(aggregate.expression, bindingsGroup[0], {blanks:{}, outCache:{}});
                return ebv;
            }
        }
    }
};

QueryFilters.runFilter = function(filterExpr, bindings, queryEngine, env) {
    if(filterExpr.expressionType != null) {
        var expressionType = filterExpr.expressionType;
        if(expressionType == 'relationalexpression') {
            var op1 = QueryFilters.runFilter(filterExpr.op1, bindings,queryEngine, env);
            var op2 = QueryFilters.runFilter(filterExpr.op2, bindings,queryEngine, env);
            return QueryFilters.runRelationalFilter(filterExpr, op1, op2, bindings, queryEngine, env);
        } else if(expressionType == 'conditionalor') {
            return QueryFilters.runOrFunction(filterExpr, bindings, queryEngine, env);
        } else if (expressionType == 'conditionaland') {
            return QueryFilters.runAndFunction(filterExpr, bindings, queryEngine, env);
        } else if(expressionType == 'additiveexpression') {
            return QueryFilters.runAddition(filterExpr.summand, filterExpr.summands, bindings, queryEngine, env);
        } else if(expressionType == 'builtincall') {
            return QueryFilters.runBuiltInCall(filterExpr.builtincall, filterExpr.args, bindings, queryEngine, env);
        } else if(expressionType == 'multiplicativeexpression') {
            return QueryFilters.runMultiplication(filterExpr.factor, filterExpr.factors, bindings, queryEngine, env);
        } else if(expressionType == 'unaryexpression') {
            return QueryFilters.runUnaryExpression(filterExpr.unaryexpression, filterExpr.expression, bindings, queryEngine, env);
        } else if(expressionType == 'irireforfunction') {
            return QueryFilters.runIriRefOrFunction(filterExpr.iriref, filterExpr.args, bindings, queryEngine, env);
        } else if(expressionType == 'regex') {
            return QueryFilters.runRegex(filterExpr.text, filterExpr.pattern, filterExpr.flags, bindings, queryEngine, env)
        } else if(expressionType == 'atomic') {        
            if(filterExpr.primaryexpression == 'var') {
                // lookup the var in the bindings
                var val = bindings[filterExpr.value.value];
                return val;
            } else {
                // numeric, literal, etc...
                //return queryEngine.filterExpr.value;
                if(typeof(filterExpr.value) != 'object') {
                    return filterExpr.value
                } else {
                    if(filterExpr.value.type == null || typeof(filterExpr.value.type) != 'object') {
                        return filterExpr.value
                    } else {
                        // type can be parsed as a hash using namespaces

                        filterExpr.value.type =  Utils.lexicalFormBaseUri(filterExpr.value.type, env);
                        return filterExpr.value
                    }
                }
            }
        } else {
            throw("Unknown filter expression type");
        }
    } else {
        throw("Cannot find bound expressions in a no expression token");
    }
};

QueryFilters.isRDFTerm = function(val) {
    if(val==null) {
        return false;
    } if((val.token && val.token == 'literal') ||
       (val.token && val.token == 'uri') ||
       (val.token && val.token == 'blank')) {
        return true;
    } else {
        return false;
    }
};


/*
17.4.1.7 RDFterm-equal

 xsd:boolean   RDF term term1 = RDF term term2

Returns TRUE if term1 and term2 are the same RDF term as defined in Resource Description Framework (RDF): 
Concepts and Abstract Syntax [CONCEPTS]; produces a type error if the arguments are both literal but are not 
the same RDF term *; returns FALSE otherwise. term1 and term2 are the same if any of the following is true:

    term1 and term2 are equivalent IRIs as defined in 6.4 RDF URI References of [CONCEPTS].
    term1 and term2 are equivalent literals as defined in 6.5.1 Literal Equality of [CONCEPTS].
    term1 and term2 are the same blank node as described in 6.6 Blank Nodes of [CONCEPTS].
*/
QueryFilters.RDFTermEquality = function(v1, v2, queryEngine, env) {
    if(v1.token === 'literal' && v2.token === 'literal') {
        if(v1.lang == v2.lang && v1.type == v2.type && v1.value == v2.value) {

            return true;
        } else {


            if(v1.type != null && v2.type != null) {
                return  QueryFilters.ebvError();
            } else if(QueryFilters.isSimpleLiteral(v1) && v2.type!=null){
                return QueryFilters.ebvError();
            } else if(QueryFilters.isSimpleLiteral(v2) && v1.type!=null){
                return QueryFilters.ebvError();
            } else {
                return false;
            }

//            if(v1.value != v2.value) {
//                return QueryFilters.ebvError();                                
//            } else if(v1.type && v2.type && v1.type!=v2.type) {
//                return QueryFilters.ebvError();                
//            } else if(QueryFilters.isSimpleLiteral(v1) && v2.type!=null){
//                return QueryFilters.ebvError();
//            } else if(QueryFilters.isSimpleLiteral(v2) && v1.type!=null){
//                return QueryFilters.ebvError();
//            } else {
//                return false;
//            }

        }
    } else if(v1.token === 'uri' && v2.token === 'uri') {
        return Utils.lexicalFormBaseUri(v1, env) == Utils.lexicalFormBaseUri(v2, env);
    } else if(v1.token === 'blank' && v2.token === 'blank') {
        return v1.value == v2.value;
    } else {
        return false;
    }
};


QueryFilters.isInteger = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer" ||
           val.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
           val.type == "http://www.w3.org/2001/XMLSchema#double" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#long" ||
           val.type == "http://www.w3.org/2001/XMLSchema#int" ||
           val.type == "http://www.w3.org/2001/XMLSchema#short" ||
           val.type == "http://www.w3.org/2001/XMLSchema#byte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isFloat = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#float") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isDecimal = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#decimal") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isDouble = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#double") {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};


QueryFilters.isNumeric = function(val) {
    if(val == null) {
        return false;
    }
    if(val.token === 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer" ||
           val.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
           val.type == "http://www.w3.org/2001/XMLSchema#float" ||
           val.type == "http://www.w3.org/2001/XMLSchema#double" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#long" ||
           val.type == "http://www.w3.org/2001/XMLSchema#int" ||
           val.type == "http://www.w3.org/2001/XMLSchema#short" ||
           val.type == "http://www.w3.org/2001/XMLSchema#byte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isSimpleLiteral = function(val) {
    if(val && val.token == 'literal') {
        if(val.type == null && val.lang == null) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
};

QueryFilters.isXsdType = function(type, val) {
    if(val && val.token == 'literal') {
        return val.type == "http://www.w3.org/2001/XMLSchema#"+type;
    } else {
        return false;
    }
};

QueryFilters.ebv = function(term) {
    if(term == null || QueryFilters.isEbvError(term)) {
        return QueryFilters.ebvError();
    } else {
        if(term.token && term.token === 'literal') {
          if(term.type == "http://www.w3.org/2001/XMLSchema#integer" ||
             term.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
             term.type == "http://www.w3.org/2001/XMLSchema#double" ||
             term.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#long" ||
             term.type == "http://www.w3.org/2001/XMLSchema#int" ||
             term.type == "http://www.w3.org/2001/XMLSchema#short" ||
             term.type == "http://www.w3.org/2001/XMLSchema#byte" ||
             term.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
             term.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
             term.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
              var tmp = parseFloat(term.value);
              if(isNaN(tmp)) {
                  return false;
              } else {
                  return parseFloat(term.value) != 0;
              }
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#boolean"){
              return (term.value === 'true' || term.value === true || term.value === 'True');
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#string"){
              return term.value != "";
          } else if(term.type === "http://www.w3.org/2001/XMLSchema#dateTime"){
              return (new Date(term.value)) != null;
          } else if(QueryFilters.isEbvError(term)) {
              return term;
          } else if(term.type == null) {
              if( term.value != "") {
                  return true;
              } else {
                  return false;
              }
          } else {
              return QueryFilters.ebvError();
          }
        } else {
            return term.value === true;
        }
    }
}


QueryFilters.ebvTrue = function() {
    val = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#boolean", value:true};
    return val;
};

QueryFilters.ebvFalse = function() {
    val = {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#boolean", value:false};
    return val;
};

QueryFilters.ebvError = function() {
    val = {token: 'literal', type:"https://github.com/antoniogarrote/js-tools/types#error", value:null};
    return val;
};

QueryFilters.isEbvError = function(term) {
    if(typeof(term) == 'object' && term != null) {
        return term.type === "https://github.com/antoniogarrote/js-tools/types#error";
//    } else if(term == null) {
//        return true;
    } else {
        return false;
    }
};

QueryFilters.ebvBoolean = function(bool) {    
    if(QueryFilters.isEbvError(bool)) {
        return bool;
    } else {
      if(bool === true) {
          return QueryFilters.ebvTrue();
      } else {
          return QueryFilters.ebvFalse();
      }
    }
}


QueryFilters.runRelationalFilter = function(filterExpr, op1, op2, bindings, queryEngine, env) {
    var operator = filterExpr.operator;
    if(operator === '=') {
        return QueryFilters.runEqualityFunction(op1, op2, bindings, queryEngine, env);
    } else if(operator === '!=') {
        var res = QueryFilters.runEqualityFunction(op1, op2, bindings, queryEngine, env);
        if(QueryFilters.isEbvError(res)) {
            return res;
        } else {
            res.value = !res.value;
            return res;
        }
    } else if(operator === '<') {
        return QueryFilters.runLtFunction(op1, op2, bindings);
    } else if(operator === '>') {
        return QueryFilters.runGtFunction(op1, op2, bindings);
    } else if(operator === '<=') {
        return QueryFilters.runLtEqFunction(op1, op2, bindings);
    } else if(operator === '>=') {
        return QueryFilters.runGtEqFunction(op1, op2, bindings);
    } else {
        throw("Error applying relational filter, unknown operator");
    }
};

/**
 * Transforms a JS object representing a [typed] literal in a javascript
 * value that can be used in javascript operations and functions
 */
QueryFilters.effectiveTypeValue = function(val){
    if(val.token == 'literal') {
        if(val.type == "http://www.w3.org/2001/XMLSchema#integer") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
              return tmp;
            //}
        } else if(val.type == "http://www.w3.org/2001/XMLSchema#decimal") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#float") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#double") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger") {
            var tmp = parseFloat(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#negativeInteger") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#long") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#int") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#short") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#byte") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedLong") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedInt") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedShort") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#unsignedByte") {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ) {
            var tmp = parseInt(val.value);
            //if(isNaN(tmp)) {
            //    return false;
            //} else {
                return tmp;
            //}
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#date" || 
                   val.type == "http://www.w3.org/2001/XMLSchema#dateTime" ) {
            try {
                var d = Utils.parseISO8601(val.value);            
                return(d);
            } catch(e) {
                return null;
            }
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#boolean" ) {
            return val.value === true || val.value === 'true' || val.value === '1' || val.value === 1 || val.value === true ? true :
                val.value === false || val.value === 'false' || val.value === '0' || val.value === 0 || val.value === false ? false :
                undefined;
        } else if (val.type == "http://www.w3.org/2001/XMLSchema#string" ) {
            return val.value === null || val.value === undefined ? undefined : ''+val.value;
        } else if (val.type == null) {
            // plain literal -> just manipulate the string
            return val.value;
        } else {
            return val.value
        }
    } else {
        // @todo
        console.log("not implemented yet");
        throw("value not supported in operations yet");
    }
};

/*
  A logical-or that encounters an error on only one branch will return TRUE if the other branch is TRUE and an error if the other branch is FALSE.
  A logical-or or logical-and that encounters errors on both branches will produce either of the errors.
*/
QueryFilters.runOrFunction = function(filterExpr, bindings, queryEngine, env) {

    var acum = null;

    for(var i=0; i< filterExpr.operands.length; i++) {
        var ebv = QueryFilters.runFilter(filterExpr.operands[i], bindings, queryEngine, env);
        if(QueryFilters.isEbvError(ebv) == false) {
            ebv = QueryFilters.ebv(ebv);
        }

        if(acum == null) {
            acum = ebv;
        } else if(QueryFilters.isEbvError(ebv)) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            } else if(acum === true) {
                acum = true;
            } else {
                acum = QueryFilters.ebvError();
            }
        } else if(ebv === true) {
            acum = true;
        } else {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            }
        }
    }

    return QueryFilters.ebvBoolean(acum);
};

/*
  A logical-and that encounters an error on only one branch will return an error if the other branch is TRUE and FALSE if the other branch is FALSE.
  A logical-or or logical-and that encounters errors on both branches will produce either of the errors.
*/
QueryFilters.runAndFunction = function(filterExpr, bindings, queryEngine, env) {

    var acum = null;

    for(var i=0; i< filterExpr.operands.length; i++) {

        var ebv = QueryFilters.runFilter(filterExpr.operands[i], bindings, queryEngine, env);

        if(QueryFilters.isEbvError(ebv) == false) {
            ebv = QueryFilters.ebv(ebv);
        }

        if(acum == null) {
            acum = ebv;
        } else if(QueryFilters.isEbvError(ebv)) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            } else if(acum === true) {
                acum = QueryFilters.ebvError();
            } else {
                acum = false;
            }
        } else if(ebv === true) {
            if(QueryFilters.isEbvError(acum)) {
                acum = QueryFilters.ebvError();
            }
        } else {
            acum = false;
        }
    }

    return QueryFilters.ebvBoolean(acum);
};


QueryFilters.runEqualityFunction = function(op1, op2, bindings, queryEngine, env) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }
    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        var eop1 = QueryFilters.effectiveTypeValue(op1);
        var eop2 = QueryFilters.effectiveTypeValue(op2);
        if(isNaN(eop1) || isNaN(eop2)) {
            return QueryFilters.ebvBoolean(QueryFilters.RDFTermEquality(op1, op2, queryEngine, env));
        } else {
            return QueryFilters.ebvBoolean(eop1 == eop2);
        }
    } else if((QueryFilters.isSimpleLiteral(op1) || QueryFilters.isXsdType("string", op1)) && 
              (QueryFilters.isSimpleLiteral(op2) || QueryFilters.isXsdType("string", op2))) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) == QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) == QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1)||QueryFilters.isXsdType("date", op1)) && (QueryFilters.isXsdType("dateTime", op2)||QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == 0) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else if(QueryFilters.isRDFTerm(op1) && QueryFilters.isRDFTerm(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.RDFTermEquality(op1, op2, queryEngine, env));
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runGtFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) > QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == 1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};

/**
 * Total gt function used when sorting bindings in the SORT BY clause.
 *
 * @todo
 * Some criteria are not clear
 */
QueryFilters.runTotalGtFunction = function(op1,op2) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if((QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) ||
       (QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) ||
       (QueryFilters.isXsdType("string",op1) && QueryFilters.isSimpleLiteral("string",op2)) ||
       (QueryFilters.isXsdType("boolean",op1) && QueryFilters.isSimpleLiteral("boolean",op2)) ||
       (QueryFilters.isXsdType("dateTime",op1) && QueryFilters.isSimpleLiteral("dateTime",op2))) {
        return QueryFilters.runGtFunction(op1, op2, []);
    } else if(op1.token && op1.token === 'uri' && op2.token && op2.token === 'uri') {
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else if(op1.token && op1.token === 'literal' && op2.token && op2.token === 'literal') {
        // one of the literals must have type/lang and the othe may not have them
        return QueryFilters.ebvBoolean(""+op1.value+op1.type+op1.lang > ""+op2.value+op2.type+op2.lang);
    } else if(op1.token && op1.token === 'blank' && op2.token && op2.token === 'blank') {    
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else if(op1.value && op2.value) {
        return QueryFilters.ebvBoolean(op1.value > op2.value);
    } else {
        return QueryFilters.ebvTrue();
    }
};


QueryFilters.runLtFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) < QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp == -1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};


QueryFilters.runGtEqFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) >= QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp != -1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }

    } else {
        return QueryFilters.ebvFalse();
    }
};


QueryFilters.runLtEqFunction = function(op1, op2, bindings) {
    if(QueryFilters.isEbvError(op1) || QueryFilters.isEbvError(op2)) {
        return QueryFilters.ebvError();
    }

    if(QueryFilters.isNumeric(op1) && QueryFilters.isNumeric(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));
    } else if(QueryFilters.isSimpleLiteral(op1) && QueryFilters.isSimpleLiteral(op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("string", op1) && QueryFilters.isXsdType("string", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));       
    } else if(QueryFilters.isXsdType("boolean", op1) && QueryFilters.isXsdType("boolean", op2)) {
        return QueryFilters.ebvBoolean(QueryFilters.effectiveTypeValue(op1) <= QueryFilters.effectiveTypeValue(op2));
    } else if((QueryFilters.isXsdType("dateTime", op1) || QueryFilters.isXsdType("date", op1)) && 
              (QueryFilters.isXsdType("dateTime", op2) || QueryFilters.isXsdType("date", op2))) {
        if(QueryFilters.isXsdType("dateTime", op1) && QueryFilters.isXsdType("date", op2)) {
            return QueryFilters.ebvFalse();
        }
        if(QueryFilters.isXsdType("date", op1) && QueryFilters.isXsdType("dateTime", op2)) {
            return QueryFilters.ebvFalse();
        }

        var comp = Utils.compareDateComponents(op1.value, op2.value)
        if(comp != null) {
            if(comp != 1) {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvFalse();
            }
        } else {
                return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runAddition = function(summand, summands, bindings, queryEngine, env) {
    var summandOp = QueryFilters.runFilter(summand,bindings,queryEngine, env);
    if(QueryFilters.isEbvError(summandOp)) {
        return QueryFilters.ebvError();
    }

    var acum = summandOp;
    if(QueryFilters.isNumeric(summandOp)) {
        for(var i=0; i<summands.length; i++) {
            var nextSummandOp = QueryFilters.runFilter(summands[i].expression, bindings,queryEngine, env);
            if(QueryFilters.isNumeric(nextSummandOp)) {
                if(summands[i].operator === '+') {
                    acum = QueryFilters.runSumFunction(acum, nextSummandOp);
                } else if(summands[i].operator === '-') {
                    acum = QueryFilters.runSubFunction(acum, nextSummandOp);
                }
            } else {
                return QueryFilters.ebvFalse();
            }
        }
        return acum;
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runSumFunction = function(suma, sumb) {
    if(QueryFilters.isEbvError(suma) || QueryFilters.isEbvError(sumb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(suma) + QueryFilters.effectiveTypeValue(sumb);
    
    if(QueryFilters.isDouble(suma) || QueryFilters.isDouble(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(suma) || QueryFilters.isFloat(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(suma) || QueryFilters.isDecimal(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runSubFunction = function(suma, sumb) {
    if(QueryFilters.isEbvError(suma) || QueryFilters.isEbvError(sumb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(suma) - QueryFilters.effectiveTypeValue(sumb);

    if(QueryFilters.isDouble(suma) || QueryFilters.isDouble(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(suma) || QueryFilters.isFloat(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(suma) || QueryFilters.isDecimal(sumb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runMultiplication = function(factor, factors, bindings, queryEngine, env) {
    var factorOp = QueryFilters.runFilter(factor,bindings,queryEngine, env);
    if(QueryFilters.isEbvError(factorOp)) {
        return factorOp;
    }

    var acum = factorOp;
    if(QueryFilters.isNumeric(factorOp)) {
        for(var i=0; i<factors.length; i++) {
            var nextFactorOp = QueryFilters.runFilter(factors[i].expression, bindings,queryEngine, env);
            if(QueryFilters.isEbvError(nextFactorOp)) {
                return factorOp;
            }
            if(QueryFilters.isNumeric(nextFactorOp)) {
                if(factors[i].operator === '*') {
                    acum = QueryFilters.runMulFunction(acum, nextFactorOp);
                } else if(factors[i].operator === '/') {
                    acum = QueryFilters.runDivFunction(acum, nextFactorOp);
                }
            } else {
                return QueryFilters.ebvFalse();
            }
        }
        return acum;
    } else {
        return QueryFilters.ebvFalse();
    }
};

QueryFilters.runMulFunction = function(faca, facb) {
    if(QueryFilters.isEbvError(faca) || QueryFilters.isEbvError(facb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(faca) * QueryFilters.effectiveTypeValue(facb);

    if(QueryFilters.isDouble(faca) || QueryFilters.isDouble(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(faca) || QueryFilters.isFloat(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(faca) || QueryFilters.isDecimal(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runDivFunction = function(faca, facb) {
    if(QueryFilters.isEbvError(faca) || QueryFilters.isEbvError(facb)) {
        return QueryFilters.ebvError();
    }
    var val = QueryFilters.effectiveTypeValue(faca) / QueryFilters.effectiveTypeValue(facb);

    if(QueryFilters.isDouble(faca) || QueryFilters.isDouble(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#double", value:val};        
    } else if(QueryFilters.isFloat(faca) || QueryFilters.isFloat(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#float", value:val};        
    } else if(QueryFilters.isDecimal(faca) || QueryFilters.isDecimal(facb)) {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#decimal", value:val};        
    } else {
        return {token: 'literal', type:"http://www.w3.org/2001/XMLSchema#integer", value:val};        
    }
};

QueryFilters.runBuiltInCall = function(builtincall, args, bindings, queryEngine, env) {
    var ops = [];
    for(var i=0; i<args.length; i++) {
        if(args[i].token === 'var') {
            ops.push(args[i]);
        } else {
          var op = QueryFilters.runFilter(args[i], bindings, queryEngine, env);
          if(QueryFilters.isEbvError(op)) {
              return op;
          }
        ops.push(op);
        }
    }

    if(builtincall === 'str') {
        if(ops[0].token === 'literal') {
            // lexical form literals
            return {token: 'literal', type:null, value:""+ops[0].value}; // type null? or "http://www.w3.org/2001/XMLSchema#string"
        } else if(ops[0].token === 'uri'){
            // codepoint URIs
            return {token: 'literal', type:null, value:ops[0].value}; // idem
        } else {
            return QueryFilters.ebvFalse();
        }
    } else if(builtincall === 'lang') {
        if(ops[0].token === 'literal'){
            if(ops[0].lang != null) {
                return {token: 'literal', value:""+ops[0].lang};
            } else {
                return {token: 'literal', value:""};
            }
        } else {
            return QueryFilters.ebvError();
        }
    } else if(builtincall === 'datatype') {
        if(ops[0].token === 'literal'){
            var lit = ops[0];
            if(lit.type != null) {
                if(typeof(lit.type) === 'string') {
                    return {token: 'uri', value:lit.type, prefix:null, suffix:null};
                } else {
                    return lit.type;
                }
            } else if(lit.lang == null) {
                return {token: 'uri', value:'http://www.w3.org/2001/XMLSchema#string', prefix:null, suffix:null};
            } else {
                return QueryFilters.ebvError();
            }
        } else {
            return QueryFilters.ebvError();
        }
    } else if(builtincall === 'isliteral') {
        if(ops[0].token === 'literal'){
            return QueryFilters.ebvTrue();
        } else {
            return QueryFilters.ebvFalse();
        }        
    } else if(builtincall === 'isblank') {
        if(ops[0].token === 'blank'){
            return QueryFilters.ebvTrue();
        } else {
            return QueryFilters.ebvFalse();
        }        
    } else if(builtincall === 'isuri' || builtincall === 'isiri') {
        if(ops[0].token === 'uri'){
            return QueryFilters.ebvTrue();
        } else {
            return QueryFilters.ebvFalse();
        }        
    } else if(builtincall === 'sameterm') {
        var op1 = ops[0];
        var op2 = ops[1];
        var res = QueryFilters.RDFTermEquality(op1, op2, queryEngine, env);
        if(QueryFilters.isEbvError(res)) {
            res = false;
        }
        return QueryFilters.ebvBoolean(res);
    } else if(builtincall === 'langmatches') {
        var lang = ops[0];
        var langRange = ops[1];

        if(lang.token === 'literal' && langRange.token === 'literal'){
            if(langRange.value === '*' && lang.value != '') {
                return QueryFilters.ebvTrue();
            } else {
                return QueryFilters.ebvBoolean(lang.value.toLowerCase().indexOf(langRange.value.toLowerCase()) === 0)
            }
        } else {
            return QueryFilters.ebvError();
        }        
    } else if(builtincall === 'bound') {
        var boundVar = ops[0].value;
        var acum = [];
        if(boundVar == null) {
            return QueryFilters.ebvError();
        } else  if(bindings[boundVar] != null) {
            return QueryFilters.ebvTrue();
        } else {
            return QueryFilters.ebvFalse();
        }
    } else {
        throw ("Builtin call "+builtincall+" not implemented yet");
    }
};

QueryFilters.runUnaryExpression = function(unaryexpression, expression, bindings, queryEngine, env) {
    var op = QueryFilters.runFilter(expression, bindings,queryEngine, env);
    if(QueryFilters.isEbvError(op)) {
        return op;
    }

    if(unaryexpression === '!') {
        var res = QueryFilters.ebv(op);
        //console.log("** Unary ! ");
        //console.log(op)
        if(QueryFilters.isEbvError(res)) {
            //console.log("--- ERROR")
            //console.log(QueryFilters.ebvFalse())
            //console.log("\r\n")

            // ??
            return QueryFilters.ebvFalse();
        } else {
            res = !res;
            //console.log("--- BOOL")
            //console.log(QueryFilters.ebvBoolean(res))
            //console.log("\r\n")

            return QueryFilters.ebvBoolean(res);
        }
    } else if(unaryexpression === '+') {
        if(QueryFilters.isNumeric(op)) {
            return op;
        } else {
            return QueryFilters.ebvError();
        }
    } else if(unaryexpression === '-') {
        if(QueryFilters.isNumeric(op)) {
            var clone = {};
            for(var p in op) {
                clone[p] = op[p];
            }
            clone.value = -clone.value;
            return clone;
        } else {
            return QueryFilters.ebvError();
        }
    }
};

QueryFilters.runRegex = function(text, pattern, flags, bindings, queryEngine, env) {

    if(text != null) {
        text = QueryFilters.runFilter(text, bindings, queryEngine, env);
    } else {
        return QueryFilters.ebvError();
    }

    if(pattern != null) {
        pattern = QueryFilters.runFilter(pattern, bindings, queryEngine, env);
    } else {
        return QueryFilters.ebvError();
    }

    if(flags != null) {
        flags = QueryFilters.runFilter(flags, bindings, queryEngine, env);
    }


    if(pattern != null && pattern.token === 'literal' && (flags == null || flags.token === 'literal')) {
        pattern = pattern.value;
        flags = (flags == null) ? null : flags.value;
    } else {
        return QueryFilters.ebvError();
    }

    if(text!= null && text.token == 'var') {
        if(bindings[text.value] != null) {
            text = bindings[text.value];
        } else {
            return QueryFilters.ebvError();
        }
    } else if(text!=null && text.token === 'literal') {
        if(text.type == null || QueryFilters.isXsdType("string",text)) {
            text = text.value
        } else {
            return QueryFilters.ebvError();
        }
    } else {
        return QueryFilters.ebvError();
    }

    var regex;
    if(flags == null) {
        regex = new RegExp(pattern);                    
    } else {
        regex = new RegExp(pattern,flags.toLowerCase());
    }
    if(regex.exec(text)) {
        return QueryFilters.ebvTrue();
    } else {
        return QueryFilters.ebvFalse();
    }    
};

QueryFilters.normalizeLiteralDatatype = function(literal, queryEngine, env) {
    if(literal.value.type == null || typeof(literal.value.type) != 'object') {
        return literal;
    } else {
        // type can be parsed as a hash using namespaces
        literal.value.type =  Utils.lexicalFormBaseUri(literal.value.type, env);
        return literal;
    }
};

QueryFilters.runIriRefOrFunction = function(iriref, args, bindings,queryEngine, env) {
    if(args == null) {
        return iriref;
    } else {
        var ops = [];
        for(var i=0; i<args.length; i++) {
            ops.push(QueryFilters.runFilter(args[i], bindings, queryEngine, env))
        }

        var fun = Utils.lexicalFormBaseUri(iriref, env);

        if(fun == "http://www.w3.org/2001/XMLSchema#integer" ||
           fun == "http://www.w3.org/2001/XMLSchema#decimal" ||
           fun == "http://www.w3.org/2001/XMLSchema#double" ||
           fun == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#long" ||
           fun == "http://www.w3.org/2001/XMLSchema#int" ||
           fun == "http://www.w3.org/2001/XMLSchema#short" ||
           fun == "http://www.w3.org/2001/XMLSchema#byte" ||
           fun == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
           fun == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
           fun == "http://www.w3.org/2001/XMLSchema#positiveInteger") {
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == "http://www.w3.org/2001/XMLSchema#integer" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#double" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#long" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#int" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#short" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#byte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#positiveInteger") {
                    from.type = fun;
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#boolean') {
                    if(QueryFilters.ebv(from) == true) {
                        from.type = fun;
                        from.value = 1;
                    } else {
                        from.type = fun;
                        from.value = 0;
                    }
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#float' || 
                          from.type == 'http://www.w3.org/2001/XMLSchema#double') {
                    from.type = fun;
                    from.value = parseInt(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#string' || from.type == null) {
                    if(from.value.split(".").length > 2) {
                        return QueryFilters.ebvError();
                    } else if (from.value.split("-").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("/").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("+").length > 2) {
                        return QueryFilters.ebvError();                            
                    }

                    // @todo improve this with regular expressions for each lexical representation
                    if(fun == "http://www.w3.org/2001/XMLSchema#decimal") {
                        if(from.value.indexOf("e") != -1 || from.value.indexOf("E") != -1) {
                            return QueryFilters.ebvError();
                        }
                    }

                    // @todo improve this with regular expressions for each lexical representation
                    if(fun == "http://www.w3.org/2001/XMLSchema#int" || fun == "http://www.w3.org/2001/XMLSchema#integer") {
                        if(from.value.indexOf("e") != -1 || from.value.indexOf("E") != -1 || from.value.indexOf(".") != -1) {
                            return QueryFilters.ebvError();
                        }
                    }

                    try {
                        from.value = parseInt(parseFloat(from.value));
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#boolean") { 
            var from = ops[0];
            if(from.token === "literal" && from.type == null) {
                if(from.value === "true" || from.value === "1") {
                    return QueryFilters.ebvTrue();
                } else if(from.value === "false" || from.value === "0" ) {
                    return QueryFilters.ebvFalse();
                } else {
                    return QueryFilters.ebvError();
                }
            } else if(from.token === "literal") {
              if(QueryFilters.isEbvError(from)) {
                  return from;
              } else {
                  return QueryFilters.ebvBoolean(from);
              }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#string") { 
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == "http://www.w3.org/2001/XMLSchema#integer" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#decimal" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#double" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonPositiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#negativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#long" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#int" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#short" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#byte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedLong" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedInt" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedShort" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#unsignedByte" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#positiveInteger" ||
                   from.type == "http://www.w3.org/2001/XMLSchema#float") {
                    from.type = fun;
                    from.value = ""+from.value;
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#string") {
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#boolean") {
                    if(QueryFilters.ebv(from)) {
                        from.type = fun;
                        from.value = 'true';
                    } else {
                        from.type = fun;
                        from.value = 'false';
                    }
                    return from;
                } else if(from.type == "http://www.w3.org/2001/XMLSchema#dateTime" ||
                          from.type == "http://www.w3.org/2001/XMLSchema#date") {
                    from.type = fun;
                    if(typeof(from.value) != 'string') {
                        from.value = Utils.iso8601(from.value);
                    }
                    return from;
                } else if(from.type == null) {
                    from.value = ""+from.value;
                    from.type = fun;
                    return from;
                } else {
                    return QueryFilters.ebvError();
                }
            } else if(from.token === 'uri') {
                return {token: 'literal',
                        value: Utils.lexicalFormBaseUri(from, env),
                        type: fun,
                        lang: null};
            } else {
                return QueryFilters.ebvError();
            }            
        } else if(fun == "http://www.w3.org/2001/XMLSchema#dateTime" || fun == "http://www.w3.org/2001/XMLSchema#date") { 
            from = ops[0];
            if(from.type == "http://www.w3.org/2001/XMLSchema#dateTime" || from.type == "http://www.w3.org/2001/XMLSchema#date") {
                return from;
            } else if(from.type == "http://www.w3.org/2001/XMLSchema#string" || from.type == null) {
                try {
                    from.value = Utils.iso8601(Utils.parseStrictISO8601(from.value));
                    from.type = fun;
                    return from;
                } catch(e) {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else if(fun == "http://www.w3.org/2001/XMLSchema#float") { 
            var from = ops[0];
            if(from.token === 'literal') {
                from = QueryFilters.normalizeLiteralDatatype(from, queryEngine, env);
                if(from.type == 'http://www.w3.org/2001/XMLSchema#decimal' || 
                   from.type == 'http://www.w3.org/2001/XMLSchema#int') {
                    from.type = fun;
                    from.value = parseFloat(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#boolean') {
                    if(QueryFilters.ebv(from) == true) {
                        from.type = fun;
                        from.value = 1.0;
                    } else {
                        from.type = fun;
                        from.value = 0.0;
                    }
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#float' || 
                          from.type == 'http://www.w3.org/2001/XMLSchema#double') {
                    from.type = fun;
                    from.value = parseFloat(from.value);
                    return from;
                } else if(from.type == 'http://www.w3.org/2001/XMLSchema#string') {
                    try {
                        from.value = parseFloat(from.value);
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else if(from.type == null) {
                    // checking some exceptions that are parsed as Floats by JS
                    if(from.value.split(".").length > 2) {
                        return QueryFilters.ebvError();
                    } else if (from.value.split("-").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("/").length > 2) {
                        return QueryFilters.ebvError();                            
                    } else if (from.value.split("+").length > 2) {
                        return QueryFilters.ebvError();                            
                    }

                    try {
                        from.value = parseFloat(from.value);
                        if(isNaN(from.value)) {
                            return QueryFilters.ebvError();
                        } else {
                            from.type = fun;
                            return from;
                        }
                    } catch(e) {
                        return QueryFilters.ebvError();                        
                    }
                } else {
                    return QueryFilters.ebvError();
                }
            } else {
                return QueryFilters.ebvError();
            }
        } else {
            // unknown function
            return QueryFilters.ebvError();
        }
    }
};

// end of ./src/js-query-engine/src/query_filters.js 
// exports
var QueryPlan = {};

// imports

QueryPlan.orderJoins = function(bgps) {
    // @todo order joins somehow
    return bgps;
};


QueryPlan.variablesInBGP = function(bgp) {
    // may be cached in the pattern
    var variables = bgp.variables;
    if(variables) {
        return variables;
    }

    var components =  bgp.value || bgp;
    var variables  = [];
    for(comp in components) {
        if(components[comp] && components[comp].token === "var") {
            variables.push(components[comp].value);
        } else if(components[comp] && components[comp].token === "blank") {
            variables.push("blank:"+components[comp].label);
        }
    }
    bgp.variables = variables;

    return variables;
};

QueryPlan.variablesIntersectionBGP = function(bgpa, bgpb) {
    var varsa = QueryPlan.variablesInBGP(bgpa).sort();
    var varsb = QueryPlan.variablesInBGP(bgpb).sort();

    var ia = 0;
    var ib = 0;

    var intersection = [];

    while(ia<varsa.length && ib<varsb.length) {
        if(varsa[ia] === varsb[ib]) {
            intersection.push(varsa[ia]);
            ia++;
            ib++;
        } else if(varsa[ia] < varsb[ib]) {
            ia++;
        } else {
            ib++;
        }
    }

    return intersection;
};

QueryPlan.executeAndBGPs = function(bgps, dataset, queryEngine, env) {
    //for(var i=0; i<bgps.length; i++) {
    //    if(bgps[i].graph == null) {
    //        bgps[i].graph = dataset;
    //    } else if(dataset != null && dataset.length != 0) {
    //        bgps[i].graph = dataset;
    //    }
    //}
    var pairs = Utils.partition(bgps,2);
    return QueryPlan.buildBushyJoinTreeBase(pairs, dataset, queryEngine, env);
};

QueryPlan.buildBushyJoinTreeBase = function(pairs, dataset, queryEngine, queryEnv) {
    var acum = [];
    for(var i=0; i<pairs.length; i++) {
        var pair = pairs[i];
        var bgpa = pair[0];
        var bgpb = pair[1];
        results = QueryPlan.executeAndBGP(bgpa,bgpb, dataset, queryEngine, queryEnv);
        if(results!=null) {
            acum.push(results);

        } else {
            return null;
        }
    }
    return QueryPlan.buildBushyJoinTreeBranches(acum);
};

// @todo
// remove recursion here
QueryPlan.buildBushyJoinTreeBranches = function(bindingsList) {
    if(bindingsList.length === 1){
        return bindingsList[0];
    } else {
        var pairs = Utils.partition(bindingsList,2);
        var acum = [];
        for(var i=0; i<pairs.length; i++) {
            var pair = pairs[i];
            var bindingsa = pair[0];
            var bindingsb = pair[1];
            var result =  QueryPlan.executeAndBindings(bindingsa, bindingsb);
            acum.push(result);
        }
        return QueryPlan.buildBushyJoinTreeBranches(acum);
    }
};

QueryPlan.executeAndBindings = function(bindingsa, bindingsb) {
    if(bindingsa==null) {
        return bindingsb;
    } else if(bindingsb==null) {
        return bindingsa;
    } else {
        if(bindingsa==[] || bindingsb==[]) {
            return [];
        } else {
            if(QueryPlan.variablesIntersectionBindings(bindingsa[0],bindingsb[0]).length == 0) {
                return QueryPlan.crossProductBindings(bindingsa,bindingsb);
            } else {
                return QueryPlan.joinBindings(bindingsa,bindingsb);
            }
        }
    }
};

QueryPlan.executeAndBGP = function(bgpa, bgpb, dataset, queryEngine, queryEnv) {
    if(bgpa==null) {
        return QueryPlan.executeEmptyJoinBGP(bgpb, dataset, queryEngine, queryEnv);
    } else if(bgpb==null) {
        return QueryPlan.executeEmptyJoinBGP(bgpa, dataset, queryEngine, queryEnv);
    } else {
        var joinVars = QueryPlan.variablesIntersectionBGP(bgpa,bgpb);
        if(joinVars.length === 0) {
            // range a, range b -> cartesian product
            return QueryPlan.executeCrossProductBGP(joinVars, bgpa, bgpb, dataset, queryEngine, queryEnv);
        } else {
            // join on intersection vars
            return QueryPlan.executeJoinBGP(joinVars, bgpa, bgpb, dataset, queryEngine, queryEnv);
        }
    }
};

QueryPlan.executeEmptyJoinBGP = function(bgp, dataset, queryEngine, queryEnv) {
    return QueryPlan.executeBGPDatasets(bgp, dataset, queryEngine, queryEnv);
};

QueryPlan.executeJoinBGP = function(joinVars, bgpa, bgpb, dataset, queryEngine, queryEnv) {
    var bindingsa = QueryPlan.executeBGPDatasets(bgpa, dataset, queryEngine, queryEnv);
    if(bindingsa!=null) {
        var bindingsb = QueryPlan.executeBGPDatasets(bgpb, dataset, queryEngine, queryEnv);
        if(bindingsb!=null) {
            return QueryPlan.joinBindings(bindingsa, bindingsb);
        } else {
            return null;
        }
    } else {
        return null;
    }
};

QueryPlan.executeBGPDatasets = function(bgp, dataset, queryEngine, queryEnv) {
    // avoid duplicate queries in the same graph
    // merge of graphs is not guaranted here.
    var duplicates = {};

    if(bgp.graph == null) {
        //union through all default graph(s)
        var acum = [];
        for(var i=0; i<dataset['default'].length; i++) {
            if(duplicates[dataset['default'][i].oid] == null) {
                duplicates[dataset['default'][i].oid] = true;
                bgp.graph = dataset['default'][i];//.oid
                var results = queryEngine.rangeQuery(bgp, queryEnv);
                results = QueryPlan.buildBindingsFromRange(results, bgp);
                acum.push(results);
            }
        }
        var acumBindings = QueryPlan.unionManyBindings(acum);
        return acumBindings;
    } else if(bgp.graph.token === 'var') {
        // union through all named datasets
        var graphVar = bgp.graph.value;        
        var acum = [];

        for(var i=0; i<dataset.named.length; i++) {
            if(duplicates[dataset.named[i].oid] == null) {
                duplicates[dataset.named[i].oid] = true;
                bgp.graph = dataset.named[i];//.oid
                
                var results = queryEngine.rangeQuery(bgp, queryEnv);
                if(results != null) {
                    results = QueryPlan.buildBindingsFromRange(results, bgp);
                    // add the graph bound variable to the result 
                    for(var j=0; j< results.length; j++) {
                        results[j][graphVar] = dataset.named[i].oid;
                    }
                    acum.push(results);
                } else {
                    return null;
                }
            }
        }
        
        var acumBindings = QueryPlan.unionManyBindings(acum||[]);
        return acumBindings;

    } else {
        // graph already has an active value, just match.
        // Filtering the results will still be necessary
        var results = queryEngine.rangeQuery(bgp, queryEnv);
        if(results!=null) {
            results = QueryPlan.buildBindingsFromRange(results, bgp);
            return results;
        } else {
            return null;
        }
    }
};

QueryPlan.executeCrossProductBGP = function(joinVars, bgpa, bgpb, dataset, queryEngine, queryEnv) {
    var bindingsa = QueryPlan.executeBGPDatasets(bgpa, dataset, queryEngine, queryEnv);
    if(bindingsa!=null) {
        var bindingsb = QueryPlan.executeBGPDatasets(bgpb, dataset, queryEngine, queryEnv);
        if(bindingsb!=null) {
            return QueryPlan.crossProductBindings(bindingsa, bindingsb);
        } else {
            return null;
        }
    } else {
        return null;
    }
};

QueryPlan.buildBindingsFromRange = function(results, bgp) {
    var variables = QueryPlan.variablesInBGP(bgp);
    var bindings = {};

    var components =  bgp.value||bgp;
    var bindings = {};
    for(comp in components) {
        if(components[comp] && components[comp].token === "var") {
            bindings[comp] = components[comp].value;
        } else if(components[comp] && components[comp].token === "blank") {
            bindings[comp] = "blank:"+components[comp].label;
        }
    }

    var resultsBindings =[];

    for(var i=0; i<results.length; i++) {
        var binding = {};
        var result  = results[i];
        for(var comp in bindings) {
            var value = result[comp];
            binding[bindings[comp]] = value;
        }
        resultsBindings.push(binding);
    }

    return resultsBindings;
};

QueryPlan.variablesIntersectionBindings = function(bindingsa, bindingsb) {
    var ia = 0;
    var ib = 0;
    var varsa = [];
    var varsb = [];

    for(var variable in bindingsa) {
        varsa.push(variable);
    }

    for(var variable in bindingsb) {
        varsb.push(variable);
    }
    varsa.sort();
    varsb.sort();


    var intersection = [];

    while(ia<varsa.length && ib<varsb.length) {
        if(varsa[ia] === varsb[ib]) {
            intersection.push(varsa[ia]);
            ia++;
            ib++;
        } else if(varsa[ia] < varsb[ib]) {
            ia++;
        } else {
            ib++;
        }
    }

    return intersection;
};

QueryPlan.areCompatibleBindings = function(bindingsa, bindingsb) {
    for(var variable in bindingsa) {
        if(bindingsb[variable]!=null && (bindingsb[variable] != bindingsa[variable])) {
            return false;
        }
    }

    return true;
};


QueryPlan.mergeBindings = function(bindingsa, bindingsb) {
    var merged = {};
    for(var variable in bindingsa) {
        merged[variable] = bindingsa[variable];
    }

    for(var variable in bindingsb) {
        merged[variable] = bindingsb[variable];
    }

    return merged;
};


QueryPlan.joinBindings = function(bindingsa, bindingsb) {
    var result = [];

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            if(QueryPlan.areCompatibleBindings(bindinga, bindingb)){
                result.push(QueryPlan.mergeBindings(bindinga, bindingb));
            }
        }
    }

    return result;
};

QueryPlan.augmentMissingBindings = function(bindinga, bindingb) {
    for(var pb in bindingb) {
        if(bindinga[pb] == null) {
            bindinga[pb] = null
        }
    }
    return bindinga;
};

/*
  QueryPlan.diff = function(bindingsa, biundingsb) {
  var result = [];

  for(var i=0; i< bindingsa.length; i++) {
  var bindinga = bindingsa[i];
  var matched = false;
  for(var j=0; j<bindingsb.length; j++) {
  var bindingb = bindingsb[j];
  if(QueryPlan.areCompatibleBindings(bindinga, bindingb)){
  matched = true;
  result.push(QueryPlan.mergeBindings(bindinga, bindingb));
  }
  }
  if(matched === false) {
  // missing bindings must be present for further processing
  // e.g. filtering by not present value (see DAWG tests
  // bev-6)
  QueryPlan.augmentMissingBindings(bindinga, bindingb);
  result.push(bindinga);
  }
  }

  return result;    
  };
*/
QueryPlan.leftOuterJoinBindings = function(bindingsa, bindingsb) {
    var result = [];

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        var matched = false;
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            if(QueryPlan.areCompatibleBindings(bindinga, bindingb)){
                matched = true;
                result.push(QueryPlan.mergeBindings(bindinga, bindingb));
            }
        }
        if(matched === false) {
            // missing bindings must be present for further processing
            // e.g. filtering by not present value (see DAWG tests
            // bev-6)
            // augmentMissingBindings set their value to null.
            QueryPlan.augmentMissingBindings(bindinga, bindingb);
            result.push(bindinga);
        }
    }

    return result;
};

QueryPlan.crossProductBindings = function(bindingsa, bindingsb) {
    var result = [];

    for(var i=0; i< bindingsa.length; i++) {
        var bindinga = bindingsa[i];
        for(var j=0; j<bindingsb.length; j++) {
            var bindingb = bindingsb[j];
            result.push(QueryPlan.mergeBindings(bindinga, bindingb));
        }
    }

    return result;
};

QueryPlan.unionBindings = function(bindingsa, bindingsb) {
    return bindingsa.concat(bindingsb);
};

QueryPlan.unionManyBindings = function(bindingLists) {
    var acum = [];
    for(var i=0; i<bindingLists.length; i++) {
        var bindings = bindingLists[i];
        acum = QueryPlan.unionBindings(acum, bindings);
    }

    return acum;
};

// end of ./src/js-query-engine/src/query_plan.js 
// exports
var QueryEngine = {};

//imports

QueryEngine.QueryEngine = function(params) {
    if(arguments.length != 0) {
        this.backend = params.backend;
        this.lexicon = params.lexicon;
        this.abstractQueryTree = new AbstractQueryTree.AbstractQueryTree();
        this.rdfLoader = new RDFLoader.RDFLoader(params['communication']);
        this.callbacksBackend = new Callbacks.CallbacksBackend(this);
    }
};

// Utils
QueryEngine.QueryEngine.prototype.registerNsInEnvironment = function(prologue, env) {
    var prefixes = prologue.prefixes;
    var toSave = {};
    for(var i=0; i<prefixes.length; i++) {
        var prefix = prefixes[i];
        if(prefix.token === "prefix") {
            toSave[prefix.prefix] = prefix.local;
        }
    }

    env.namespaces = toSave;
    if(prologue.base && typeof(prologue.base) === 'object') {
        env.base = prologue.base.value;
    } else {
        env.base = null;
    }
};

QueryEngine.QueryEngine.prototype.applyModifier = function(modifier, projectedBindings) {
    if(modifier == "DISTINCT") {
        var map = {};
        var result = [];
        for(var i=0; i<projectedBindings.length; i++) {
            var bindings = projectedBindings[i];
            var key = "";
         
            // if no projection variables hash is passed, all the bound
            // variable in the current bindings will be used.
            for(var p in (bindings)) {
                // hashing the object
                var obj = bindings[p];
                if(obj == null) {
                    key = key+p+'null';
                } else if(obj.token == 'literal') {
                    if(obj.value != null) {
                        key = key + obj.value;
                    }
                    if(obj.lang != null) {
                        key = key + obj.lang;
                    }
                    if(obj.type != null) {
                        key = key + obj.type;
                    }
                } else if(obj.value) {
                    key  = key + p + obj.value;
                } else {
                    key = key + p + obj;
                }
            }
         
            if(map[key] == null) {
                // this will preserve the order in projectedBindings
                result.push(bindings);
                map[key] = true;
            }
        }
        return result; 
    } else {
        return projectedBindings;
    }
};

QueryEngine.QueryEngine.prototype.applyLimitOffset = function(offset, limit, bindings) {
    if(limit == null && offset == null) {
        return bindings;
    }

    if (offset == null) {
        offset = 0;
    }

    if(limit == null) {
        limit = bindings.length;
    } else {
        limit = offset + limit;
    }

    return bindings.slice(offset, limit);
};


QueryEngine.QueryEngine.prototype.applySingleOrderBy = function(orderFilters, modifiedBindings, outEnv) {
    var acum = [];
    for(var i=0; i<orderFilters.length; i++) {
        var orderFilter = orderFilters[i];
        var results = QueryFilters.collect(orderFilter.expression, [modifiedBindings], outEnv, this);
        acum.push(results[0].value);
    }
    return {binding:modifiedBindings, value:acum};
};

QueryEngine.QueryEngine.prototype.applyOrderBy = function(order, modifiedBindings, outEnv) {
    var that = this;
    var acum = [];
    if(order != null && order.length > 0) {
        for(var i=0; i<modifiedBindings.length; i++) {
            var bindings = modifiedBindings[i];
            var results = that.applySingleOrderBy(order, bindings, outEnv);
            acum.push(results);
        }

        acum.sort(function(a,b){
            return that.compareFilteredBindings(a, b, order, outEnv);
        });

        var toReturn = [];
        for(var i=0; i<acum.length; i++) {
            toReturn.push(acum[i].binding);
        }

        return toReturn;
    } else {
        return modifiedBindings;
    }
};

QueryEngine.QueryEngine.prototype.compareFilteredBindings = function(a, b, order, env) {
    var found = false;
    var i = 0;
    while(!found) {
        if(i==a.value.length) {
            return 0;
        }
        var direction = order[i].direction;
        var filterResult;

        // unbound first
        if(a.value[i] == null && b.value[i] == null) {
            i++;
            continue;
        }else if(a.value[i] == null) {
            filterResult = {value: false};
        } else if(b.value[i] == null) {
            filterResult = {value: true};
        } else 

        // blanks
        if(a.value[i].token === 'blank' && b.value[i].token === 'blank') {
            i++;
            continue;
        } else if(a.value[i].token === 'blank') { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'blank') {
            filterResult = {value: true};        
        } else 

        // uris
        if(a.value[i].token === 'uri' && b.value[i].token === 'uri') {
            if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
                i++;
                continue;
            } else {
                filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
            }
        } else if(a.value[i].token === 'uri') { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'uri') {
            filterResult = {value: true};        
        } else 

        // simple literals
        if(a.value[i].token === 'literal' && b.value[i].token === 'literal' && a.value[i].type == null && b.value[i].type == null) {
            if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
                i++;
                continue;
            } else {
                filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
            }
        } else if(a.value[i].token === 'literal' && a.value[i].type == null) { 
            filterResult = {value: false};            
        } else if(b.value[i].token === 'literal' && b.value[i].type == null) {
            filterResult = {value: true};        
        } else 

        // literals
        if(QueryFilters.runEqualityFunction(a.value[i], b.value[i], [], this, env).value == true) {
            i++;
            continue;
        } else {
            filterResult = QueryFilters.runTotalGtFunction(a.value[i], b.value[i], []);
        }     


        // choose value for comparison based on the direction
        if(filterResult.value == true) {
            if(direction === "ASC") {
                return 1;
            } else {
                return -1;
            }
        } else {
            if(direction === "ASC") {
                return -1;
            } else {
                return 1;
            }
        }       
    }
};

QueryEngine.QueryEngine.prototype.removeDefaultGraphBindings = function(bindingsList, dataset) {
    var onlyDefaultDatasets = [];
    var namedDatasetsMap = {};
    for(var i=0; i<dataset.named.length; i++) {
        namedDatasetsMap[dataset.named[i].oid] = true;
    }
    for(i=0; i<dataset['default'].length; i++) {
        if(namedDatasetsMap[dataset['default'][i].oid] == null) {
            onlyDefaultDatasets.push(dataset['default'][i].oid);
        }
    }
    var acum = [];
    for(i=0; i<bindingsList.length; i++) {
        var bindings = bindingsList[i];
        var foundDefaultGraph = false;
        for(var p in bindings) {
            for(var j=0; j<namedDatasetsMap.length; j++) {
                if(bindings[p] === namedDatasetsMap[j]) {
                    foundDefaultGraph = true;
                    break;
                }
            }
            if(foundDefaultGraph) {
                break;
            }
        }
        if(!foundDefaultGraph) {
            acum.push(bindings);
        }
    }

    return acum;
};


QueryEngine.QueryEngine.prototype.aggregateBindings = function(projection, bindingsGroup, env) {
    var denormBindings = this.copyDenormalizedBindings(bindingsGroup, env.outCache);
    var aggregatedBindings = {};
    for(var i=0; i<projection.length; i++) {
        var aggregatedValue = QueryFilters.runAggregator(projection[i], denormBindings, this, env);
        if(projection[i].alias) {
            aggregatedBindings[projection[i].alias.value] = aggregatedValue; 
        } else {
            aggregatedBindings[projection[i].value.value] = aggregatedValue; 
        }
    }
    return(aggregatedBindings);
};


QueryEngine.QueryEngine.prototype.projectBindings = function(projection, results) {
    if(projection[0].kind === '*') {
        return results;
    } else {
        var toProject = [];
        var projectedResults = [];

        for(var i=0; i<results.length; i++) {
            var currentResult = results[i];
            var currentProjected = {};
            var shouldAdd = true;

            for(var j=0; j< projection.length; j++) {
                if(projection[j].token == 'variable' && projection[j].kind != 'aliased') {
                    currentProjected[projection[j].value.value] = currentResult[projection[j].value.value];
                } else if(projection[j].token == 'variable' && projection[j].kind == 'aliased') {
                    var ebv = QueryFilters.runFilter(projection[j].expression, currentResult, this, {blanks:{}, outCache:{}});
                    if(QueryFilters.isEbvError(ebv)) {
                        shouldAdd = false;
                        break;
                    } else {
                        currentProjected[projection[j].alias.value] = ebv;
                    }
                }
            }

            if(shouldAdd === true) {
                projectedResults.push(currentProjected);
            }
            
        }

        return projectedResults;
    }
};

QueryEngine.QueryEngine.prototype.resolveNsInEnvironment = function(prefix, env) {
    var namespaces = env.namespaces;
    return namespaces[prefix];
};


QueryEngine.QueryEngine.prototype.normalizeTerm = function(term, env, shouldIndex) {
    if(term.token === 'uri') {
        var uri = Utils.lexicalFormBaseUri(term, env);
        if(uri == null) {
            return(null);
        } else {
            if(shouldIndex) {
                return(this.lexicon.registerUri(uri));
            } else {
                return(this.lexicon.resolveUri(uri));
            }
        }

    } else if(term.token === 'literal') {
        var lexicalFormLiteral = Utils.lexicalFormLiteral(term, env);
        if(shouldIndex) {
           var oid = this.lexicon.registerLiteral(lexicalFormLiteral);
            return(oid);
        } else {
            var oid = this.lexicon.resolveLiteral(lexicalFormLiteral);
            return(oid);
        }
    } else if(term.token === 'blank') {
        var label = term.label;
        var oid = env.blanks[label];
        if( oid != null) {
            return(oid);
        } else {
            if(shouldIndex) {
                var oid = this.lexicon.registerBlank(label);
                env.blanks[label] = oid;
                return(oid);
            } else {
                var oid = this.lexicon.resolveBlank(label);
                env.blanks[label] = oid;
                return(oid);
            }
        }
    } else if(term.token === 'var') {
        return(term.value);
    } else {
          return(null);
    }
};

QueryEngine.QueryEngine.prototype.normalizeDatasets = function(datasets, outerEnv, callback) {
    var that = this;
    for(var i=0; i<datasets.length; i++) {
        var dataset = datasets[i];
        if(dataset.value === that.lexicon.defaultGraphUri) {
            dataset.oid = that.lexicon.defaultGraphOid;
        } else {
            var oid = that.normalizeTerm(dataset, outerEnv, false);      
            if(result != null) {
                dataset.oid = oid;
            } else {
                return(null);
            }
        }  
    }

    return true
};

QueryEngine.QueryEngine.prototype.normalizeQuad = function(quad, queryEnv, shouldIndex) {
    var subject    = null;
    var predicate  = null;
    var object     = null;
    var graph      = null;
    var oid;

    if(quad.graph == null) {
        graph = 0; // default graph
    } else {
        oid = this.normalizeTerm(quad.graph, queryEnv, shouldIndex)
        if(oid!=null) {
            graph = oid;
            if(shouldIndex === true)
                this.lexicon.registerGraph(oid);
        } else {
            return null;
        }
    }

    oid = this.normalizeTerm(quad.subject, queryEnv, shouldIndex);
    if(oid!=null) {
        subject = oid;
    } else {
        return null
    }

    oid = this.normalizeTerm(quad.predicate, queryEnv, shouldIndex);
    if(oid!=null) {
        predicate = oid;
    } else {
        return null
    }

    oid = this.normalizeTerm(quad.object, queryEnv, shouldIndex);
    if(oid!=null) {
        object = oid;
    } else {
        return null
    }

    return({subject:subject, 
            predicate:predicate, 
            object:object, 
            graph:graph});
};

QueryEngine.QueryEngine.prototype.denormalizeBindingsList = function(bindingsList, envOut) {
    var results = [];

    for(var i=0; i<bindingsList.length; i++) {
        result = this.denormalizeBindings(bindingsList[i], envOut)
        results.push(result);
    }
    return(results);
};

/**
 * Receives a bindings map (var -> oid) and an out cache (oid -> value)
 * returns a bindings map (var -> value) storing in cache all the missing values for oids
 *
 * This is required just to save lookups when final results are generated.
 */
QueryEngine.QueryEngine.prototype.copyDenormalizedBindings = function(bindingsList, out, callback) {
    var denormList = [];
    for(var i=0; i<bindingsList.length; i++) {
        var denorm = {};
        var bindings = bindingsList[i];
        var variables = Utils.keys(bindings);
        for(var j=0; j<variables.length; j++) {
            var oid = bindings[variables[j]];
            if(oid == null) {
                // this can be null, e.g. union different variables (check SPARQL recommendation examples UNION)
                denorm[variables[j]] = null;
            } else if(typeof(oid) === 'object') {
                // the binding is already denormalized, this can happen for example because the value of the
                // binding is the result of the aggregation of other bindings in a GROUP clause
                denorm[variables[j]] = oid;
            } else {
                var inOut = out[oid];
                if(inOut!= null) {
                    denorm[variables[j]] = inOut;
                } else {                    
                    var val = this.lexicon.retrieve(oid);
                    out[oid] = val;
                    denorm[variables[j]] = val;
                }
            }
        }
        denormList.push(denorm);
    }
    return denormList;
};

QueryEngine.QueryEngine.prototype.denormalizeBindings = function(bindings, envOut, callback) {
    var variables = Utils.keys(bindings);

    for(var i=0; i<variables.length; i++) {
        var oid = bindings[variables[i]];
        if(oid == null) {
            // this can be null, e.g. union different variables (check SPARQL recommendation examples UNION)
            bindings[variables[i]] = null;
        } else {
            if(envOut[oid] != null) {
                bindings[variables[i]] = envOut[oid];
            } else {
                var val = this.lexicon.retrieve(oid)
                bindings[variables[i]] = val;
            }
        }
    }
    return bindings;
};

// Queries execution

QueryEngine.QueryEngine.prototype.execute = function(queryString, callback, defaultDataset, namedDataset){
//    try{
        queryString = Utils.normalizeUnicodeLiterals(queryString);

        var syntaxTree = this.abstractQueryTree.parseQueryString(queryString);
        if(syntaxTree == null) {
            callback(false,"Error parsing query string");
        } else {
            if(syntaxTree.token === 'query' && syntaxTree.kind == 'update')  {
                this.callbacksBackend.startGraphModification();
                var that = this;
                this.executeUpdate(syntaxTree, function(success, result){
                    if(success) {
                        that.callbacksBackend.endGraphModification(function(){
                            callback(success, result);
                        });
                    } else {
                        that.callbacksBackend.cancelGraphModification();
                        callback(success, result);
                    }
                });
            } else if(syntaxTree.token === 'query' && syntaxTree.kind == 'query') {
                this.executeQuery(syntaxTree, callback, defaultDataset, namedDataset);
            }
        }
//    } catch(e) {
//        if(e.name && e.name==='SyntaxError') {
//            callback(false, "Syntax error: \nmessage:"+e.message+"\nline "+e.line+", column:"+e.column);
//        } else {
//            callback(false, "Query execution error");
//        }
//    }
};

// Retrieval queries

QueryEngine.QueryEngine.prototype.executeQuery = function(syntaxTree, callback, defaultDataset, namedDataset) {
    var prologue = syntaxTree.prologue;
    var units = syntaxTree.units;
    var that = this;

    // environment for the operation -> base ns, declared ns, etc.
    var queryEnv = {blanks:{}, outCache:{}};
    this.registerNsInEnvironment(prologue, queryEnv);

    // retrieval queries can only have 1 executable unit
    var aqt = that.abstractQueryTree.parseExecutableUnit(units[0]);

    // can be anything else but a select???
    if(aqt.kind === 'select') {
      this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
          if(success) {
              if(typeof(result) === 'object' && result.denorm === true) {
                  callback(true, result['bindings']);
              } else {
                  var result = that.denormalizeBindingsList(result, queryEnv.outCache);
                  if(result != null) {                        
                      callback(true, result);
                  } else {
                      callback(false, result);
                  }
              }
          } else {
              callback(false, result);
          }
      });
    } else if(aqt.kind === 'ask') {
        aqt.projection = [{"token": "variable", "kind": "*"}];
        this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
            if(success) {
                if(success) {              
                    if(result.length>0) {
                        callback(true, true);
                    } else {
                        callback(true, false);
                    }
                } else {
                    callback(false, result);
                }
            } else {
                callback(false, result);
            }
        });
    } else if(aqt.kind === 'construct') {
        aqt.projection = [{"token": "variable", "kind": "*"}];
        that = this;
        this.executeSelect(aqt, queryEnv, defaultDataset, namedDataset, function(success, result){
            if(success) {
                if(success) {              
                    var result = that.denormalizeBindingsList(result, queryEnv.outCache);
                    if(result != null) { 
                        var graph = new RDFJSInterface.Graph();
                            
                        // CONSTRUCT WHERE {} case
                        if(aqt.template == null) {
                            aqt.template = {triplesContext: aqt.pattern};
                        }

                        var blankIdCounter = 1;
                        for(var i=0; i<result.length; i++) {
                            var bindings = result[i];
                            var blankMap = {};
                            for(var j=0; j<aqt.template.triplesContext.length; j++) {
                                // fresh IDs for blank nodes in the construct template
                                var components = ['subject', 'predicate', 'object'];
                                var tripleTemplate = aqt.template.triplesContext[j];                                    
                                for(var p=0; p<components.length; p++) {
                                    var component = components[p];
                                    if(tripleTemplate[component].token === 'blank') {
                                        if(blankMap[tripleTemplate[component].value] != null) {
                                            tripleTemplate[component].value = blankMap[tripleTemplate[component].value];
                                        } else {
                                            var blankId = "_:b"+blankIdCounter;
                                            blankIdCounter++;
                                            blankMap[tripleTemplate[component].value] = blankId;
                                            tripleTemplate[component].value = blankId;
                                        }
                                    }
                                }
                                var s = RDFJSInterface.buildRDFResource(tripleTemplate.subject,bindings,that,queryEnv);
                                var p = RDFJSInterface.buildRDFResource(tripleTemplate.predicate,bindings,that,queryEnv);
                                var o = RDFJSInterface.buildRDFResource(tripleTemplate.object,bindings,that,queryEnv);
                                if(s!=null && p!=null && o!=null) {
                                    var triple = new RDFJSInterface.Triple(s,p,o);
                                    graph.add(triple);
                                    //} else {
                                    //    return callback(false, "Error creating output graph")
                                }
                            }
                        }
                        callback(true,graph);
                    } else {
                        callback(false, result);
                    }
                } else {
                    callback(false, result);
                }
            } else {
                callback(false, result);
            }
        });
    }
};


// Select queries

QueryEngine.QueryEngine.prototype.executeSelect = function(unit, env, defaultDataset, namedDataset, callback) {
    if(unit.kind === "select" || unit.kind === "ask" || unit.kind === "construct" || unit.kind === "modify") {
        var projection = unit.projection;
        var dataset    = unit.dataset;
        var modifier   = unit.modifier;
        var limit      = unit.limit;
        var offset     = unit.offset;
        var order      = unit.order;
        var that = this;

        if(defaultDataset != null || namedDataset != null) {
            dataset['default'] = defaultDataset || [];
            dataset.named   = namedDataset || [];
        } 

        if(dataset['default'] != null && dataset['default'].length === 0 && dataset.named !=null && dataset.named.length === 0) {
            // We add the default graph to the default merged graph
            dataset['default'].push(this.lexicon.defaultGraphUriTerm);
        }

        if (that.normalizeDatasets(dataset['default'].concat(dataset.named), env) != null) {
            var result = that.executeSelectUnit(projection, dataset, unit.pattern, env);
            if(result != null) {
                // detect single group
                if(unit.group!=null && unit.group === "") {
                    var foundUniqueGroup = false;
                    for(var i=0; i<unit.projection.length; i++) {
                        if(unit.projection[i].expression!=null && unit.projection[i].expression.expressionType === 'aggregate') {
                            foundUniqueGroup = true;
                            break;
                        }
                    }
                    if(foundUniqueGroup === true) {
                        unit.group = 'singleGroup';
                    }
                }
                if(unit.group && unit.group != "") {
                    if(that.checkGroupSemantics(unit.group,projection)) {
                        var groupedBindings = that.groupSolution(result, unit.group, env);
                             
                        var aggregatedBindings = [];
                        var foundError = false;
                            
                        for(var i=0; i<groupedBindings.length; i++) {
                            var resultingBindings = that.aggregateBindings(projection, groupedBindings[i], env)
                            aggregatedBindings.push(resultingBindings);
                        }
                        callback(true, {'bindings': aggregatedBindings, 'denorm':true});
                    } else {
                        callback(false, "Incompatible Group and Projection variables");
                    }
                } else {
                    var orderedBindings = that.applyOrderBy(order, result, env)
                    var projectedBindings = that.projectBindings(projection, orderedBindings);
                    modifiedBindings = that.applyModifier(modifier, projectedBindings);
                    var limitedBindings  = that.applyLimitOffset(offset, limit, modifiedBindings);
                    filteredBindings = that.removeDefaultGraphBindings(limitedBindings, dataset);
                    
                    callback(true, filteredBindings);
                }
                
            } else { // fail selectUnit
                console.log("ERROR selectUnit");
                callback(false, result);
            }
        } else { // fail  normalizaing datasets
            console.log("ERROR normalizing");
            callback(false,results);
        }
    } else {
        callback(false,"Cannot execute " + unit.kind + " query as a select query");
    }
};


QueryEngine.QueryEngine.prototype.groupSolution = function(bindings, group, queryEnv){
    var order = [];
    var filteredBindings = [];
    var initialized = false;
    var that = this;
    if(group === 'singleGroup') {
        return [bindings];
    } else {
        for(var i=0; i<bindings.length; i++) {
            var outFloop = arguments.callee;
            var currentBindings = bindings[i];
            var mustAddBindings = true;

            /**
             * In this loop, we iterate through all the group clauses and tranform the current bindings
             * according to the group by clauses.
             * If it is the first iteration we also save in a different array the order for the 
             * grouped variables that will be used later to build the final groups
             */
            for(var j=0; j<group.length; j++) {
                var floop = arguments.callee;
                var currentOrderClause = group[j];
                var orderVariable = null;

                if(currentOrderClause.token === 'var') {
                    orderVariable = currentOrderClause.value;

                    if(initialized == false) {
                        order.push(orderVariable);
                    }

                } else if(currentOrderClause.token === 'aliased_expression') {
                    orderVariable = currentOrderClause.alias.value;
                    if(initialized == false) {
                        order.push(orderVariable);
                    }

                    if(currentOrderClause.expression.primaryexpression === 'var') {
                        currentBindings[currentOrderClause.alias.value] = currentBindings[currentOrderClause.expression.value.value];
                    } else {
                        var denormBindings = this.copyDenormalizedBindings([currentBindings], queryEnv.outCache);
                        var filterResultEbv = QueryFilters.runFilter(currentOrderClause.expression, denormBindings[0], that, queryEnv);
                        if(!QueryFilters.isEbvError(filterResultEbv)) {
                            if(filterResultEbv.value != null) {
                                filterResultEbv.value = ""+filterResultEbv.value;
                            }
                            currentBindings[currentOrderClause.alias.value]= filterResultEbv;
                        } else {
                            mustAddBindings = false;
                        }
                    }
                } else {
                    // In this case, we create an additional variable in the binding to hold the group variable value
                    var denormBindings = that.copyDenormalizedBindings([currentBindings], queryEnv.outCache);
                    var filterResultEbv = QueryFilters.runFilter(currentOrderClause, denormBindings[0], that, queryEnv);
                    if(!QueryFilters.isEbvError(filterResultEbv)) {
                        currentBindings["groupCondition"+env._i] = filterResultEbv;
                        orderVariable = "groupCondition"+env._i;
                        if(initialized == false) {
                            order.push(orderVariable);
                        }
                        
                    } else {
                        mustAddBindings = false;
                    }
                         
                }
                
            }
            if(initialized == false) {
                initialized = true;
            } 
            if(mustAddBindings === true) {
                filteredBindings.push(currentBindings);
            }
        }
        /**
         * After processing all the bindings, we build the group using the
         * information stored about the order of the group variables.
         */
        var dups = {};
        var groupMap = {};
        var groupCounter = 0;
        for(var i=0; i<filteredBindings.length; i++) {
            var currentTransformedBinding = filteredBindings[i];
            var key = "";
            for(var j=0; j<order.length; j++) {
                var maybeObject = currentTransformedBinding[order[j]];
                if(typeof(maybeObject) === 'object') {
                    key = key + maybeObject.value;
                } else {
                    key = key + maybeObject;
                }
            }

            if(dups[key] == null) {
                //currentTransformedBinding["__group__"] = groupCounter; 
                groupMap[key] = groupCounter;
                dups[key] = [currentTransformedBinding];
                //groupCounter++
            } else {
                //currentTransformedBinding["__group__"] = dups[key][0]["__group__"]; 
                dups[key].push(currentTransformedBinding);
            }
        }

        // The final result is an array of arrays with all the groups
        var groups = [];
            
        for(var k in dups) {
            groups.push(dups[k]);
        }

        return groups;
    };
};


/**
 * Here, all the constructions of the SPARQL algebra are handled
 */
QueryEngine.QueryEngine.prototype.executeSelectUnit = function(projection, dataset, pattern, env) {
    if(pattern.kind === "BGP") {
        return this.executeAndBGP(projection, dataset, pattern, env);
    } else if(pattern.kind === "UNION") {
        return this.executeUNION(projection, dataset, pattern.value, env);            
    } else if(pattern.kind === "JOIN") {
        return this.executeJOIN(projection, dataset, pattern, env);            
    } else if(pattern.kind === "LEFT_JOIN") {
        return this.executeLEFT_JOIN(projection, dataset, pattern, env);            
    } else if(pattern.kind === "FILTER") {
        // Some components may have the filter inside the unit
        var results = this.executeSelectUnit(projection, dataset, pattern.value, env);
        if(results != null) {
            results = QueryFilters.checkFilters(pattern, results, false, env, this);
            return results;
        } else {
            return [];
        }
    } else if(pattern.kind === "EMPTY_PATTERN") {
        // as an example of this case  check DAWG test case: algebra/filter-nested-2
        return [];
    } else {
        console.log("Cannot execute query pattern " + pattern.kind + ". Not implemented yet.");
        return null;
    }
};

QueryEngine.QueryEngine.prototype.executeUNION = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns[0];
    var setQuery2 = patterns[1];
    var set1 = null;
    var set2 = null;

    if(patterns.length != 2) {
        throw("SPARQL algebra UNION with more than two components");
    }

    var that = this;
    var sets = [];

    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1==null) {
        return null;
    }
    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2==null) {
        return null;
    }

    var result = QueryPlan.unionBindings(set1, set2);
    result = QueryFilters.checkFilters(patterns, result, false, env, that);
    return result;
};

QueryEngine.QueryEngine.prototype.executeAndBGP = function(projection, dataset, patterns, env) {
    var that = this;
    var result = QueryPlan.executeAndBGPs(patterns.value, dataset, this, env);
    if(result!=null) {
        return QueryFilters.checkFilters(patterns, result, false, env, that);
    } else {
        return null;
    }
};

QueryEngine.QueryEngine.prototype.executeLEFT_JOIN = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns.lvalue;
    var setQuery2 = patterns.rvalue;

    var set1 = null;
    var set2 = null;

    var that = this;
    var sets = [];

    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1==null) {
        return null;
    }
     
    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2==null) {
        return null;
    }

    
    var result = QueryPlan.leftOuterJoinBindings(set1, set2);
    //console.log("SETS:")
    //console.log(set1)
    //console.log(set2)
    //console.log("---")
    //console.log(result);

    var bindings = QueryFilters.checkFilters(patterns, result, true, env, that);
    //console.log("---")
    //console.log(bindings)
    //console.log("\r\n")
    
    if(set1.length>1 && set2.length>1) {
            var vars = [];
            var vars1 = {};
            for(var p in set1[0]) {
                vars1[p] = true;
            }
            for(p in set2[0]) {
                if(vars1[p] != true) {
                    vars.push(p);
                }
            }
            acum = [];
            duplicates = {};
            for(var i=0; i<bindings.length; i++) {
                if(bindings[i]["__nullify__"] === true) {
                    for(var j=0; j<vars.length; j++) {
                        bindings[i]["bindings"][vars[j]] = null;
                    }                            
                    var idx = [];
                    var idxColl = [];
                    for(var p in bindings[i]["bindings"]) {
                        if(bindings[i]["bindings"][p] != null) {
                            idx.push(p+bindings[i]["bindings"][p]);
                            idx.sort();
                            idxColl.push(idx.join(""));
                        }
                    }
                    // reject duplicates -> (set union)
                    if(duplicates[idx.join("")]==null) {
                        for(j=0; j<idxColl.length; j++) {
                            //console.log(" - "+idxColl[j])
                            duplicates[idxColl[j]] = true;
                        }
                        ////duplicates[idx.join("")]= true
                        acum.push(bindings[i]["bindings"]);
                    }
                } else {
                    acum.push(bindings[i]);
                    var idx = [];
                    var idxColl = [];
                    for(var p in bindings[i]) {
                        idx.push(p+bindings[i][p]);
                        idx.sort();
                        //console.log(idx.join("") + " -> ok");
                        duplicates[idx.join("")] = true;
                    }

                }
            }
            
        return acum;
    } else {
        return bindings;
    }
};

QueryEngine.QueryEngine.prototype.executeJOIN = function(projection, dataset, patterns, env) {
    var setQuery1 = patterns.lvalue;
    var setQuery2 = patterns.rvalue;
    var set1 = null;
    var set2 = null;

    var that = this;
    var sets = [];


    set1 = that.executeSelectUnit(projection, dataset, setQuery1, env);
    if(set1 == null) {
        return null;
    }

    set2 = that.executeSelectUnit(projection, dataset, setQuery2, env);
    if(set2 == null) {
        return null;
    }

    var result = QueryPlan.joinBindings(set1, set2);

    result = QueryFilters.checkFilters(patterns, result, false, env, that);
    return result;
};


QueryEngine.QueryEngine.prototype.rangeQuery = function(quad, queryEnv) {
    var that = this;
    //console.log("BEFORE:");
    //console.log("QUAD:");
    //console.log(quad);
    var key = that.normalizeQuad(quad, queryEnv, false)
    if(key != null) {
        //console.log("RANGE QUERY:")
        //console.log(success);
        //console.log(key);
        //console.log(new QuadIndexCommon.Pattern(key));
        //console.log(key);
        var quads = that.backend.range(new QuadIndexCommon.Pattern(key));
        //console.log("retrieved");
        //console.log(quads)
        if(quads == null || quads.length == 0) {
            return [];
        } else {
            return quads;
        }
    } else {
        console.log("ERROR normalizing quad");
        return null;
    }
};

// Update queries

QueryEngine.QueryEngine.prototype.executeUpdate = function(syntaxTree, callback) {
    var prologue = syntaxTree.prologue;
    var units = syntaxTree.units;
    var that = this;

    // environment for the operation -> base ns, declared ns, etc.
    var queryEnv = {blanks:{}, outCache:{}};
    this.registerNsInEnvironment(prologue, queryEnv);
    for(var i=0; i<units.length; i++) {

        var aqt = that.abstractQueryTree.parseExecutableUnit(units[i]);
        if(aqt.kind === 'insertdata') {
            for(var j=0; j<aqt.quads.length; j++) {
                var quad = aqt.quads[j];
                var result = that._executeQuadInsert(quad, queryEnv);
                if(result !== true) {
                    return callback(false, error);
                }
            }
            callback(true);
        } else if(aqt.kind === 'deletedata') {
            for(var j=0; j<aqt.quads.length; j++) {
                var quad = aqt.quads[j];
                this._executeQuadDelete(quad, queryEnv);
            }
            callback(true);
        } else if(aqt.kind === 'modify') {
            this._executeModifyQuery(aqt, queryEnv, callback);
        } else if(aqt.kind === 'create') {
            callback(true);
        } else if(aqt.kind === 'load') {
            var graph = {'uri': Utils.lexicalFormBaseUri(aqt.sourceGraph, queryEnv)};
            if(aqt.destinyGraph != null) {
                graph = {'uri': Utils.lexicalFormBaseUri(aqt.destinyGraph, queryEnv)};
            }
            var that = this;
            this.rdfLoader.load(aqt.sourceGraph.value, graph, function(success, result){
                if(success == false) {
                    console.log("Error loading graph");
                    console.log(result);
                } else {
                    var result = that.batchLoad(result);
                    callback(result!=null, result||"error batch loading quads");
                }
            });
        } else if(aqt.kind === 'drop') {
            this._executeClearGraph(aqt.destinyGraph, queryEnv, callback);
        } else if(aqt.kind === 'clear') {
            this._executeClearGraph(aqt.destinyGraph, queryEnv, callback);
        } else {
            throw new Error("not supported execution unit");
        }
    }
};

QueryEngine.QueryEngine.prototype.batchLoad = function(quads, callback) {
    var subject    = null;
    var predicate  = null;
    var object     = null;
    var graph      = null;
    var oldLimit = Utils.stackCounterLimit;
    var counter = 0;
    var success = true;

    for(var i=0; i<quads.length; i++) {

        var quad = quads[i];

            // subject
            if(quad.subject['uri'] || quad.subject.token === 'uri') {
                var oid = this.lexicon.registerUri(quad.subject.uri || quad.subject.value);
                subject = oid;
            } else if(quad.subject['literal'] || quad.subject.token === 'literal') {
                var oid = this.lexicon.registerLiteral(quad.subject.literal || quad.subject.value);
                subject = oid;                    
            } else {
                var oid = this.lexicon.registerBlank(quad.subject.blank || quad.subject.value)
                subject = oid;
            }

            // predicate
            if(quad.predicate['uri'] || quad.predicate.token === 'uri') {
                var oid = this.lexicon.registerUri(quad.predicate.uri || quad.predicate.value);
                predicate = oid;
            } else if(quad.predicate['literal'] || quad.predicate.token === 'literal') {
                var oid = this.lexicon.registerLiteral(quad.predicate.literal || quad.predicate.value);
                predicate = oid;                    
            } else {
                var oid = this.lexicon.registerBlank(quad.predicate.blank || quad.predicate.value)
                predicate = oid;
            }

            // object
            if(quad.object['uri'] || quad.object.token === 'uri') {
                var oid = this.lexicon.registerUri(quad.object.uri || quad.object.value);
                object = oid;
            } else if(quad.object['literal'] || quad.object.token === 'literal') {
                var oid = this.lexicon.registerLiteral(quad.object.literal || quad.object.value);
                object = oid;                    
            } else {
                var oid = this.lexicon.registerBlank(quad.object.blank || quad.object.value)
                object = oid;
            }

            // graph
            if(quad.graph['uri'] || quad.graph.token === 'uri') {
                var oid = this.lexicon.registerUri(quad.graph.uri || quad.graph.value);
                this.lexicon.registerGraph(oid);
                graph = oid;

            } else if(quad.graph['literal'] || quad.graph.token === 'literal') {
                var oid = this.lexicon.registerLiteral(quad.graph.literal || quad.graph.value);
                graph = oid;                    
            } else {
                var oid = this.lexicon.registerBlank(quad.graph.blank || quad.graph.value)
                graph = oid;
            }


            var quad = {subject: subject, predicate:predicate, object:object, graph: graph};
            var key = new QuadIndexCommon.NodeKey(quad);
              
            var result = this.backend.index(key)
            if(result == true){
                counter = counter + 1;
            } else {
                success = false;
                break;
            }

    }

    if(success) {
        if(callback)
            callback(true, counter);
        return counter;
    } else {
        if(callback)
            callback(false, null);

        return null;
    }
};

// Low level operations for update queries

QueryEngine.QueryEngine.prototype._executeModifyQuery = function(aqt, queryEnv, callback) {
    var that = this;
    var querySuccess = true;
    var error = null;
    var bindings = null;
    var components = ['subject', 'predicate', 'object', 'graph'];

    aqt.insert = aqt.insert == null ? [] : aqt.insert;
    aqt['delete'] = aqt['delete'] == null ? [] : aqt['delete'];

    Utils.seq(
        function(k) {
            // select query

            var defaultGraph = [];
            var namedGraph = [];

            if(aqt['with'] != null) {
                defaultGraph.push(aqt['with']);
            }

            if(aqt['using'] != null) {
                namedGraph = [];
                for(var i=0; i<aqt['using'].length; i++) {
                    var usingGraph = aqt['using'][i];
                    if(usingGraph.kind === 'named') {
                        namedGraph.push(usingGraph.uri);
                    } else {
                        defaultGraph.push(usingGraph.uri);
                    }
                }
            }

            aqt.dataset = {};
            aqt.projection = [{"token": "variable", "kind": "*"}];

            that.executeSelect(aqt, queryEnv, defaultGraph, namedGraph, function(success, result) {                
                if(success) {                    
                    var result = that.denormalizeBindingsList(result, queryEnv.outCache);
                    if(result!=null) {
                        bindings = result;
                    } else {
                        querySuccess = false;
                    }
                    return k();
                } else {
                    querySuccess = false;
                    return k();
                }
            });
        },function(k) {
            // delete query

            var defaultGraph = aqt['with'];
            if(querySuccess) {
                var quads = [];
                for(var i=0; i<aqt['delete'].length; i++) {
                    var src = aqt['delete'][i];

                    for(var j=0; j<bindings.length; j++) {
                        var quad = {};
                        var binding = bindings[j];

                        for(var c=0; c<components.length; c++) {
                            var component = components[c];
                            if(component == 'graph' && src[component] == null) {
                                quad['graph'] = defaultGraph;
                            } else if(src[component].token === 'var') {
                                quad[component] = binding[src[component].value];
                            } else {
                                quad[component] = src[component];
                            }
                        }

                        quads.push(quad);
                    }
                }

                var quad;
                for(var j=0; j<quads.length; j++) {
                    quad = quads[j];
                    that._executeQuadDelete(quad, queryEnv);
                }
                k();
            } else {
                k();
            }
        },function(k) {
            // insert query
            var defaultGraph = aqt['with'];

            if(querySuccess) {
                var quads = [];
                for(var i=0; i<aqt.insert.length; i++) {
                    var src = aqt.insert[i];

                    for(var j=0; j<bindings.length; j++) {
                        var quad = {};
                        var binding = bindings[j];

                        for(var c=0; c<components.length; c++) {
                            var component = components[c];
                            if(component == 'graph' && src[component] == null) {
                                quad['graph'] = defaultGraph;
                            } else if(src[component].token === 'var') {
                                quad[component] = binding[src[component].value];
                            } else {
                                quad[component] = src[component];
                            }
                        }

                        quads.push(quad);
                    }
                }

                for(var i=0; i<quads.length; i++) {
                    var quad = quads[i];
                    that._executeQuadInsert(quad, queryEnv);
                }

                k();
            } else {
                k();
            }
        }
    )(function(){
        callback(querySuccess);
    });
};

QueryEngine.QueryEngine.prototype._executeQuadInsert = function(quad, queryEnv) {
    var that = this;
    var normalized = this.normalizeQuad(quad, queryEnv, true);
    if(normalized != null) {
        var key = new QuadIndexCommon.NodeKey(normalized);
        var result = that.backend.search(key);
        if(result){
            return(result);
        } else {
            var result = that.backend.index(key);
            if(result == true){
                that.callbacksBackend.nextGraphModification(Callbacks.added, [quad, normalized]);
                return true;
            } else {
                console.log("ERROR inserting quad");
                return false;
            }
        }
    } else {
        console.log("ERROR normalizing quad");
        return false;
    }
};

QueryEngine.QueryEngine.prototype._executeQuadDelete = function(quad, queryEnv) {
    var that = this;
    var normalized = this.normalizeQuad(quad, queryEnv, false);
    if(normalized != null) {
        var key = new QuadIndexCommon.NodeKey(normalized);
        that.backend['delete'](key);
        var result = that.lexicon.unregister(quad, key);
        if(result == true){
            that.callbacksBackend.nextGraphModification(Callbacks['deleted'], [quad, normalized]);
            return true;
        } else {
            console.log("ERROR unregistering quad");
            return false;
        }
    } else {
        console.log("ERROR normalizing quad");
        return false;
    }
};

QueryEngine.QueryEngine.prototype._executeClearGraph = function(destinyGraph, queryEnv, callback) {
    if(destinyGraph === 'default') {
        this.execute("DELETE { ?s ?p ?o } WHERE { ?s ?p ?o }", callback);
    } else if(destinyGraph === 'named') {
        var that = this;
        var graphs = this.lexicon.registeredGraphs(true);
        if(graphs!=null) {
            var foundErrorDeleting = false;
            Utils.repeat(0, graphs.length,function(k,env) {
                var graph = graphs[env._i];
                var floop = arguments.callee;
                if(!foundErrorDeleting) {
                    that.execute("DELETE { GRAPH <"+graph+"> { ?s ?p ?o } } WHERE { GRAPH <"+graph+"> { ?s ?p ?o } }", function(success, results){
                        foundErrorDeleting = !success;
                        k(floop, env);
                    });
                } else {
                    k(floop, env);
                }
            }, function(env) {
                callback(!foundErrorDeleting);
            });
        } else {
            callback(false, "Error deleting named graphs");
        }
    } else if(destinyGraph === 'all') {
        var that = this;
        this.execute("CLEAR DEFAULT", function(success, result) {
            if(success) {
                that.execute("CLEAR NAMED", callback);
            } else {
                callback(false,result);
            }
        });
    } else {
        // destinyGraph is an URI
        if(destinyGraph.token == 'uri') {
            var graphUri = Utils.lexicalFormBaseUri(destinyGraph,queryEnv);
            if(graphUri != null) {
                this.execute("DELETE { GRAPH <"+graphUri+"> { ?s ?p ?o } } WHERE { GRAPH <"+graphUri+"> { ?s ?p ?o } }", callback);
            } else {
                callback(false, "wrong graph URI");
            }
        } else {
            callback(false, "wrong graph URI");
        }
    }
};

QueryEngine.QueryEngine.prototype.checkGroupSemantics = function(groupVars, projectionVars) {
    if(groupVars === 'singleGroup') {
        return true;        
    }

    var projection = {};

    for(var i=0; i<groupVars.length; i++) {
        var groupVar = groupVars[i];
        if(groupVar.token === 'var') {
            projection[groupVar.value] = true;
        } else if(groupVar.token === 'aliased_expression') {
            projection[groupVar.alias.value] = true;
        }
    }

    for(i=0; i<projectionVars.length; i++) {
        var projectionVar = projectionVars[i];
        if(projectionVar.kind === 'var') {
            if(projection[projectionVar.value.value] == null) {
                return false;
            }
        } else if(projectionVar.kind === 'aliased' && 
                  projectionVar.expression &&
                  projectionVar.expression.primaryexpression === 'var') {
            if(projection[projectionVar.expression.value.value] == null) {
                return false;
            }
        }
    }

    return true;
};

// end of ./src/js-query-engine/src/query_engine.js 
// exports
var Callbacks = {};

//imports


Callbacks.ANYTHING = {'token': 'var', 
                      'value': '_'};

Callbacks.added = 'added';
Callbacks.deleted = 'deleted';
Callbacks.eventsFlushed = 'eventsFlushed';

Callbacks.CallbacksBackend = function() {
    this.aqt = new AbstractQueryTree.AbstractQueryTree();
    this.engine = arguments[0];
    this.indexMap = {};
    this.observersMap = {};
    this.queriesIndexMap = {};
    this.emptyNotificationsMap = {};
    this.queriesList = [];
    this.pendingQueries = [];
    this.matchedQueries = [];
    this.updateInProgress = null;
    this.indices = ['SPOG', 'GP', 'OGS', 'POG', 'GSP', 'OS'];
    this.componentOrders = {
        SPOG: ['subject', 'predicate', 'object', 'graph'],
        GP: ['graph', 'predicate', 'subject', 'object'],
        OGS: ['object', 'graph', 'subject', 'predicate'],
        POG: ['predicate', 'object', 'graph', 'subject'],
        GSP: ['graph', 'subject', 'predicate', 'object'],
        OS: ['object', 'subject', 'predicate', 'graph']
    };

    this.callbackCounter = 0;
    this.callbacksMap = {};
    this.callbacksInverseMap = {};

    this.queryCounter = 0;
    this.queriesMap = {};
    this.queriesCallbacksMap = {};
    this.queriesInverseMap = {};

    for(var i=0; i<this.indices.length; i++) {
        var indexKey = this.indices[i];
        this.indexMap[indexKey] = {};
        this.queriesIndexMap[indexKey] = {};
    };
};

Callbacks.CallbacksBackend.prototype.startGraphModification = function() {
    this.pendingQueries = [].concat(this.queriesList);
    this.matchedQueries = [];

    var added = Callbacks['added'];
    var deleted = Callbacks['deleted'];
    if(this.updateInProgress == null) {
        this.updateInProgress = {added: [], deleted: []};
    }
};

Callbacks.CallbacksBackend.prototype.nextGraphModification = function(event, quad) {
    this.updateInProgress[event].push(quad);
};

Callbacks.CallbacksBackend.prototype.endGraphModification = function(callback) {
    var that = this;
    if(this.updateInProgress != null) {
        var tmp = that.updateInProgress;
        that.updateInProgress = null;
        this.sendNotification(Callbacks['deleted'], tmp[Callbacks['deleted']],function(){
            that.sendNotification(Callbacks['added'], tmp[Callbacks['added']], function(){
                that.sendEmptyNotification(Callbacks['eventsFlushed'], null, function(){
                    that.dispatchQueries(function(){
                        callback(true);
                    });
                });
            });
        });
    } else {
        callback(true);
    }
};

Callbacks.CallbacksBackend.prototype.cancelGraphModification = function() {
    this.updateInProgress = null;
};

Callbacks.CallbacksBackend.prototype.sendNotification = function(event, quadsPairs, doneCallback) {
    var notificationsMap = {};
    for(var i=0; i<quadsPairs.length; i++) {
        var quadPair = quadsPairs[i];
        for(var indexKey in this.indexMap) {
            var index = this.indexMap[indexKey];
            var order = this.componentOrders[indexKey];
            this._searchCallbacksInIndex(index, order, event, quadPair, notificationsMap);
            if(this.pendingQueries.length != 0) {
                index = this.queriesIndexMap[indexKey];
                this._searchQueriesInIndex(index, order, quadPair);
            }
        }
    }

    this.dispatchNotifications(notificationsMap);

    if(doneCallback != null)
        doneCallback(true);
};

Callbacks.CallbacksBackend.prototype.sendEmptyNotification = function(event, value, doneCallback) {
    var callbacks = this.emptyNotificationsMap[event] || [];
    for(var i=0; i<callbacks.length; i++) {
        callbacks[i](event, value);
    }
    doneCallback();
};

Callbacks.CallbacksBackend.prototype.dispatchNotifications = function(notificationsMap) {
    for(var callbackId in notificationsMap) {
        var callback = this.callbacksMap[callbackId];
        var deleted = notificationsMap[callbackId][Callbacks['deleted']];
        if(deleted!=null) {
            callback(Callbacks['deleted'],deleted);
        }
        for(var event in notificationsMap[callbackId]) {
            if(event!=Callbacks['deleted']) {
                callback(event, notificationsMap[callbackId][event]);
            }
        }
    }
};

Callbacks.CallbacksBackend.prototype._searchCallbacksInIndex = function(index, order, event, quadPair, notificationsMap) {
    var quadPairNomalized = quadPair[1];
    var quadPair = quadPair[0];

    for(var i=0; i<(order.length+1); i++) {
        var matched = index['_'] || [];
        
        var filteredIds = [];
        for(var j=0; j<matched.length; j++) {
            var callbackId = matched[j];
            if(this.callbacksMap[callbackId] != null) {
                notificationsMap[callbackId] = notificationsMap[callbackId] || {};
                notificationsMap[callbackId][event] = notificationsMap[callbackId][event] || [];
                notificationsMap[callbackId][event].push(quadPair);
                filteredIds.push(callbackId);
            }
        }
        index['_'] = filteredIds;
        var component = order[i];
        if(index[''+quadPairNomalized[component]] != null) {
            index = index[''+quadPairNomalized[component]];
        } else {
            break;
        }
    }
};

Callbacks.CallbacksBackend.prototype.subscribeEmpty = function(event, callback) {
    var callbacks = this.emptyNotificationsMap[event] || [];
    callbacks.push(callback);
    this.emptyNotificationsMap[event] = callbacks;
};

Callbacks.CallbacksBackend.prototype.unsubscribeEmpty = function(event, callback) {
    var callbacks = this.emptyNotificationsMap[event];
    if(callbacks != null) {
        callbacks = Utils.remove(callbacks, callback);
    }
    this.emptyNotificationsMap[event] = callbacks;
};

Callbacks.CallbacksBackend.prototype.subscribe = function(s,p,o,g,callback, doneCallback) {
    var quad = this._tokenizeComponents(s,p,o,g);
    var queryEnv = {blanks:{}, outCache:{}};
    var that = this;
    var normalized = this.engine.normalizeQuad(quad, queryEnv, true);
    var pattern =  new QuadIndexCommon.Pattern(normalized);        
    var indexKey = that._indexForPattern(pattern);
    var indexOrder = that.componentOrders[indexKey];
    var index = that.indexMap[indexKey];
    for(var i=0; i<indexOrder.length; i++) {
        var component = indexOrder[i];
        var quadValue = normalized[component];
        if(quadValue === '_') {
            if(index['_'] == null) {
                index['_'] = [];
            }
            that.callbackCounter++;
            index['_'].push(that.callbackCounter);
            that.callbacksMap[that.callbackCounter] = callback;
            that.callbacksInverseMap[callback] = that.callbackCounter;
            break;
        } else {
            if(i===indexOrder.length-1) {
                index[quadValue] = index[quadValue] || {'_':[]};
                that.callbackCounter++;
                index[quadValue]['_'].push(that.callbackCounter);
                that.callbacksMap[that.callbackCounter] = callback;
                that.callbacksInverseMap[callback] = that.callbackCounter;
            } else {
                index[quadValue] = index[quadValue] || {};
                index = index[quadValue];
            }
        }
    }
    if(doneCallback != null)
        doneCallback(true);
};

Callbacks.CallbacksBackend.prototype.unsubscribe = function(callback) {
    var id = this.callbacksInverseMap[callback];
    if(id != null) {
        delete this.callbacksInverseMap[callback];
        delete this.callbacksMap[id];
    }
};

Callbacks.CallbacksBackend.prototype._tokenizeComponents = function(s, p, o, g) {
    var pattern = {};

    if(s == null) {
        pattern['subject'] = Callbacks.ANYTHING;
    } else {
        pattern['subject'] = {'token': 'uri', 'value':s};
    }

    if(p == null) {
        pattern['predicate'] = Callbacks.ANYTHING;
    } else {
        pattern['predicate'] = {'token': 'uri', 'value':p};
    }

    if(o == null) {
        pattern['object'] = Callbacks.ANYTHING;
    } else {
        pattern['object'] = {'token': 'uri', 'value':o};
    }

    if(g == null) {
        pattern['graph'] = Callbacks.ANYTHING;
    } else {
        pattern['graph'] = {'token': 'uri', 'value':g};
    }

    return pattern;
};

Callbacks.CallbacksBackend.prototype._indexForPattern = function(pattern) {
    var indexKey = pattern.indexKey;
    var matchingIndices = this.indices;

    for(var i=0; i<matchingIndices.length; i++) {
        var index = matchingIndices[i];
        var indexComponents = this.componentOrders[index];
        for(var j=0; j<indexComponents.length; j++) {
            if(Utils.include(indexKey, indexComponents[j])===false) {
                break;
            }
            if(j==indexKey.length-1) {
                return index;
            }
        }
    }
    
    return 'SPOG' // If no other match, we return the most generic index
};

Callbacks.CallbacksBackend.prototype.observeNode = function() {
    var uri,graphUri,callback,doneCallback;

    if(arguments.length === 4) {
        uri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2];
        doneCallback = arguments[3];
    } else {
        uri = arguments[0];
        graphUri = this.engine.lexicon.defaultGraphUri;
        callback = arguments[1];
        doneCallback = arguments[2];
    }
    var query = "CONSTRUCT { <" + uri + "> ?p ?o } WHERE { GRAPH <" + graphUri + "> { <" + uri + "> ?p ?o } }";
    var that = this;
    var queryEnv = {blanks:{}, outCache:{}};
    var bindings = [];
    this.engine.execute(query,  function(success, graph){
        if(success) {
            var node = graph;
            var mustFlush = false;
            var observer = function(event, triples){
                if(event === 'eventsFlushed' && mustFlush ) {
                    mustFlush = false;
                    callback(node);
                } else if(event !== 'eventsFlushed') {
                    mustFlush = true;
                    for(var i = 0; i<triples.length; i++) {
                        var triple = triples[i];
                        var s = RDFJSInterface.buildRDFResource(triple.subject,bindings,that.engine,queryEnv);
                        var p = RDFJSInterface.buildRDFResource(triple.predicate,bindings,that.engine,queryEnv);
                        var o = RDFJSInterface.buildRDFResource(triple.object,bindings,that.engine,queryEnv);
                        if(s!=null && p!=null && o!=null) {
                            triple = new RDFJSInterface.Triple(s,p,o);
                            if(event === Callbacks['added']) {
                                node.add(triple);
                            } else if(event === Callbacks['deleted']) {
                                node.remove(triple);
                            }
                        }
                    }
                }
            };
            that.observersMap[callback] = observer;
            that.subscribeEmpty(Callbacks['eventsFlushed'], observer);
            that.subscribe(uri,null,null,null,observer,function(){
                callback(node);
                if(doneCallback)
                    doneCallback(true)
            });
        } else {
            if(doneCallback)
                doneCallback(false);
        }
    });
};

Callbacks.CallbacksBackend.prototype.stopObservingNode = function(callback) {
    var observer = this.observersMap[callback];
    if(observer) {
        this.unsubscribe(observer);
        this.unsubscribeEmpty(Callbacks['eventsFlushed'],observer);
        return true;
    } else {
        return false;
    }
};

// Queries

Callbacks.CallbacksBackend.prototype.observeQuery = function(query, callback, endCallback) {
    var queryParsed = this.aqt.parseQueryString(query);
    var parsedTree = this.aqt.parseSelect(queryParsed.units[0]);
    var patterns = this.aqt.collectBasicTriples(parsedTree);
    var that = this;
    var queryEnv = {blanks:{}, outCache:{}};
    var floop, pattern, quad, indexKey, indexOrder, index;

    var counter = this.queryCounter;
    this.queryCounter++;
    this.queriesMap[counter] = query;
    this.queriesInverseMap[query] = counter;
    this.queriesList.push(counter);
    this.queriesCallbacksMap[counter] = callback;

    for(var i=0; i<patterns.length; i++) {
        quad = patterns[i];
        if(quad.graph == null) {
            quad.graph = that.engine.lexicon.defaultGraphUriTerm;
        }

        var normalized = that.engine.normalizeQuad(quad, queryEnv, true);
        pattern =  new QuadIndexCommon.Pattern(normalized);        
        indexKey = that._indexForPattern(pattern);
        indexOrder = that.componentOrders[indexKey];
        index = that.queriesIndexMap[indexKey];

        for(var i=0; i<indexOrder.length; i++) {
            var component = indexOrder[i];
            var quadValue = normalized[component];
            if(typeof(quadValue) === 'string') {
                if(index['_'] == null) {
                    index['_'] = [];
                }
                index['_'].push(counter);
                break;
            } else {
                if(i===indexOrder.length-1) {
                    index[quadValue] = index[quadValue] || {'_':[]};
                    index[quadValue]['_'].push(counter);
                } else {
                    index[quadValue] = index[quadValue] || {};
                    index = index[quadValue];
                }
            }
        }

    }

    this.engine.execute(query, function(success, results){
        if(success){
            callback(results);
        } else {
            console.log("ERROR in query callback "+results);
        }                                             
    });

    if(endCallback != null)
        endCallback();
};

Callbacks.CallbacksBackend.prototype.stopObservingQuery = function(query) {
    var id = this.queriesInverseMap[query];
    if(id != null) {
        delete this.queriesInverseMap[query];
        delete this.queriesMap[id];
        this.queriesList = Utils.remove(this.queriesList, id);
    }
};

Callbacks.CallbacksBackend.prototype._searchQueriesInIndex = function(index, order, quadPair) {
    var quadPairNomalized = quadPair[1];
    var quadPair = quadPair[0];

    for(var i=0; i<(order.length+1); i++) {
        var matched = index['_'] || [];
        
        var filteredIds = [];
        for(var j=0; j<matched.length; j++) {
            var queryId = matched[j];
            if(Utils.include(this.pendingQueries,queryId)) {
                Utils.remove(this.pendingQueries,queryId);
                this.matchedQueries.push(queryId);
            }
            // removing IDs for queries no longer being observed
            if(this.queriesMap[queryId] != null) {
                filteredIds.push(queryId);
            }
        }
        index['_'] = filteredIds;

        var component = order[i];
        if(index[''+quadPairNomalized[component]] != null) {
            index = index[''+quadPairNomalized[component]];
        } else {
            break;
        }
    }
};

Callbacks.CallbacksBackend.prototype.dispatchQueries = function(callback) {
    var that = this;
    var floop, query, queryId, queryCallback;
    Utils.repeat(0, this.matchedQueries.length,
                 function(k, env){
                     floop = arguments.callee;
                     queryId = that.matchedQueries[env._i];
                     query = that.queriesMap[queryId];
                     queryCallback = that.queriesCallbacksMap[queryId];
                     Utils.recur(function(){
                         that.engine.execute(query, 
                                             function(success, results){
                                                 if(success) {
                                                     queryCallback(results);
                                                 } else {
                                                     console.log("ERROR executing query callback "+results);
                                                 }
                                                 k(floop,env);
                                             });
                     });
                 },
                 function(env) {
                     callback();
                 });
};

// end of ./src/js-query-engine/src/callbacks.js 
// exports
var Store = {};

// imports

Store.create = function(){
    if(arguments.length == 1) {
        return new Store.Store(arguments[0]);
    } else if(arguments.length == 2) {
        return new Store.Store(arguments[0], arguments[1]);
    } else {
        return new Store.Store();
    };
};

Store.Store = function(arg1, arg2) {
    var callback = null;
    var params   = null;

    if(arguments.length == 0) {
        params ={};
    } else if(arguments.length == 1) {
        params   = {};
        callback = arg1;
    } else if(arguments.length > 1) {
        params   = arg1;
        callback = arg2;
    } else {
        throw("An optional argument map and a callback must be provided");
    }

    if(params['treeOrder'] == null) {
        params['treeOrder'] = 15;
    }

    this.rdf = RDFJSInterface.rdf;
    this.functionMap = {};

    var that = this;
    new Lexicon.Lexicon(function(lexicon){
        new QuadBackend.QuadBackend(params, function(backend){
            params.backend = backend;
            params.lexicon =lexicon;
            that.engine = new QueryEngine.QueryEngine(params);      
            if(callback) {
                callback(that);
            }
        })
    });
};


/**
 * Executes a query in the store.
 * There are two possible way of invoking this function,
 * providing a pair of arrays of namespaces that will be
 * used to compute the union of the default and named
 * dataset, or without them.
 * Both invocations receive as an optional last parameter
 * a callback function that will receive the return status
 * of the query and the results.
 *
 * @arguments:
 * 1)
 * - query
 * - callback (optional)
 * 
 * 2)
 * - query
 * - URIs default namespaces
 * - URIs named namespaces
 * - callback (optional)
 */
Store.Store.prototype.execute = function() {
    if(arguments.length === 3) {
        this.executeWithEnvironment(arguments[0],
                                    arguments[1],
                                    arguments[2]);
    } else if(arguments.length === 4) {
        this.executeWithEnvironment(arguments[0],
                                    arguments[1],
                                    arguments[2],
                                    arguments[3]);
    } else {

        var queryString;
        var callback;
     
        if(arguments.length === 1) {
            queryString = arguments[0];
            callback = function(){};
        } else if(arguments.length === 2) {
            queryString = arguments[0];
            callback = arguments [1];
        }
        this.engine.execute(queryString, callback);
    }
};

Store.Store.prototype.executeWithEnvironment = function() {
    var queryString;
    var callback;
    var defaultGraphs;
    var namedGraphs;

    if(arguments.length === 3) {
        queryString = arguments[0];
        callback = function(){};
        defaultGraphs = arguments[1];
        namedGraphs = arguments[2];
    } else if(arguments.length === 4) {
        queryString = arguments[0];
        callback = arguments [3];
        defaultGraphs = arguments[1];
        namedGraphs = arguments[2];

    }
    this.engine.execute(queryString, callback, defaultGraphs, namedGraphs);
};

Store.Store.prototype.graph = function() {
    var graphUri = null;
    var callback = null;
    if(arguments.length === 1) {
        callback = arguments[0] || function(){};
        graphUri = this.engine.lexicon.defaultGraphUri;
    } else if(arguments.length === 2) {
        callback = arguments[1] || function(){};
        graphUri = arguments[0];
    } else {
        throw("An optional graph URI and a callback function must be provided");
    }

    if(this.rdf.resolve(graphUri) != null) {
        graphUri = this.rdf.resolve(graphUri);
    }

    this.engine.execute("CONSTRUCT { ?s ?p ?o } WHERE { GRAPH <" + graphUri + "> { ?s ?p ?o } }", callback);
};


Store.Store.prototype.node = function() {
     var graphUri = null;
    var callback = null;
    var nodeUri  = null;
    if(arguments.length === 2) {
        nodeUri = arguments[0];
        callback = arguments[1] || function(){};
        graphUri = this.engine.lexicon.defaultGraphUri;
    } else if(arguments.length === 3) {
        nodeUri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2] || function(){};
    } else {
        throw("An optional graph URI and a callback function must be provided");
    }

    if(this.rdf.resolve(graphUri) != null) {
        graphUri = this.rdf.resolve(graphUri);
    }

    if(this.rdf.resolve(nodeUri) != null) {
        nodeUri = this.rdf.resolve(nodeUri);
    }

    this.engine.execute("CONSTRUCT { <" + nodeUri + "> ?p ?o } WHERE { GRAPH <" + graphUri + "> { <" + nodeUri + "> ?p ?o } }", callback);
};

Store.Store.prototype.startObservingNode = function() {
    var uri, graphUri, callback;

    if(arguments.length === 2) {
        uri = arguments[0];
        callback = arguments[1];
        this.engine.callbacksBackend.observeNode(uri, callback, function(){});
    } else if(arguments.length === 3) {
        uri = arguments[0];
        graphUri = arguments[1];
        callback = arguments[2];
        this.engine.callbacksBackend.observeNode(uri, graphUri, callback, function(){});
    }
};

Store.Store.prototype.stopObservingNode = function(callback) {
    this.engine.callbacksBackend.stopObservingNode(callback);
};

Store.Store.prototype.startObservingQuery = function() {
    var query = arguments[0];
    var callback = arguments[1];
    var endCallback = arguments[2];
    if(endCallback!=null) {
        this.engine.callbacksBackend.observeQuery(query, callback, endCallback);
    } else {
        this.engine.callbacksBackend.observeQuery(query, callback, function(){});
    }
};

Store.Store.prototype.stopObservingQuery = function(query) {
    this.engine.callbacksBackend.stopObservingQuery(query);
};

Store.Store.prototype.subscribe = function(s, p, o, g, callback) {
    var adapterCb = function(event,triples){
        var acum = [];
        var queryEnv = {blanks:{}, outCache:{}};
        var bindings = [];

        for(var i=0; i<triples.length; i++) {
            var triple = triples[i];
            var s = RDFJSInterface.buildRDFResource(triple.subject,bindings,this.engine,queryEnv);
            var p = RDFJSInterface.buildRDFResource(triple.predicate,bindings,this.engine,queryEnv);
            var o = RDFJSInterface.buildRDFResource(triple.object,bindings,this.engine,queryEnv);
            if(s!=null && p!=null && o!=null) {
                triple = new RDFJSInterface.Triple(s,p,o);
                acum.push(triple);
            }
        }

        callback(event,acum);
    }

    this.functionMap[callback] = adapterCb;
    this.engine.callbacksBackend.subscribe(s,p,o,g,adapterCb,function(){});
};

Store.Store.prototype.unsubscribe = function(callback) {
    var adapterCb = this.functionMap[callback];
    this.engine.callbacksBackend.unsubscribe(adapterCb);
    delete this.functionMap[callback];
};

Store.Store.prototype.setPrefix = function(prefix, uri) {
    this.rdf.setPrefix(prefix, uri)
};

Store.Store.prototype.setDefaultPrefix = function(uri) {
    this.rdf.setDefaultPrefix(uri)
};

Store.Store.prototype.insert = function() {
    var graph;
    var triples;
    var callback;
    if(arguments.length === 1) {
        triples = arguments[0];
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        triples = arguments[0];
        callback= arguments[1] || function(){};
    } else if(arguments.length === 3) {
        triples = arguments[0];
        graph = this.rdf.createNamedNode(arguments[1]);
        callback= arguments[2] || function(){};
    } else {
        throw("The triples to insert, an optional graph and callback must be provided");
    }

    var query = "";
    var that = this;
    triples.forEach(function(triple) {
        query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + ".";
    });

    if(graph != null) {
        query = "INSERT DATA { GRAPH " + this._nodeToQuery(graph) +" { "+ query + " } }";
    } else {
        query = "INSERT DATA { " + this._nodeToQuery(graph) +" { "+ query + " }";
    }

    this.engine.execute(query, callback);
};

Store.Store.prototype._nodeToQuery = function(term) {
    if(term.interfaceName === 'NamedNode') {
        var resolvedUri = this.rdf.resolve(term.valueOf());
        if(resolvedUri != null) {
            return "<" + resolvedUri + ">";
        } else {
            return "<" + term.valueOf() + ">";
        }
    } else if(term.interfaceName === '') {
        return term.toString();
    } else {
        return term.toString();
    }
};

Store.Store.prototype['delete'] = function() {
    var graph;
    var triples;
    var callback;
    if(arguments.length === 1) {
        triples = arguments[0];
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        triples = arguments[0];
        callback= arguments[1] || function(){};
    } else if(arguments.length === 3) {
        triples = arguments[0];
        graph = this.rdf.createNamedNode(arguments[1]);
        callback= arguments[2] || function(){};
    } else {
        throw("The triples to delete, an optional graph and callback must be provided");
    }

    var query = "";
    var that = this;
    triples.forEach(function(triple) {
        query = query + that._nodeToQuery(triple.subject) + that._nodeToQuery(triple.predicate) + that._nodeToQuery(triple.object) + ".";
    });

    if(graph != null) {
        query = "DELETE DATA { GRAPH " + this._nodeToQuery(graph) +" { "+ query + " } }";
    } else {
        query = "DELETE DATA { " + this._nodeToQuery(graph) +" { "+ query + " }";
    }

    this.engine.execute(query, callback);
};

Store.Store.prototype.clear = function() {
    var graph;
    var callback;

    if(arguments.length === 1) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        callback= arguments[0] || function(){};
    } else if(arguments.length === 2) {
        graph = this.rdf.createNamedNode(arguments[0]);
        callback= arguments[1] || function(){};
    } else {
        throw("The optional graph and a callback must be provided");
    }

    var query = "CLEAR GRAPH " + this._nodeToQuery(graph);
    this.engine.execute(query, callback);
};


Store.Store.prototype.load = function(){
    var mediaType;
    var data;
    var graph;
    var callback;

    if(arguments.length === 3) {
        graph = this.rdf.createNamedNode(this.engine.lexicon.defaultGraphUri);
        mediaType = arguments[0];
        data = arguments[1];
        callback= arguments[2] || function(){};
    } else if(arguments.length === 4) {
        mediaType = arguments[0];
        data = arguments[1];
        graph = this.rdf.createNamedNode(arguments[2]);
        callback= arguments[3] || function(){};
    } else if(arguments.length === 2) {
        throw("The mediaType of the parser, the data a callback and an optional graph must be provided");
    }

    if(mediaType === 'remote') {
        data = this.rdf.createNamedNode(data);
        var query = "LOAD <"+data.valueOf()+"> INTO GRAPH <"+graph.valueOf()+">";

        this.engine.execute(query, callback);
    } else if(data && typeof(data)==='string' && data.indexOf('file://')=== 0) {
        var parser = this.engine.rdfLoader.parsers[mediaType];

        var that = this;
        this.engine.rdfLoader.loadFromFile(parser, {'token':'uri', 'value':graph.valueOf()}, data, function(success, quads) {
            if(success) {
                that.engine.batchLoad(quads,callback);
            } else {
                callback(success, quads);
            }
        });


    } else {
        var parser = this.engine.rdfLoader.parsers[mediaType];

        var that = this;

        this.engine.rdfLoader.tryToParse(parser, {'token':'uri', 'value':graph.valueOf()}, data, function(success, quads) {
            if(success) {
                that.engine.batchLoad(quads,callback);
            } else {
                callback(success, quads);
            }
        });
    }
};

Store.Store.prototype.registerParser = function(mediaType, parser) {
    this.engine.rdfLoader.registerParser(mediaType,parser);
};

/**
 * Returns the URI of all the graphs currently contained
 * in the store
 */
Store.Store.prototype.registeredGraphs = function(callback) {
    var graphs = this.engine.lexicon.registeredGraphs(true);
    var acum = [];
    for(var i=0; i<graphs.length; i++) {
        var graph = graphs[i];
        var uri = new RDFJSInterface.NamedNode(graph);
        acum.push(uri);
    }

    return callback(true, acum);    
};

Store.Store.prototype._nodeToQuery = function(term) {
    if(term.interfaceName === 'NamedNode') {
        var resolvedUri = this.rdf.resolve(term.valueOf());
        if(resolvedUri != null) {
            return "<" + resolvedUri + ">";
        } else {
            return "<" + term.valueOf() + ">";
        }
    } else if(term.interfaceName === '') {
        return term.toString();
    } else {
        return term.toString();
    }
};

/**
 * Returns the current network transport being used by the
 * the store.
 */
Store.Store.prototype.getNetworkTransport = function() {
    return NetworkTransport;
}

/**
 * Sets the network transport used by the store;
 */
Store.Store.prototype.setNetworkTransport = function(networkTransportImpl) {
    NetworkTransport = networkTransportImpl;
}

// end of ./src/js-store/src/store.js 
window.rdfstore = Store;
})(window);
